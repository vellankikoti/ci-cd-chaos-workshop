{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\udc19 CI/CD Chaos WorkshopWelcome to the Ultimate CI/CD Chaos Experience","text":"<p>Break things. Fix things. Become unstoppable.</p> \ud83d\ude80 Start Your Journey"},{"location":"#why-this-workshop-is-different","title":"\ud83c\udf1f Why This Workshop is Different","text":"<p>!!! info \"Real-World Chaos, Real-World Skills\"     - No boring theory. You\u2019ll break real pipelines, fix real failures, and build confidence for production.     - Hands-on everything: Python, Docker, Kubernetes, Jenkins, Testcontainers.     - Earn a certificate that proves you can handle chaos.</p>"},{"location":"#your-adventure-map","title":"\ud83d\uddfa\ufe0f Your Adventure Map\ud83d\udee0\ufe0f Setup\ud83e\uddea Testcontainers\ud83d\udc33 Docker\ud83e\udd16 Jenkins\u2638\ufe0f Kubernetes","text":"<p>Get your environment ready for chaos</p> Start Setup \u2192 <p>Test real databases in containers</p> Begin Testing \u2192 <p>Build, optimize, and secure containers</p> Docker Mastery \u2192 <p>Automate and break your pipelines</p> Build Pipelines \u2192 <p>Deploy with chaos and resilience</p> Deploy to K8s \u2192 <p>Start Setup \u2192 Begin Testing \u2192 Docker Mastery \u2192 Build Pipelines \u2192 Deploy to K8s \u2192</p>"},{"location":"#what-youll-master","title":"\ud83d\udca1 What You'll Master","text":"<ul> <li>Python Automation: Glue your pipeline together</li> <li>Docker: Build, scan, and optimize images</li> <li>Kubernetes: Deploy with confidence</li> <li>Jenkins: Automate, test, and break your CI/CD</li> <li>Testcontainers: Test against real services</li> </ul> Remember: Chaos Agent \ud83d\udd76\ufe0f is watching. Are you ready to defeat them?"},{"location":"troubleshooting/","title":"\ud83d\udd27 Troubleshooting Guide","text":"<p>Welcome to the CI/CD Chaos Workshop Troubleshooting Guide! This guide will help you resolve common issues and get back to defeating the Chaos Agent quickly.</p> <p>\ud83c\udfaf Goal: Get you unstuck and back to the workshop action! \ud83d\ude80</p>"},{"location":"troubleshooting/#python-issues","title":"\ud83d\udc0d Python Issues","text":""},{"location":"troubleshooting/#python-not-found","title":"Python Not Found","text":"<p>Error: <code>python: command not found</code> or <code>python3: command not found</code></p> <p>Solutions: 1. Check if Python is installed: <code>bash    python --version    python3 --version</code></p> <ol> <li>Install Python if missing:</li> <li>Windows: Download from python.org</li> <li>macOS: <code>brew install python@3.10</code></li> <li> <p>Linux: <code>sudo apt install python3.10</code></p> </li> <li> <p>Add to PATH (Windows):</p> </li> <li>Reinstall Python and check \"Add to PATH\"</li> <li>Or manually add Python to system PATH</li> </ol>"},{"location":"troubleshooting/#virtual-environment-issues","title":"Virtual Environment Issues","text":"<p>Error: <code>venv: command not found</code></p> <p>Solutions:</p> <pre><code># Install venv module\npython3 -m pip install virtualenv\n\n# Create virtual environment\npython3 -m venv venv\n\n# Activate (Windows)\nvenv\\Scripts\\activate\n\n# Activate (macOS/Linux)\nsource venv/bin/activate\n</code></pre>"},{"location":"troubleshooting/#docker-issues","title":"\ud83d\udc33 Docker Issues","text":""},{"location":"troubleshooting/#docker-not-running","title":"Docker Not Running","text":"<p>Error: <code>Cannot connect to the Docker daemon</code></p> <p>Solutions: 1. Start Docker Desktop:    - Launch Docker Desktop application    - Wait for the whale icon to stop animating</p> <ol> <li> <p>Linux Docker Service: <code>bash    sudo systemctl start docker    sudo systemctl enable docker</code></p> </li> <li> <p>Add user to docker group (Linux): <code>bash    sudo usermod -aG docker $USER    # Log out and back in</code></p> </li> </ol>"},{"location":"troubleshooting/#permission-denied","title":"Permission Denied","text":"<p>Error: <code>Got permission denied while trying to connect to the Docker daemon</code></p> <p>Solutions: 1. Add user to docker group: <code>bash    sudo usermod -aG docker $USER    newgrp docker</code></p> <ol> <li>Restart Docker service: <code>bash    sudo systemctl restart docker</code></li> </ol>"},{"location":"troubleshooting/#port-already-in-use","title":"Port Already in Use","text":"<p>Error: <code>Bind for 0.0.0.0:8080 failed: port is already allocated</code></p> <p>Solutions: 1. Find what's using the port:    ```bash    # Linux/macOS    lsof -i :8080</p> <p># Windows    netstat -ano | findstr :8080    ```</p> <ol> <li>Stop the process or change port:    ```bash    # Kill process    kill -9  <p># Or use different port    docker run -p 8081:8080 your-image    ```</p>"},{"location":"troubleshooting/#kubernetes-issues","title":"\u2638\ufe0f Kubernetes Issues","text":""},{"location":"troubleshooting/#kubectl-not-found","title":"kubectl Not Found","text":"<p>Error: <code>kubectl: command not found</code></p> <p>Solutions: 1. Install kubectl:    ```bash    # macOS    brew install kubectl</p> <p># Linux    curl -LO \"https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl\"    sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl</p> <p># Windows    # Download from: https://kubernetes.io/docs/tasks/tools/install-kubectl-windows/    ```</p>"},{"location":"troubleshooting/#cluster-not-accessible","title":"Cluster Not Accessible","text":"<p>Error: <code>The connection to the server localhost:8080 was refused</code></p> <p>Solutions: 1. Start your cluster:    ```bash    # Docker Desktop    # Enable Kubernetes in Docker Desktop settings</p> <p># Minikube    minikube start</p> <p># Kind    kind create cluster    ```</p> <ol> <li>Check cluster status: <code>bash    kubectl cluster-info    kubectl get nodes</code></li> </ol>"},{"location":"troubleshooting/#argocd-issues","title":"ArgoCD Issues","text":""},{"location":"troubleshooting/#argocd-server-not-accessible","title":"ArgoCD Server Not Accessible","text":"<p>Error: <code>Unable to connect to ArgoCD server</code></p> <p>Solutions: 1. Check if ArgoCD is running: <code>bash    kubectl get pods -n argocd</code></p> <ol> <li> <p>Port forward ArgoCD server: <code>bash    kubectl port-forward svc/argocd-server -n argocd 8080:443</code></p> </li> <li> <p>Get admin password: <code>bash    kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath=\"{.data.password}\" | base64 -d</code></p> </li> </ol>"},{"location":"troubleshooting/#argo-rollouts-dashboard-issues","title":"Argo Rollouts Dashboard Issues","text":"<p>Error: <code>Argo Rollouts dashboard not accessible</code></p> <p>Solutions: 1. Install Argo Rollouts: <code>bash    kubectl apply -f https://github.com/argoproj/argo-rollouts/releases/latest/download/install.yaml</code></p> <ol> <li>Port forward dashboard: <code>bash    kubectl argo rollouts dashboard</code></li> </ol>"},{"location":"troubleshooting/#testcontainers-issues","title":"\ud83e\uddea TestContainers Issues","text":""},{"location":"troubleshooting/#container-startup-failures","title":"Container Startup Failures","text":"<p>Error: <code>Container startup failed</code></p> <p>Solutions: 1. Check Docker is running: <code>bash    docker ps</code></p> <ol> <li> <p>Increase timeout: <code>python    @pytest.fixture(scope=\"session\")    def mysql_container():        with mysql_container() as mysql:            mysql.with_startup_timeout(120)  # 2 minutes            yield mysql</code></p> </li> <li> <p>Check container logs: <code>bash    docker logs &lt;container_id&gt;</code></p> </li> </ol>"},{"location":"troubleshooting/#network-connectivity-issues","title":"Network Connectivity Issues","text":"<p>Error: <code>Connection refused</code> or <code>Network unreachable</code></p> <p>Solutions: 1. Check container networking: <code>bash    docker network ls    docker network inspect bridge</code></p> <ol> <li>Use host networking (if needed): <code>python    container = mysql_container.with_network_mode(\"host\")</code></li> </ol>"},{"location":"troubleshooting/#jenkins-issues","title":"\ud83e\udd16 Jenkins Issues","text":""},{"location":"troubleshooting/#jenkins-not-starting","title":"Jenkins Not Starting","text":"<p>Error: <code>Jenkins failed to start</code></p> <p>Solutions: 1. Check Docker logs: <code>bash    docker logs jenkins</code></p> <ol> <li> <p>Check port conflicts: <code>bash    lsof -i :8080</code></p> </li> <li> <p>Get initial admin password: <code>bash    docker exec jenkins cat /var/jenkins_home/secrets/initialAdminPassword</code></p> </li> </ol>"},{"location":"troubleshooting/#plugin-installation-failures","title":"Plugin Installation Failures","text":"<p>Error: <code>Plugin installation failed</code></p> <p>Solutions: 1. Update Jenkins:    - Go to Manage Jenkins \u2192 Manage Plugins    - Update Jenkins to latest version</p> <ol> <li>Install plugins manually:</li> <li>Download plugin .hpi files</li> <li>Upload via Manage Plugins \u2192 Advanced</li> </ol>"},{"location":"troubleshooting/#general-issues","title":"\ud83d\udd27 General Issues","text":""},{"location":"troubleshooting/#permission-issues","title":"Permission Issues","text":"<p>Error: <code>Permission denied</code></p> <p>Solutions: 1. Check file permissions: <code>bash    ls -la    chmod +x script.sh</code></p> <ol> <li>Use sudo when needed: <code>bash    sudo docker run ...</code></li> </ol>"},{"location":"troubleshooting/#network-issues","title":"Network Issues","text":"<p>Error: <code>Network unreachable</code> or <code>Connection timeout</code></p> <p>Solutions: 1. Check internet connection: <code>bash    ping google.com</code></p> <ol> <li>Check firewall settings:</li> <li>Windows: Check Windows Firewall</li> <li>macOS: Check System Preferences \u2192 Security &amp; Privacy</li> <li> <p>Linux: Check iptables/ufw</p> </li> <li> <p>Use VPN if behind corporate firewall</p> </li> </ol>"},{"location":"troubleshooting/#disk-space-issues","title":"Disk Space Issues","text":"<p>Error: <code>No space left on device</code></p> <p>Solutions: 1. Clean Docker: <code>bash    docker system prune -a</code></p> <ol> <li> <p>Clean Kubernetes: <code>bash    kubectl delete all --all</code></p> </li> <li> <p>Check disk space: <code>bash    df -h</code></p> </li> </ol>"},{"location":"troubleshooting/#still-stuck","title":"\ud83c\udd98 Still Stuck?","text":""},{"location":"troubleshooting/#get-help","title":"Get Help","text":"<ol> <li>Check the logs:    ```bash    # Docker logs    docker logs  <p># Kubernetes logs    kubectl logs  <p># Application logs    tail -f /var/log/application.log    ```</p> <ol> <li>Ask for help:</li> <li>Workshop Discord/Slack channel</li> <li>GitHub Issues: Create an issue</li> <li> <p>Stack Overflow with <code>#ci-cd-chaos-workshop</code> tag</p> </li> <li> <p>Reset and try again:    ```bash    # Reset Docker    docker system prune -a</p> </li> </ol> <p># Reset Kubernetes    kubectl delete all --all</p> <p># Start fresh    minikube delete &amp;&amp; minikube start    ```</p>"},{"location":"troubleshooting/#common-commands-reference","title":"Common Commands Reference","text":"<pre><code># Check system status\ndocker ps\nkubectl get pods\npython --version\nnode --version\n\n# Restart services\nsudo systemctl restart docker\nminikube stop &amp;&amp; minikube start\n\n# Clean up\ndocker system prune\nkubectl delete all --all\n</code></pre>"},{"location":"troubleshooting/#quick-fixes-by-scenario","title":"\ud83c\udfaf Quick Fixes by Scenario","text":""},{"location":"troubleshooting/#testcontainers-scenarios","title":"TestContainers Scenarios","text":"<ul> <li>MySQL connection issues: Check if port 3306 is free</li> <li>Container startup slow: Increase startup timeout</li> <li>Network issues: Use host networking mode</li> </ul>"},{"location":"troubleshooting/#docker-scenarios","title":"Docker Scenarios","text":"<ul> <li>Port conflicts: Change ports or kill conflicting processes</li> <li>Permission issues: Use sudo or add user to docker group</li> <li>Image build failures: Check Dockerfile syntax</li> </ul>"},{"location":"troubleshooting/#jenkins-scenarios","title":"Jenkins Scenarios","text":"<ul> <li>Plugin installation: Update Jenkins first</li> <li>Pipeline failures: Check Groovy syntax</li> <li>Agent connection: Check agent configuration</li> </ul>"},{"location":"troubleshooting/#kubernetes-scenarios","title":"Kubernetes Scenarios","text":"<ul> <li>Pod not starting: Check resource limits and requests</li> <li>Service not accessible: Check service type and ports</li> <li>ArgoCD sync issues: Check Git repository access</li> </ul> <p>\ud83d\udca1 Pro Tip: When in doubt, restart your environment and try again. The Chaos Agent loves to exploit configuration drift! \ud83d\udd04</p> <p>Happy troubleshooting! May your CI/CD pipelines be chaos-resistant! \ud83d\udee1\ufe0f </p>"},{"location":"docker/scenario_01_streaming/","title":"\ud83c\udfa5 Streaming Server with Docker \u2014 Complete Guide (macOS, Linux, Windows)","text":"<p>This document shows how to:</p> <p>\u2705 Run a live streaming server locally \u2705 Connect OBS Studio for live video \u2705 Share your stream publicly via ngrok \u2705 Host your stream on your own domain using Cloudflare Tunnel</p> <p>We\u2019ll use Owncast, an open-source, self-hosted streaming platform that runs entirely in Docker.</p>"},{"location":"docker/scenario_01_streaming/#1-run-streaming-server-locally","title":"\ud83d\ude80 1. Run Streaming Server Locally","text":""},{"location":"docker/scenario_01_streaming/#11-install-docker","title":"\u2705 1.1 Install Docker","text":""},{"location":"docker/scenario_01_streaming/#macos","title":"macOS","text":"<p>Install Homebrew if you don\u2019t have it:</p> <pre><code>/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n````\n\nThen install Docker:\n\n```bash\nbrew install --cask docker\n</code></pre> <p>Start Docker Desktop after install.</p>"},{"location":"docker/scenario_01_streaming/#linux","title":"Linux","text":""},{"location":"docker/scenario_01_streaming/#debian-ubuntu","title":"Debian / Ubuntu:","text":"<pre><code>sudo apt update\nsudo apt install -y docker.io\nsudo systemctl start docker\nsudo systemctl enable docker\n</code></pre> <p>Add your user to the docker group:</p> <pre><code>sudo usermod -aG docker $USER\n</code></pre> <p>Then log out and log back in.</p>"},{"location":"docker/scenario_01_streaming/#rhel-centos","title":"RHEL / CentOS:","text":"<pre><code>sudo yum install -y docker\nsudo systemctl enable docker\nsudo systemctl start docker\n</code></pre>"},{"location":"docker/scenario_01_streaming/#windows","title":"Windows","text":"<ul> <li> <p>Download Docker Desktop:   https://www.docker.com/products/docker-desktop/</p> </li> <li> <p>Install and run Docker Desktop.</p> </li> </ul> <p>\u2705 Confirm Docker works:</p> <pre><code>docker --version\n</code></pre>"},{"location":"docker/scenario_01_streaming/#12-run-owncast","title":"\u2705 1.2 Run Owncast","text":"<p>Run Owncast container:</p> <pre><code>docker run -d \\\n  -p 8080:8080 \\\n  -p 1935:1935 \\\n  owncast/owncast\n</code></pre> <p>\u2705 Owncast will run locally:</p> <ul> <li>Web page:</li> </ul> <p><code>http://localhost:8080</code></p> <ul> <li>RTMP ingest:</li> </ul> <p><code>rtmp://localhost:1935/live</code></p>"},{"location":"docker/scenario_01_streaming/#13-access-admin-panel","title":"\u2705 1.3 Access Admin Panel","text":"<p>Visit:</p> <pre><code>http://localhost:8080/admin\n</code></pre> <p>Default credentials:</p> <pre><code>Username: admin\nPassword: abc123\n</code></pre> <p>Go to:</p> <pre><code>Server Setup \u2192 Stream Settings\n</code></pre> <p>\u2705 Copy:</p> <ul> <li>RTMP URL:</li> </ul> <p><code>rtmp://localhost:1935/live</code> * Stream Key:   e.g. <code>abc123xyz</code></p>"},{"location":"docker/scenario_01_streaming/#2-install-obs-studio","title":"\ud83c\udfa5 2. Install OBS Studio","text":""},{"location":"docker/scenario_01_streaming/#macos_1","title":"\u2705 macOS","text":"<p>Install via Homebrew:</p> <pre><code>brew install --cask obs\n</code></pre> <p>Or download: https://obsproject.com/</p>"},{"location":"docker/scenario_01_streaming/#linux_1","title":"\u2705 Linux","text":"<p>For Ubuntu:</p> <pre><code>sudo add-apt-repository ppa:obsproject/obs-studio\nsudo apt update\nsudo apt install obs-studio\n</code></pre>"},{"location":"docker/scenario_01_streaming/#windows_1","title":"\u2705 Windows","text":"<p>Download and install: https://obsproject.com/</p>"},{"location":"docker/scenario_01_streaming/#3-configure-obs-for-streaming","title":"\ud83c\udf9b\ufe0f 3. Configure OBS for Streaming","text":""},{"location":"docker/scenario_01_streaming/#step-1-stream-settings","title":"\u2705 Step 1 \u2014 Stream Settings","text":"<p>In OBS:</p> <ul> <li>Go to:</li> </ul> <p><code>Settings \u2192 Stream</code> * Choose:</p> <p><code>Service: Custom...   Server: rtmp://localhost:1935/live   Stream Key: &lt;your stream key&gt;</code></p> <p>Replace with your actual stream key from Owncast.</p>"},{"location":"docker/scenario_01_streaming/#step-2-add-video-sources","title":"\u2705 Step 2 \u2014 Add Video Sources","text":"<p>In OBS:</p> <p>\u2705 Add Webcam</p> <ul> <li>Click \u2795 under \u201cSources.\u201d</li> <li>Choose:</li> </ul> <p><code>Video Capture Device</code> * Pick your webcam.</p> <p>\u2705 Share Your Screen</p> <ul> <li> <p>Click \u2795 under \u201cSources.\u201d</p> </li> <li> <p>macOS:</p> <p><code>macOS Screen Capture</code>   * Windows:</p> <p><code>Display Capture</code>   * Linux:</p> <p><code>Screen Capture (XSHM) or PipeWire</code></p> </li> <li> <p>Select your display or window.</p> </li> </ul> <p>\u2705 Play a Video File</p> <ul> <li>Click \u2795 under \u201cSources.\u201d</li> <li>Choose:</li> </ul> <p><code>Media Source</code> * Pick a video file (e.g. mp4).</p>"},{"location":"docker/scenario_01_streaming/#step-3-start-streaming","title":"\u2705 Step 3 \u2014 Start Streaming","text":"<ul> <li>Click:</li> </ul> <p><code>Start Streaming</code></p>"},{"location":"docker/scenario_01_streaming/#step-4-view-your-stream","title":"\u2705 Step 4 \u2014 View Your Stream","text":"<p>Visit:</p> <pre><code>http://localhost:8080\n</code></pre> <p>\u2705 You should see your live video!</p>"},{"location":"docker/scenario_01_streaming/#4-share-your-local-stream-publicly-ngrok","title":"\ud83c\udf0e 4. Share Your Local Stream Publicly (ngrok)","text":"<p>Perfect for quick demos without cloud servers.</p>"},{"location":"docker/scenario_01_streaming/#step-1-install-ngrok","title":"\u2705 Step 1 \u2014 Install ngrok","text":""},{"location":"docker/scenario_01_streaming/#macos_2","title":"macOS","text":"<pre><code>brew install ngrok/ngrok/ngrok\n</code></pre> <p>Or download:</p> <p>https://ngrok.com/download</p>"},{"location":"docker/scenario_01_streaming/#linux_2","title":"Linux","text":"<p>Download the binary from:</p> <p>https://ngrok.com/download</p> <p>Unzip it and move it to <code>/usr/local/bin</code>.</p> <p>Example:</p> <pre><code>unzip ngrok-v3-stable-linux-amd64.zip\nsudo mv ngrok /usr/local/bin/\n</code></pre>"},{"location":"docker/scenario_01_streaming/#windows_2","title":"Windows","text":"<p>Download and install from:</p> <p>https://ngrok.com/download</p>"},{"location":"docker/scenario_01_streaming/#step-2-authenticate-ngrok","title":"\u2705 Step 2 \u2014 Authenticate ngrok","text":"<p>Sign up for a free account. Copy your auth token.</p> <p>Run:</p> <pre><code>ngrok config add-authtoken YOUR_TOKEN_HERE\n</code></pre>"},{"location":"docker/scenario_01_streaming/#step-3-run-ngrok","title":"\u2705 Step 3 \u2014 Run ngrok","text":"<p>Run:</p> <pre><code>ngrok http 8080\n</code></pre> <p>\u2705 ngrok will give you a URL like:</p> <pre><code>https://funny-lion-1234.ngrok.io\n</code></pre> <p>\u2705 Share this link \u2192 your stream is globally accessible!</p>"},{"location":"docker/scenario_01_streaming/#limitations","title":"\ud83d\udeab Limitations","text":"<ul> <li>ngrok shares only web page traffic (port 8080).</li> <li>RTMP streaming from outside (port 1935) will not work through ngrok.</li> <li>Perfect for demo viewing by others.</li> </ul>"},{"location":"docker/scenario_01_streaming/#5-host-streaming-on-your-own-domain-cloudflare-tunnel","title":"\ud83c\udf10 5. Host Streaming on Your Own Domain (Cloudflare Tunnel)","text":"<p>For a professional, permanent solution.</p>"},{"location":"docker/scenario_01_streaming/#step-1-prerequisites","title":"\u2705 Step 1 \u2014 Prerequisites","text":"<p>\u2705 You need:</p> <ul> <li>A domain (e.g. yourdomain.com)</li> <li>Cloudflare account managing that domain</li> <li>Docker + cloudflared installed</li> </ul>"},{"location":"docker/scenario_01_streaming/#step-2-install-cloudflared","title":"\u2705 Step 2 \u2014 Install cloudflared","text":""},{"location":"docker/scenario_01_streaming/#macos_3","title":"macOS","text":"<pre><code>brew install cloudflared\n</code></pre>"},{"location":"docker/scenario_01_streaming/#linux_3","title":"Linux","text":"<p>Debian/Ubuntu:</p> <pre><code>sudo apt install cloudflared\n</code></pre> <p>Or download binary:</p> <p>https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/install-and-setup/installation/</p>"},{"location":"docker/scenario_01_streaming/#windows_3","title":"Windows","text":"<p>Download and install:</p> <p>https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/install-and-setup/installation/</p>"},{"location":"docker/scenario_01_streaming/#step-3-login-to-cloudflare","title":"\u2705 Step 3 \u2014 Login to Cloudflare","text":"<p>Run:</p> <pre><code>cloudflared tunnel login\n</code></pre> <p>A browser window opens \u2192 log in.</p>"},{"location":"docker/scenario_01_streaming/#step-4-create-a-tunnel","title":"\u2705 Step 4 \u2014 Create a Tunnel","text":"<p>Run:</p> <pre><code>cloudflared tunnel create owncast-tunnel\n</code></pre> <p>Example output:</p> <pre><code>Tunnel credentials written to /Users/koti/.cloudflared/324500d1-4ab0b-a4694083b668.json\n</code></pre>"},{"location":"docker/scenario_01_streaming/#step-5-create-config-file","title":"\u2705 Step 5 \u2014 Create Config File","text":"<p>Create:</p> <pre><code>/Users/koti/.cloudflared/config.yml\n</code></pre> <p>Example content:</p> <pre><code>tunnel: owncast-tunnel\ncredentials-file: /Users/koti/.cloudflared/324500d1-a4694083b668.json\n\ningress:\n  - hostname: stream.yourdomain.com\n    service: http://localhost:8080\n  - service: http_status:404\n</code></pre> <p>\u2705 Replace:</p> <ul> <li><code>stream.yourdomain.com</code> \u2192 your subdomain</li> <li>path to your credentials file</li> </ul>"},{"location":"docker/scenario_01_streaming/#step-6-route-dns","title":"\u2705 Step 6 \u2014 Route DNS","text":"<p>Run:</p> <pre><code>cloudflared tunnel route dns owncast-tunnel stream.yourdomain.com\n</code></pre> <p>\u2705 This creates a DNS CNAME record:</p> <pre><code>stream.yourdomain.com \u2192 &lt;your-tunnel-id&gt;.cfargotunnel.com\n</code></pre>"},{"location":"docker/scenario_01_streaming/#step-7-run-tunnel","title":"\u2705 Step 7 \u2014 Run Tunnel","text":"<p>First run Owncast:</p> <pre><code>docker run -d -p 8080:8080 -p 1935:1935 owncast/owncast\n</code></pre> <p>Then start your tunnel:</p> <pre><code>cloudflared tunnel run owncast-tunnel\n</code></pre> <p>\u2705 Your stream is live:</p> <pre><code>https://stream.yourdomain.com\n</code></pre>"},{"location":"docker/scenario_01_streaming/#your-one-liner-workflow","title":"\u2b50 Your One-Liner Workflow","text":"<p>Every time you want to go live publicly:</p> <pre><code>docker run -d -p 8080:8080 -p 1935:1935 owncast/owncast\ncloudflared tunnel run owncast-tunnel\n</code></pre> <p>\u2705 That\u2019s it!</p>"},{"location":"docker/scenario_01_streaming/#summary","title":"\ud83c\udfaf Summary","text":"<p>\u2705 Local streaming server \u2192 Owncast in Docker \u2705 Stream live with OBS \u2705 Share demos via ngrok \u2705 Host live streams on your own domain via Cloudflare Tunnel</p> <p>Enjoy building your streaming empire!</p>"},{"location":"docker/scenario_02_chaos_pipeline/","title":"\ud83d\ude80 Docker Scenario 02 \u2014 Chaos-Proof Python CI/CD Pipeline with Testcontainers","text":"<p>Goal: - Demonstrate powerful Docker capabilities in CI/CD pipelines - Show how Testcontainers enables true environment-independent testing - Run chaos tests to simulate failures and prove pipeline resilience - Teach how to run Docker inside Docker (DinD) safely</p> <p>This scenario fully justifies the title:</p> <p>Setting Up Reliable CI/CD Pipelines with Python, K8s &amp; Testcontainers</p>"},{"location":"docker/scenario_02_chaos_pipeline/#prerequisites","title":"\u2705 Prerequisites","text":"<ul> <li>Docker installed</li> <li>Basic Python knowledge</li> <li>Basic familiarity with Jenkins pipelines</li> <li>Enough RAM (~2GB) for Docker containers</li> </ul>"},{"location":"docker/scenario_02_chaos_pipeline/#scenario-overview","title":"\u2705 Scenario Overview","text":"<p>In this scenario:</p> <p>\u2705 We spin up Jenkins in Docker. \u2705 Jenkins runs a pipeline inside a Docker agent:   - Spins up Testcontainers (ephemeral MySQL).   - Runs Python tests talking to MySQL.   - Launches a Chaos Monkey to kill containers randomly.</p> <p>\u2705 Entire environment runs in Docker: - No external MySQL - No external services - 100% self-contained</p>"},{"location":"docker/scenario_02_chaos_pipeline/#directory-structure","title":"\u2705 Directory Structure","text":"<p>Your workshop directory will look like this:</p> <pre><code>\ndocker-scenario-02/\n\u2502\n\u251c\u2500\u2500 jenkins-docker/\n\u2502     \u2514\u2500\u2500 Dockerfile\n\u2502\n\u251c\u2500\u2500 pipeline/\n\u2502     \u251c\u2500\u2500 Jenkinsfile\n\u2502     \u2514\u2500\u2500 requirements.txt\n\u2502\n\u251c\u2500\u2500 tests/\n\u2502     \u2514\u2500\u2500 test\\_mysql.py\n\u2502\n\u2514\u2500\u2500 README.md\n\n````\n\n---\n\n# \u2705 Step-by-Step Implementation\n\n---\n\n## \u2705 1. Build a Jenkins Docker Image\n\nWe\u2019ll build a custom Jenkins Docker image that:\n\n- Has Docker CLI available\n- Allows running Docker commands in pipelines\n\n### **`docker-scenario-02/jenkins-docker/Dockerfile`**\n\n```Dockerfile\nFROM jenkins/jenkins:lts\n\nUSER root\n\n# Install Docker CLI inside Jenkins container\nRUN apt-get update &amp;&amp; \\\n    apt-get install -y docker.io &amp;&amp; \\\n    rm -rf /var/lib/apt/lists/*\n\nUSER jenkins\n````\n\n---\n\n### Build the image\n\n```bash\ncd docker-scenario-02/jenkins-docker\n\ndocker build -t jenkins-docker .\n</code></pre> <p>\u2705 This builds a Jenkins image that can run Docker commands inside itself.</p>"},{"location":"docker/scenario_02_chaos_pipeline/#2-run-jenkins-container","title":"\u2705 2. Run Jenkins Container","text":"<p>Run Jenkins and mount Docker socket:</p> <pre><code>docker run -d \\\n  --name jenkins \\\n  -p 8080:8080 \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  jenkins-docker\n</code></pre> <p>\u2705 Jenkins can now:</p> <ul> <li>Run Docker CLI commands</li> <li>Spin up containers during builds</li> </ul>"},{"location":"docker/scenario_02_chaos_pipeline/#3-prepare-python-test-with-testcontainers","title":"\u2705 3. Prepare Python Test with Testcontainers","text":""},{"location":"docker/scenario_02_chaos_pipeline/#docker-scenario-02teststest_mysqlpy","title":"<code>docker-scenario-02/tests/test_mysql.py</code>","text":"<pre><code># test_mysql.py\n\nfrom testcontainers.mysql import MySqlContainer\nimport sqlalchemy\n\ndef test_mysql_container():\n    with MySqlContainer('mysql:8.0') as mysql:\n        engine = sqlalchemy.create_engine(mysql.get_connection_url())\n        with engine.connect() as conn:\n            result = conn.execute(\"SELECT VERSION()\")\n            version = result.fetchone()[0]\n            assert version.startswith(\"8.\")\n</code></pre> <p>\u2705 This:</p> <ul> <li>Spins up a real MySQL database in Docker</li> <li>Connects via SQLAlchemy</li> <li>Confirms MySQL is running</li> </ul>"},{"location":"docker/scenario_02_chaos_pipeline/#4-create-python-requirements","title":"\u2705 4. Create Python Requirements","text":""},{"location":"docker/scenario_02_chaos_pipeline/#docker-scenario-02pipelinerequirementstxt","title":"<code>docker-scenario-02/pipeline/requirements.txt</code>","text":"<pre><code>pytest\nsqlalchemy\ntestcontainers[mysql]\n</code></pre>"},{"location":"docker/scenario_02_chaos_pipeline/#5-create-jenkins-pipeline-script","title":"\u2705 5. Create Jenkins Pipeline Script","text":""},{"location":"docker/scenario_02_chaos_pipeline/#docker-scenario-02pipelinejenkinsfile","title":"<code>docker-scenario-02/pipeline/Jenkinsfile</code>","text":"<pre><code>pipeline {\n    agent {\n        docker {\n            image 'python:3.10'\n            args '-v /var/run/docker.sock:/var/run/docker.sock'\n        }\n    }\n\n    environment {\n        PIP_DISABLE_PIP_VERSION_CHECK = \"1\"\n    }\n\n    stages {\n        stage('Install Requirements') {\n            steps {\n                sh '''\n                    pip install -r pipeline/requirements.txt\n                '''\n            }\n        }\n\n        stage('Run Testcontainers Tests') {\n            steps {\n                sh '''\n                    pytest tests/test_mysql.py\n                '''\n            }\n        }\n\n        stage('Chaos Monkey') {\n            steps {\n                sh '''\n                    echo \"Starting chaos container...\"\n                    docker run -d --name chaos busybox sh -c \"while true; do sleep 5; done\"\n                    sleep 5\n                    echo \"Killing chaos container...\"\n                    docker kill chaos\n                '''\n            }\n        }\n    }\n}\n</code></pre> <p>\u2705 What this pipeline does:</p> <ul> <li>Uses a Python Docker agent</li> <li>Installs Python dependencies</li> <li>Runs Python tests with Testcontainers (spins up MySQL inside Docker)</li> <li> <p>Runs a Chaos Monkey:</p> </li> <li> <p>Launches a random Docker container</p> </li> <li>Kills it to simulate unexpected failures</li> </ul>"},{"location":"docker/scenario_02_chaos_pipeline/#6-run-the-pipeline","title":"\u2705 6. Run the Pipeline","text":""},{"location":"docker/scenario_02_chaos_pipeline/#jenkins-ui-setup","title":"\ud83d\udd39 Jenkins UI Setup","text":"<ol> <li>Access Jenkins:</li> </ol> <pre><code>http://localhost:8080\n</code></pre> <ol> <li> <p>Unlock Jenkins:</p> </li> <li> <p>Get initial admin password:</p> <p><code>bash  docker exec jenkins cat /var/jenkins_home/secrets/initialAdminPassword</code>    * Paste into browser.</p> </li> <li> <p>Install recommended plugins.</p> </li> <li> <p>Create a new Pipeline job:</p> </li> <li> <p>Name:</p> </li> </ol> <p><code>chaos-ci-pipeline</code> * Pipeline script:</p> <ul> <li>Copy-paste the entire Jenkinsfile</li> </ul>"},{"location":"docker/scenario_02_chaos_pipeline/#run-the-job","title":"\ud83d\udd39 Run the Job","text":"<p>\u2705 Click Build Now.</p> <p>Observe:</p> <ul> <li>Testcontainers starts a MySQL container.</li> <li>Python test connects and verifies MySQL.</li> <li>Chaos Monkey launches and kills a container.</li> <li>Pipeline still completes \u2192 proving resilience.</li> </ul>"},{"location":"docker/scenario_02_chaos_pipeline/#what-this-proves","title":"\u2705 What This Proves","text":"<p>\u2705 Docker Power:</p> <ul> <li>Run Docker inside Docker (DinD)</li> <li>Launch ephemeral services in pipelines</li> <li>Chaos engineering simulations</li> </ul> <p>\u2705 Testcontainers Magic:</p> <ul> <li>Run databases for tests without installing anything</li> <li>Perfect for reliable CI/CD</li> </ul> <p>\u2705 Reliable Pipelines:</p> <ul> <li>Even with chaos, the pipeline recovers</li> </ul> <p>\u2705 K8s Ready:</p> <ul> <li> <p>This entire pipeline can move into Kubernetes clusters:</p> </li> <li> <p>Jenkins as Deployment</p> </li> <li>Docker socket in DinD pods</li> <li>Works identically</li> </ul>"},{"location":"docker/scenario_02_chaos_pipeline/#running-everything","title":"\u2705 Running Everything","text":"<p>Run Jenkins:</p> <pre><code>docker run -d \\\n  --name jenkins \\\n  -p 8080:8080 \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  jenkins-docker\n</code></pre> <p>Go to:</p> <pre><code>http://localhost:8080\n</code></pre> <p>Run the pipeline \u2192 watch chaos tests complete successfully.</p>"},{"location":"docker/scenario_02_chaos_pipeline/#optional-clean-up","title":"\ud83d\udea6 Optional \u2014 Clean Up","text":"<pre><code>docker stop jenkins\ndocker rm jenkins\ndocker rmi jenkins-docker\n</code></pre>"},{"location":"docker/scenario_03_networking/","title":"\ud83d\ude80 Scenario 03 \u2014 Docker Networking Magic","text":""},{"location":"docker/scenario_03_networking/#scenario-goal","title":"\ud83c\udfaf Scenario Goal","text":"<p>Demonstrate real-world Docker networking problems and how to fix them by:</p> <p>\u2705 Running a Python Flask Voting App (WFO vs WFH) \u2705 Letting workshop attendees vote live via a public URL (ngrok or Cloudflare Tunnel) \u2705 Simulating networking failures: - Missing database - Containers in separate networks \u2705 Fixing networking issues \u2192 everything magically works!</p> <p>This scenario creates an unforgettable AHA moment for learners.</p>"},{"location":"docker/scenario_03_networking/#directory-structure","title":"\u2705 Directory Structure","text":"<pre><code>\nscenario\\_03\\_networking/\n\u2502\n\u251c\u2500\u2500 app/\n\u2502     \u251c\u2500\u2500 app.py\n\u2502     \u251c\u2500\u2500 requirements.txt\n\u2502     \u2514\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 scripts/\n\u2502     \u251c\u2500\u2500 run\\_app\\_without\\_db.sh\n\u2502     \u251c\u2500\u2500 run\\_app\\_with\\_db\\_wrong\\_network.sh\n\u2502     \u251c\u2500\u2500 fix\\_network.sh\n\u2502     \u251c\u2500\u2500 expose\\_ngrok.sh\n\u2502     \u251c\u2500\u2500 expose\\_cloudflared.sh\n\u2502     \u2514\u2500\u2500 cleanup.sh\n\u2514\u2500\u2500 scenario\\_03\\_networking.md\n\n````\n\n---\n\n# \u2705 How The Voting App Works\n\n## Flask Voting App\n\nTwo buttons:\n\n- \u2705 Vote **WFH** (Work From Home)\n- \u2705 Vote **WFO** (Work From Office)\n\nVotes stored in Redis under keys:\n\n- `votes:wfh`\n- `votes:wfo`\n\n\u2705 Total votes shown live on web page.\n\n---\n\n## app/app.py\n\n```python\nfrom flask import Flask, render_template_string, request\nimport redis\nimport os\n\napp = Flask(__name__)\n\nREDIS_HOST = os.getenv(\"REDIS_HOST\", \"localhost\")\nr = redis.Redis(host=REDIS_HOST, port=6379, decode_responses=True)\n\nTEMPLATE = \"\"\"\n&lt;h2&gt;Vote for your preference:&lt;/h2&gt;\n&lt;form method=\"POST\"&gt;\n    &lt;button name=\"vote\" value=\"wfh\"&gt;Vote WFH (Work From Home)&lt;/button&gt;\n    &lt;button name=\"vote\" value=\"wfo\"&gt;Vote WFO (Work From Office)&lt;/button&gt;\n&lt;/form&gt;\n&lt;p&gt;WFH Votes: {{ wfh }}&lt;/p&gt;\n&lt;p&gt;WFO Votes: {{ wfo }}&lt;/p&gt;\n\"\"\"\n\n@app.route(\"/\", methods=[\"GET\", \"POST\"])\ndef index():\n    if request.method == \"POST\":\n        vote = request.form[\"vote\"]\n        r.incr(f\"votes:{vote}\")\n\n    wfh = r.get(\"votes:wfh\") or 0\n    wfo = r.get(\"votes:wfo\") or 0\n    return render_template_string(TEMPLATE, wfh=wfh, wfo=wfo)\n\nif __name__ == \"__main__\":\n    app.run(host=\"0.0.0.0\", port=5000)\n````\n\n---\n\n## app/requirements.txt\n\n</code></pre> <p>flask redis</p> <pre><code>\n---\n\n## app/Dockerfile\n\n```Dockerfile\nFROM python:3.10\n\nWORKDIR /app\nCOPY . .\nRUN pip install -r requirements.txt\n\nCMD [\"python\", \"app.py\"]\n</code></pre>"},{"location":"docker/scenario_03_networking/#scenario-execution-steps","title":"\u2705 Scenario Execution Steps","text":""},{"location":"docker/scenario_03_networking/#step-1-run-app-without-database","title":"\u2b50 STEP 1 \u2014 Run App Without Database","text":""},{"location":"docker/scenario_03_networking/#run-redis-none-yet","title":"Run Redis (none yet)","text":"<p>\u2192 Not running at all initially.</p>"},{"location":"docker/scenario_03_networking/#build-flask-app","title":"Build Flask App","text":"<pre><code>docker build -t vote-app ./app\n</code></pre>"},{"location":"docker/scenario_03_networking/#run-flask-app-without-redis","title":"Run Flask App Without Redis","text":"<p>Run without setting <code>REDIS_HOST</code>:</p> <pre><code>docker run -d --name vote-app -p 5000:5000 vote-app\n</code></pre> <p>\u2705 Open:</p> <pre><code>http://localhost:5000\n</code></pre>"},{"location":"docker/scenario_03_networking/#result","title":"Result","text":"<ul> <li>Page loads \u2192 first adrenaline spike.</li> <li>Click a vote \u2192 Flask crashes.</li> </ul> <p>\u2705 Logs show:</p> <pre><code>redis.exceptions.ConnectionError: Error 111 connecting to localhost:6379. Connection refused.\n</code></pre> <p>\u2705 Lesson: Containers can\u2019t magically have databases available!</p>"},{"location":"docker/scenario_03_networking/#error-1-missing-database","title":"\ud83d\udeab Error #1 \u2192 Missing Database","text":"<p>How to Fix: Run Redis.</p>"},{"location":"docker/scenario_03_networking/#step-2-run-redis-but-in-wrong-network","title":"\u2705 STEP 2 \u2014 Run Redis but In Wrong Network","text":""},{"location":"docker/scenario_03_networking/#run-redis","title":"Run Redis","text":"<p>Run Redis standalone:</p> <pre><code>docker run -d --name redis-server redis:alpine\n</code></pre>"},{"location":"docker/scenario_03_networking/#re-run-flask","title":"Re-run Flask","text":"<pre><code>docker rm -f vote-app\n\ndocker run -d --name vote-app -p 5000:5000 \\\n    -e REDIS_HOST=redis-server \\\n    vote-app\n</code></pre>"},{"location":"docker/scenario_03_networking/#result_1","title":"Result","text":"<p>\u2705 App still crashes:</p> <pre><code>redis.exceptions.ConnectionError: Error 111 connecting to redis-server:6379. Name or service not known.\n</code></pre> <p>\u2705 Lesson:</p> <ul> <li>Containers in separate networks cannot see each other.</li> </ul>"},{"location":"docker/scenario_03_networking/#error-2-separate-networks","title":"\ud83d\udeab Error #2 \u2192 Separate Networks","text":"<p>Flask container can\u2019t resolve <code>redis-server</code> because:</p> <ul> <li>Redis is in bridge network.</li> <li>Flask is in another isolated network.</li> </ul>"},{"location":"docker/scenario_03_networking/#step-3-fix-the-network","title":"\u2705 STEP 3 \u2014 Fix The Network","text":""},{"location":"docker/scenario_03_networking/#create-custom-network","title":"Create Custom Network","text":"<pre><code>docker network create vote-net\n</code></pre>"},{"location":"docker/scenario_03_networking/#run-redis-in-vote-net","title":"Run Redis in vote-net","text":"<pre><code>docker rm -f redis-server\n\ndocker run -d --name redis-server \\\n    --network vote-net \\\n    redis:alpine\n</code></pre>"},{"location":"docker/scenario_03_networking/#run-flask-in-vote-net","title":"Run Flask in vote-net","text":"<pre><code>docker rm -f vote-app\n\ndocker run -d --name vote-app \\\n    --network vote-net \\\n    -p 5000:5000 \\\n    -e REDIS_HOST=redis-server \\\n    vote-app\n</code></pre> <p>\u2705 Open:</p> <pre><code>http://localhost:5000\n</code></pre> <p>Click vote buttons \u2192 Votes increase!</p> <p>\u2705 Votes are now saved \u2192 Redis works!</p> <p>\u2705 Lesson: Networking fixed. Containers communicate successfully.</p>"},{"location":"docker/scenario_03_networking/#step-4-make-it-public","title":"\u2705 STEP 4 \u2014 Make It Public!","text":"<p>Let attendees vote from their laptops!</p>"},{"location":"docker/scenario_03_networking/#option-1-expose-via-ngrok","title":"Option 1 \u2014 Expose Via ngrok","text":"<p>Install ngrok:</p> <pre><code>brew install ngrok/ngrok/ngrok\n</code></pre> <p>Run:</p> <pre><code>ngrok http 5000\n</code></pre> <p>\u2705 Share public URL like:</p> <pre><code>https://glorious-bear-1234.ngrok.io\n</code></pre> <p>\u2705 Audience can vote \u2192 real adrenaline!</p>"},{"location":"docker/scenario_03_networking/#option-2-expose-via-cloudflare-tunnel","title":"Option 2 \u2014 Expose Via Cloudflare Tunnel","text":"<p>Install cloudflared:</p> <pre><code>brew install cloudflared\n</code></pre> <p>Run:</p> <pre><code>cloudflared tunnel --url http://localhost:5000\n</code></pre> <p>\u2705 Get public URL like:</p> <pre><code>https://vote.mydomain.com\n</code></pre> <p>\u2705 Audience votes \u2192 infinite excitement.</p>"},{"location":"docker/scenario_03_networking/#clean-up","title":"\u2705 Clean Up","text":"<pre><code>docker rm -f vote-app redis-server\ndocker network rm vote-net\n</code></pre>"},{"location":"docker/scenario_03_networking/#full-demo-script-shell","title":"\u2705 Full Demo Script (Shell)","text":"<p>scripts/fix_network.sh</p> <pre><code>#!/bin/bash\n\n# Cleanup\ndocker rm -f vote-app redis-server\ndocker network rm vote-net\n\n# Create network\ndocker network create vote-net\n\n# Run redis\ndocker run -d --name redis-server --network vote-net redis:alpine\n\n# Build flask app\ndocker build -t vote-app ./app\n\n# Run flask app\ndocker run -d --name vote-app \\\n    --network vote-net \\\n    -p 5000:5000 \\\n    -e REDIS_HOST=redis-server \\\n    vote-app\n\necho \"Vote app is live at http://localhost:5000\"\n</code></pre>"},{"location":"docker/scenario_04_layers/","title":"\ud83d\ude80 Scenario 04 \u2014 Docker Layer Analyzer Lab","text":""},{"location":"docker/scenario_04_layers/#scenario-goal","title":"\ud83c\udfaf Scenario Goal","text":"<p>Mission: Turn learners from Dockerfile scribblers into Docker surgeons who:</p> <p>\u2705 Understand Docker layers deeply \u2705 Know how layer order affects: - build speed - cache efficiency - image size \u2705 Master multi-stage builds for production-ready images \u2705 Gain instant visual insight into: - Layer commands - Layer sizes - Cache hits/misses \u2705 Learn via a fun, interactive, gamified experience</p>"},{"location":"docker/scenario_04_layers/#high-level-concept","title":"\ud83d\udca1 High-Level Concept","text":"<p>We'll build:</p> <p>\u2705 A universal Docker learning lab utility:</p> <ul> <li>CLI-driven interactive tool</li> <li>Learners select:<ul> <li>Technology (Python, Jenkins, Node.js, etc.)</li> <li>Scenario level (bad, good, best)</li> </ul> </li> <li>Each scenario:<ul> <li>Builds a real Docker image</li> <li>Captures:<ul> <li>build time</li> <li>image size</li> <li>per-layer data</li> </ul> </li> </ul> </li> <li>Automatically launches a local web UI showing:<ul> <li>Layer breakdown tree</li> <li>Per-layer size</li> <li>Build logs</li> <li>Image history visualization</li> </ul> </li> <li>Gamified scoring system:<ul> <li>Learners try to reach best scores:<ul> <li>fastest builds</li> <li>smallest images</li> <li>cleanest Dockerfiles</li> </ul> </li> </ul> </li> </ul>"},{"location":"docker/scenario_04_layers/#features-overview","title":"\u2705 Features Overview","text":"<p>\u2705 5 Technologies: - Python - Jenkins - Node.js - Golang - Nginx</p> <p>\u2705 3 Dockerfile Scenarios for each: - Bad \u2192 naive, large images - Optimized \u2192 layered correctly - Multi-Stage \u2192 minimal production images</p> <p>\u2705 Interactive CLI prompts</p> <p>\u2705 After each build: - Total build time - Total image size - Visual per-layer breakdown:     - layer command     - size     - cache status - Comparison graphs:     - Bad vs Optimized vs Multi-stage</p> <p>\u2705 Real app running: - Web app accessible in browser - Shows app\u2019s output \u2192 visible differences</p> <p>\u2705 Clean-up routines</p>"},{"location":"docker/scenario_04_layers/#folder-structure","title":"\u2705 Folder Structure","text":"<pre><code>\ndocker-layer-lab/\n\u2502\n\u251c\u2500\u2500 dockerfiles/\n\u2502    \u251c\u2500\u2500 python/\n\u2502    \u2502     \u251c\u2500\u2500 bad.Dockerfile\n\u2502    \u2502     \u251c\u2500\u2500 optimized.Dockerfile\n\u2502    \u2502     \u2514\u2500\u2500 multistage.Dockerfile\n\u2502    \u251c\u2500\u2500 jenkins/\n\u2502    \u2502     ...\n\u2502    \u251c\u2500\u2500 nodejs/\n\u2502    \u2502     ...\n\u2502    \u251c\u2500\u2500 golang/\n\u2502    \u2502     ...\n\u2502    \u2514\u2500\u2500 nginx/\n\u2502          ...\n\u2502\n\u251c\u2500\u2500 scripts/\n\u2502     \u2514\u2500\u2500 docker-lab.sh\n\u2502\n\u251c\u2500\u2500 webui/\n\u2502     \u251c\u2500\u2500 app.py\n\u2502     \u251c\u2500\u2500 templates/\n\u2502     \u2502      \u2514\u2500\u2500 results.html\n\u2502     \u2514\u2500\u2500 static/\n\u2502            \u2514\u2500\u2500 js/\n\u2502\n\u2514\u2500\u2500 results/\n\u251c\u2500\u2500 build\\_logs.txt\n\u251c\u2500\u2500 layer\\_data.json\n\u2514\u2500\u2500 summary.txt\n\n````\n\n---\n\n# \u2705 CLI User Journey\n\n---\n\n## Step 1 \u2014 Run Lab\n\n```bash\n./docker-lab.sh\n````\n\n---\n\n## Step 2 \u2014 Choose Technology\n\n</code></pre> <p>Choose a technology:</p> <ol> <li>Python</li> <li>Jenkins</li> <li>Node.js</li> <li>Golang</li> <li>Nginx</li> </ol> <p>Enter choice:</p> <pre><code>\n---\n\n## Step 3 \u2014 Choose Scenario Type\n\n</code></pre> <p>Choose Dockerfile type:</p> <ol> <li>Standard (BAD)</li> <li>Optimized (GOOD)</li> <li>Multi-stage (BEST)</li> </ol> <p>Enter choice:</p> <pre><code>\n---\n\n## Step 4 \u2014 Build Kicks Off\n\n</code></pre>"},{"location":"docker/scenario_04_layers/#building-dockerfile","title":"Building Dockerfile...","text":""},{"location":"docker/scenario_04_layers/#docker-build-logs","title":"[DOCKER BUILD LOGS...]","text":"<p>Total build time: 18.3 seconds Final image size: 348 MB</p> <p>Layers built: - FROM python:3.10     - 125 MB - RUN pip install ...  - 150 MB - COPY app.py ...      - 20 MB - ...</p> <p>[ View in Browser \u2192 http://localhost:5000/results ]</p> <pre><code>\n---\n\n## Step 5 \u2014 Browser UI\n\n---\n\n### Display:\n\n\u2705 Dockerfile content (syntax highlighted)\n\u2705 Layer tree:\n\n</code></pre> <p>FROM python:3.10    \u2192 125 MB   RUN pip install   \u2192 150 MB   COPY app.py       \u2192 20 MB</p> <pre><code>\n\u2705 Click any layer \u2192 popover shows:\n\n* Docker command\n* Size\n* Cache hit/miss info\n\n\u2705 Graphs:\n\n* Build time\n* Image size\n* Bad vs Good vs Best\n\n\u2705 Run app directly from UI:\n\n* Preview e.g. Flask web page\n* Jenkins UI\n* etc.\n\n---\n\n# \u2705 Scenario Examples\n\n---\n\n## Technology: Python\n\n---\n\n### **BAD Dockerfile**\n\n```Dockerfile\nFROM python:3.10\nWORKDIR /app\nCOPY . .\nRUN pip install -r requirements.txt\nCMD [\"python\", \"app.py\"]\n</code></pre> <p>\u2705 Big problems:</p> <ul> <li>No pinning of dependencies</li> <li>COPY . . breaks cache</li> <li>Huge images</li> </ul>"},{"location":"docker/scenario_04_layers/#optimized-dockerfile","title":"Optimized Dockerfile","text":"<pre><code>FROM python:3.10\nWORKDIR /app\nCOPY requirements.txt .\nRUN pip install -r requirements.txt\nCOPY app.py .\nCMD [\"python\", \"app.py\"]\n</code></pre> <p>\u2705 Better:</p> <ul> <li>Cacheable dependency layer</li> <li>Smaller context</li> <li>Faster rebuilds</li> </ul>"},{"location":"docker/scenario_04_layers/#multi-stage-dockerfile","title":"Multi-Stage Dockerfile","text":"<pre><code>FROM python:3.10 as builder\nWORKDIR /app\nCOPY requirements.txt .\nRUN pip install --target=/deps -r requirements.txt\nCOPY app.py .\n\nFROM python:3.10-slim\nWORKDIR /app\nCOPY --from=builder /deps /usr/local/lib/python3.10/site-packages\nCOPY app.py .\nCMD [\"python\", \"app.py\"]\n</code></pre> <p>\u2705 Best:</p> <ul> <li>Small final image</li> <li>Minimal attack surface</li> </ul>"},{"location":"docker/scenario_04_layers/#how-well-implement-it","title":"\u2705 How We'll Implement It","text":""},{"location":"docker/scenario_04_layers/#docker-labsh","title":"docker-lab.sh","text":"<p>\u2705 Prompts user for choices \u2705 Copies correct Dockerfile into temp build context \u2705 Times:</p> <pre><code>time docker build -t my-lab-image -f selected.Dockerfile .\n</code></pre> <p>\u2705 Captures:</p> <pre><code>docker history --no-trunc --format '{{json .}}' my-lab-image\n</code></pre> <p>\u2705 Parses output \u2192 JSON:</p> <pre><code>[\n  {\n    \"ID\": \"...\",\n    \"Size\": \"25.3MB\",\n    \"CreatedBy\": \"RUN pip install ...\",\n    \"Comment\": \"\",\n    ...\n  }\n]\n</code></pre> <p>\u2705 Launches:</p> <pre><code>python3 webui/app.py\n</code></pre>"},{"location":"docker/scenario_04_layers/#web-ui-features","title":"Web UI Features","text":"<p>\u2705 Flask app displays:</p> <ul> <li>Dockerfile text</li> <li>Build logs</li> <li>Total build time</li> <li>Final image size</li> <li>Interactive tree view of layers</li> <li> <p>Graphs:</p> </li> <li> <p>Layer sizes</p> </li> <li>Build times</li> </ul> <p>\u2705 Click layer node \u2192 shows:</p> <ul> <li>Command</li> <li>Size</li> <li>Whether layer was cached</li> </ul> <p>\u2705 Shows app output:</p> <ul> <li>e.g. Flask running</li> <li>or Jenkins UI</li> <li>etc.</li> </ul>"},{"location":"docker/scenario_04_layers/#gamification","title":"\u2705 Gamification","text":"<p>\u2705 Score each build:</p> <ul> <li>Slow builds \u2192 penalty</li> <li>Big images \u2192 penalty</li> <li>Multi-stage \u2192 bonus</li> </ul> <p>\u2705 Display:</p> <pre><code>Your optimization score: 82/100\n</code></pre>"},{"location":"docker/scenario_04_layers/#cleanup","title":"\u2705 Cleanup","text":"<p>After each test:</p> <pre><code>docker rm -f my-lab-image\ndocker rmi my-lab-image\n</code></pre>"},{"location":"docker/scenario_05_escape_room/","title":"\ud83d\ude80 Scenario 05 \u2014 The Docker Escape Room Challenge","text":""},{"location":"docker/scenario_05_escape_room/#scenario-goal","title":"\ud83c\udfaf Scenario Goal","text":"<p>Transform learners from Docker users into Docker HEROES through:</p> <p>\u2705 Real-world puzzles \u2705 Gamification and fun storytelling \u2705 Live problem-solving \u2705 Hands-on Docker commands \u2705 Hilarious and unforgettable learning</p>"},{"location":"docker/scenario_05_escape_room/#the-storyline","title":"\ud83e\udde9 The Storyline","text":"<p>You and your workshop friends have been kidnapped by Dr. NullPointer, the evil villain of the cloud. </p> <p>He\u2019s locked you inside the Docker Vault, a high-security digital prison guarded by containers.</p> <p>To escape, you must:</p> <ul> <li>Solve five Docker puzzles</li> <li>Discover hidden secrets</li> <li>Hack your way through broken networks</li> <li>Outsmart containers with memory issues</li> <li>Master multi-stage builds to save your digital life!</li> </ul> <p>Fail\u2026and you\u2019ll be trapped running endless <code>hello-world</code> containers for eternity.</p>"},{"location":"docker/scenario_05_escape_room/#the-escape-flow","title":"\ud83c\udfc6 The Escape Flow","text":""},{"location":"docker/scenario_05_escape_room/#how-it-works","title":"\u2705 How It Works","text":"<ul> <li>You\u2019ll see a clue in the web browser.</li> <li>You\u2019ll have a live shell to run real Docker commands.</li> <li>Enter your answer in the browser.</li> <li>If correct \u2192 next door unlocks.</li> <li>If wrong \u2192 Dr. NullPointer taunts you mercilessly.</li> </ul>"},{"location":"docker/scenario_05_escape_room/#game-mechanics","title":"\u2705 Game Mechanics","text":"<p>\u2705 Time challenge: Solve all puzzles before Dr. NullPointer triggers a CI/CD pipeline apocalypse. \u2705 Score system: - +10 points for each puzzle - -3 points for failed attempts \u2705 Leaderboards \u2192 bragging rights! \u2705 Funny taunts \u2192 randomized villain insults \u2705 Real consequences: - Containers running - Logs filling up - Resource exhaustion</p>"},{"location":"docker/scenario_05_escape_room/#the-five-docker-puzzles","title":"\ud83d\udd79\ufe0f The Five Docker Puzzles","text":""},{"location":"docker/scenario_05_escape_room/#puzzle-1-the-secret-vault-volumes","title":"\u2b50 Puzzle 1 \u2014 The Secret Vault (Volumes)","text":""},{"location":"docker/scenario_05_escape_room/#dr-nullpointers-message","title":"Dr. NullPointer\u2019s Message:","text":"<p>\u201cMwahaha! I\u2019ve hidden the Escape Key inside a secret volume. It\u2019s buried in: <code>/secret/code.txt</code> Inside a Docker volume called: <code>vault-volume</code> Find it\u2026 or you\u2019ll be stuck in <code>/dev/null</code> forever.\u201d</p>"},{"location":"docker/scenario_05_escape_room/#what-learners-must-do","title":"What Learners Must Do","text":"<p>Run:</p> <pre><code>docker run --rm -v vault-volume:/mnt busybox cat /mnt/secret/code.txt\n````\n\n\u2705 Copy secret code \u2192 paste into web UI\n\n---\n\n### Dr. NullPointer Taunts:\n\n* \u201cThat\u2019s adorable\u2026 you think you can just `docker run` your way out?\u201d\n* \u201cEven my cat knows how to mount a volume.\u201d\n\n---\n\n\u2705 Insight:\n\n&gt; \u201cVolumes persist data across containers. They\u2019re like hidden treasure chests in Docker.\u201d\n\n---\n\n---\n\n## \u2b50 Puzzle 2 \u2014 The Broken Bridge (Networking)\n\n---\n\n### Dr. NullPointer\u2019s Message:\n\n&gt; \u201cYour precious app can\u2019t talk to its database!\n&gt; I\u2019ve trapped them in **different Docker networks.**\n&gt; Fix it\u2026 or your packets will wander the void!\u201d\n\n---\n\n### Scenario:\n\n* Redis running in `networkA`\n* Flask app running in `networkB`\n\n---\n\n### What Learners Must Do\n\nRun:\n\n```bash\ndocker network connect networkA redis-server\n</code></pre> <p>\u2705 Test connectivity:</p> <pre><code>docker run --rm --network networkA redis redis-cli -h redis-server ping\n</code></pre> <p>\u2705 Enter \u201cPONG\u201d into web UI \u2192 unlocks next puzzle</p>"},{"location":"docker/scenario_05_escape_room/#dr-nullpointer-taunts","title":"Dr. NullPointer Taunts:","text":"<ul> <li>\u201cPackets? Lost. Like your hopes.\u201d</li> <li>\u201cNetwork errors are my love language.\u201d</li> </ul> <p>\u2705 Insight:</p> <p>\u201cCustom Docker networks let containers talk to each other. Default bridge networks isolate them unless connected explicitly.\u201d</p>"},{"location":"docker/scenario_05_escape_room/#puzzle-3-the-out-of-memory-monster","title":"\u2b50 Puzzle 3 \u2014 The Out-of-Memory Monster","text":""},{"location":"docker/scenario_05_escape_room/#dr-nullpointers-message_1","title":"Dr. NullPointer\u2019s Message:","text":"<p>\u201cOops\u2026 your container ran out of memory. It keeps crashing with:</p> <p><code>Cannot allocate memory</code></p> <p>Increase its memory limit\u2026 or I\u2019ll throttle you!\u201d</p>"},{"location":"docker/scenario_05_escape_room/#what-learners-must-do_1","title":"What Learners Must Do","text":"<p>Re-run the failing container:</p> <pre><code>docker run -d --memory=512m busybox sh -c \"dd if=/dev/zero of=/dev/null bs=1M\"\n</code></pre> <p>\u2705 Check logs:</p> <pre><code>docker logs &lt;container_id&gt;\n</code></pre> <p>\u2705 Submit confirmation of successful run.</p>"},{"location":"docker/scenario_05_escape_room/#dr-nullpointer-taunts_1","title":"Dr. NullPointer Taunts:","text":"<ul> <li>\u201cMemory? You humans are always running out of it.\u201d</li> <li>\u201cOOM Killer is my best friend.\u201d</li> </ul> <p>\u2705 Insight:</p> <p>\u201cDocker lets you set memory and CPU limits. It\u2019s like giving containers strict lunch money.\u201d</p>"},{"location":"docker/scenario_05_escape_room/#puzzle-4-secrets-in-plain-sight","title":"\u2b50 Puzzle 4 \u2014 Secrets in Plain Sight","text":""},{"location":"docker/scenario_05_escape_room/#dr-nullpointers-message_2","title":"Dr. NullPointer\u2019s Message:","text":"<p>\u201cI\u2019ve hidden my evil flag as an environment variable inside a running container:</p> <p><code>SECRET_FLAG=escape_docker</code></p> <p>Find it\u2026 or your logs will overflow!\u201d</p>"},{"location":"docker/scenario_05_escape_room/#what-learners-must-do_2","title":"What Learners Must Do","text":"<p>Run:</p> <pre><code>docker inspect container123\n</code></pre> <p>\u2705 Locate environment variable:</p> <pre><code>SECRET_FLAG=escape_docker\n</code></pre> <p>\u2705 Submit \u201cescape_docker\u201d in web UI.</p>"},{"location":"docker/scenario_05_escape_room/#dr-nullpointer-taunts_2","title":"Dr. NullPointer Taunts:","text":"<ul> <li>\u201cNice try. I\u2019ve hidden secrets deeper than your debugging skills.\u201d</li> <li>\u201cInspect me all you want. You\u2019ll never escape.\u201d</li> </ul> <p>\u2705 Insight:</p> <p>\u201c<code>docker inspect</code> reveals a container\u2019s secrets: environment variables, mount paths, networks, and more.\u201d</p>"},{"location":"docker/scenario_05_escape_room/#puzzle-5-the-multi-stage-finale","title":"\u2b50 Puzzle 5 \u2014 The Multi-Stage Finale","text":""},{"location":"docker/scenario_05_escape_room/#dr-nullpointers-message_3","title":"Dr. NullPointer\u2019s Message:","text":"<p>\u201cFinal door awaits! Your challenge:</p> <ul> <li>Build the smallest possible Docker image for a Go app.</li> <li>Must be under 20MB.</li> </ul> <p>Fail\u2026 and I\u2019ll flood your CI logs forever!\u201d</p>"},{"location":"docker/scenario_05_escape_room/#what-learners-must-do_3","title":"What Learners Must Do","text":"<p>Craft this Dockerfile:</p> <pre><code>FROM golang:1.20 AS builder\nWORKDIR /app\nCOPY . .\nRUN go build -o myapp .\n\nFROM scratch\nCOPY --from=builder /app/myapp /myapp\nENTRYPOINT [\"/myapp\"]\n</code></pre> <p>\u2705 Build:</p> <pre><code>docker build -t escape-final .\n</code></pre> <p>\u2705 Submit image size via:</p> <pre><code>docker images escape-final\n</code></pre> <p>\u2705 Must be under 20MB \u2192 win the game</p>"},{"location":"docker/scenario_05_escape_room/#dr-nullpointer-taunts_3","title":"Dr. NullPointer Taunts:","text":"<ul> <li>\u201cA big-size image is a slow image.\u201d</li> <li>\u201cMulti-stage builds? Cute. Let\u2019s see if you can actually do it.\u201d</li> </ul> <p>\u2705 Insight:</p> <p>\u201cMulti-stage builds keep images tiny by copying only what you need into a clean runtime image.\u201d</p>"},{"location":"docker/scenario_05_escape_room/#web-ui-design","title":"\ud83d\udcbb Web UI Design","text":""},{"location":"docker/scenario_05_escape_room/#main-game-screen","title":"Main Game Screen","text":"<pre><code>-------------------------------------------\n|    DOCKER ESCAPE ROOM CHALLENGE         |\n-------------------------------------------\n| Puzzle 1 Clue:                          |\n| \"Find the secret code in vault-volume.\" |\n|                                         |\n| [ Enter Your Answer Here ] [ SUBMIT ]   |\n-------------------------------------------\n| Progress: [####------] 2/5              |\n| Score: 20 points                        |\n| Time Left: 6m 45s                       |\n-------------------------------------------\n</code></pre> <p>\u2705 After each puzzle:</p> <ul> <li>Confetti animation</li> <li>Funny villain insults or praises</li> <li>Progress bar fills</li> </ul>"},{"location":"docker/scenario_05_escape_room/#game-over-screen","title":"Game Over Screen","text":"<pre><code>-------------------------------------------\n|      YOU ESCAPED THE DOCKER VAULT!      |\n|                                         |\n|   Your Final Score: 47/50               |\n|   Time Taken: 8m 23s                    |\n|                                         |\n| \"Congratulations. You are now a true    |\n|  Docker Grandmaster.\"                   |\n|                                         |\n| [ View Leaderboard ] [ Play Again ]     |\n-------------------------------------------\n</code></pre>"},{"location":"docker/scenario_05_escape_room/#random-dr-nullpointer-quotes","title":"\ud83d\udd25 Random Dr. NullPointer Quotes","text":"<p>\u2705 Keep things funny and unforgettable:</p> <ul> <li>\u201c<code>docker run</code>? More like <code>docker ruin</code>.\u201d</li> <li>\u201cVolumes\u2026 they\u2019re the dark matter of containers.\u201d</li> <li>\u201cI hope you like inspecting things. Because you\u2019re going to be stuck inspecting this vault forever.\u201d</li> </ul>"},{"location":"docker/scenario_05_escape_room/#benefits-for-learners","title":"\u2705 Benefits for Learners","text":"<p>\u2705 Master:</p> <ul> <li>volumes</li> <li>networking</li> <li>secrets</li> <li>resource limits</li> <li>multi-stage builds</li> </ul> <p>\u2705 Get real hands-on practice \u2705 Experience Docker like a puzzle-adventure \u2705 Walk away with:</p> <p>\u201cI know how to troubleshoot and solve Docker problems in real life.\u201d</p> <p>\u2705 Adrenaline. Laughter. Lifetime memory.</p>"},{"location":"docker/scenario_05_escape_room/#implementation-blueprint","title":"\u2705 Implementation Blueprint","text":""},{"location":"docker/scenario_05_escape_room/#folder-structure","title":"Folder Structure","text":"<pre><code>scenario_05_escape_room/\n\u2502\n\u251c\u2500\u2500 webui/\n\u2502     \u251c\u2500\u2500 app.py\n\u2502     \u251c\u2500\u2500 templates/\n\u2502     \u2502      \u2514\u2500\u2500 escape.html\n\u2502     \u2514\u2500\u2500 static/\n\u2502            \u2514\u2500\u2500 js/\n\u2502\n\u251c\u2500\u2500 puzzles/\n\u2502     \u251c\u2500\u2500 puzzle1_volume.sh\n\u2502     \u251c\u2500\u2500 puzzle2_network.sh\n\u2502     \u251c\u2500\u2500 puzzle3_memory.sh\n\u2502     \u251c\u2500\u2500 puzzle4_inspect.sh\n\u2502     \u2514\u2500\u2500 puzzle5_multistage/\n\u2502            \u251c\u2500\u2500 Dockerfile\n\u2502            \u251c\u2500\u2500 main.go\n\u2502\n\u2514\u2500\u2500 docker-compose.yml\n</code></pre>"},{"location":"docker/scenario_05_escape_room/#puzzle-shell-scripts","title":"Puzzle Shell Scripts","text":"<p>Each script:</p> <ul> <li>Sets up puzzle</li> <li>Prints puzzle clue</li> <li>Prepares containers</li> </ul> <p>Example puzzle1_volume.sh:</p> <pre><code>#!/bin/bash\ndocker volume create vault-volume\ndocker run --rm -v vault-volume:/mnt busybox sh -c \"echo 'escape123' &gt; /mnt/secret/code.txt\"\n</code></pre>"},{"location":"docker/scenario_05_escape_room/#web-ui","title":"Web UI","text":"<ul> <li>Flask-based</li> <li>Renders puzzle clues</li> <li>Accepts answer submissions</li> <li> <p>Tracks:</p> </li> <li> <p>progress</p> </li> <li>score</li> <li>time left</li> <li>Randomly selects villain taunts</li> </ul>"},{"location":"docker/scenario_05_escape_room/#cleanup-script","title":"Cleanup Script","text":"<pre><code>docker volume rm vault-volume\ndocker network rm networkA networkB\ndocker rm -f container123 app db\ndocker rmi escape-final\n</code></pre>"},{"location":"jenkins/scenario_01_docker_build/","title":"\ud83d\udc33 Scenario 01: Docker Build Chaos","text":""},{"location":"jenkins/scenario_01_docker_build/#overview","title":"Overview","text":"<p>This scenario teaches you how to build, tag, and run Python Docker images in Jenkins, simulating real-world CI/CD challenges and sabotage.</p>"},{"location":"jenkins/scenario_01_docker_build/#directory-structure","title":"\ud83d\udcc1 Directory Structure","text":"<pre><code>Jenkins/jenkins_scenarios/scenario_01_docker_build/\n\u251c\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 Jenkinsfile\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 requirements.txt\n</code></pre>"},{"location":"jenkins/scenario_01_docker_build/#how-to-set-up-the-pipeline-in-jenkins-ui","title":"\u2705 How to Set Up the Pipeline in Jenkins UI","text":"<ol> <li>Open Jenkins in your browser (usually at http://localhost:8080).</li> <li>Click \"New Item\".</li> <li>Enter a name (e.g., <code>scenario_01_docker_build</code>), select Pipeline, and click OK.</li> <li>In the pipeline config:</li> <li>Under Pipeline script, select Pipeline script from SCM.</li> <li>Set SCM to Git and enter your repository URL.</li> <li>Set Script Path to <code>Jenkins/jenkins_scenarios/scenario_01_docker_build/Jenkinsfile</code>.</li> <li>Click Save.</li> </ol>"},{"location":"jenkins/scenario_01_docker_build/#how-to-run-the-pipeline","title":"\u2705 How to Run the Pipeline","text":"<ol> <li>Click \"Build with Parameters\".</li> <li>Set the <code>APP_VERSION</code> parameter (1\u20135) to choose which app version to build.</li> <li>Click Build.</li> <li>Watch the console output for build, run, and test steps.</li> <li>Check for success or failure messages.</li> </ol>"},{"location":"jenkins/scenario_01_docker_build/#what-the-pipeline-does","title":"\u2705 What the Pipeline Does","text":"<ul> <li>Cleans up any containers running on port 3000</li> <li>Builds the Docker image for the selected app version</li> <li>Runs the container and exposes port 3000</li> <li>Tests the HTTP response from the app</li> <li>Cleans up the container after the test</li> </ul>"},{"location":"jenkins/scenario_01_docker_build/#chaos-testing-scenarios","title":"\ud83e\uddea Chaos Testing Scenarios","text":""},{"location":"jenkins/scenario_01_docker_build/#scenario-1-docker-build-failures","title":"\u2705 Scenario 1: Docker Build Failures","text":"<pre><code>// Simulate Docker build failures\nstage('Build Docker Image') {\n    steps {\n        script {\n            // Randomly fail builds to test resilience\n            if (Math.random() &lt; 0.1) {\n                error \"Simulated Docker build failure\"\n            }\n\n            sh \"docker build -t chaos-app:${APP_VERSION} .\"\n        }\n    }\n}\n</code></pre>"},{"location":"jenkins/scenario_01_docker_build/#scenario-2-container-startup-delays","title":"\u2705 Scenario 2: Container Startup Delays","text":"<pre><code>// Simulate slow container startup\nstage('Run Container') {\n    steps {\n        script {\n            sh \"docker run -d -p 3000:3000 --name chaos-app chaos-app:${APP_VERSION}\"\n\n            // Add artificial delay\n            sleep 10\n\n            // Test if app responds\n            sh \"curl -f http://localhost:3000/health || exit 1\"\n        }\n    }\n}\n</code></pre>"},{"location":"jenkins/scenario_01_docker_build/#troubleshooting","title":"\u2705 Troubleshooting","text":"<ul> <li>Docker build fails:</li> <li>Ensure Docker is running and the Docker socket is mounted in Jenkins.</li> <li>Check for typos in the <code>APP_VERSION</code> parameter.</li> <li>App does not respond:</li> <li>Check the container logs in Jenkins output.</li> <li>Make sure the app version exists in the repo.</li> <li>Permission errors:</li> <li>Make sure Jenkins has permission to run Docker commands (mount <code>/var/run/docker.sock</code>).</li> </ul>"},{"location":"jenkins/scenario_01_docker_build/#useful-commands","title":"\u2705 Useful Commands","text":"<ul> <li>See running containers:   <code>bash   docker ps</code></li> <li>Check logs for a container:   <code>bash   docker logs &lt;container_id&gt;</code></li> <li>Remove a container:   <code>bash   docker rm -f &lt;container_id&gt;</code></li> </ul>"},{"location":"jenkins/scenario_01_docker_build/#monitoring-reporting","title":"\ud83d\udcca Monitoring &amp; Reporting","text":""},{"location":"jenkins/scenario_01_docker_build/#pipeline-metrics","title":"\u2705 Pipeline Metrics","text":"<ul> <li>Build success rate</li> <li>Average build time</li> <li>Docker image size trends</li> <li>Container startup time</li> </ul>"},{"location":"jenkins/scenario_01_docker_build/#chaos-metrics","title":"\u2705 Chaos Metrics","text":"<ul> <li>Number of simulated failures</li> <li>Recovery time from failures</li> <li>System resilience score</li> </ul> <p>Next: Scenario 02: Testcontainers | Scenario 03: HTML Reports | Scenario 04: Manage Secrets | Scenario 05: Deploy to EKS</p> <p>This scenario helps you master Docker builds in Jenkins and prepares you for more advanced CI/CD chaos! \ud83d\udd25 </p>"},{"location":"jenkins/scenario_02_testcontainers/","title":"\ud83e\uddea Scenario 02: Testcontainers Chaos","text":""},{"location":"jenkins/scenario_02_testcontainers/#overview","title":"Overview","text":"<p>This scenario demonstrates how to use Testcontainers in Jenkins to run real database integration tests in isolated Docker containers.</p>"},{"location":"jenkins/scenario_02_testcontainers/#directory-structure","title":"\ud83d\udcc1 Directory Structure","text":"<pre><code>Jenkins/jenkins_scenarios/scenario_02_testcontainers/\n\u251c\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 Jenkinsfile\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 requirements.txt\n\u2514\u2500\u2500 tests/\n    \u251c\u2500\u2500 test_postgres_pass.py\n    \u251c\u2500\u2500 test_postgres_fail.py\n    \u251c\u2500\u2500 test_redis_pass.py\n    \u2514\u2500\u2500 test_redis_fail.py\n</code></pre>"},{"location":"jenkins/scenario_02_testcontainers/#how-to-set-up-the-pipeline-in-jenkins-ui","title":"\u2705 How to Set Up the Pipeline in Jenkins UI","text":"<ol> <li>Open Jenkins in your browser.</li> <li>Click \"New Item\".</li> <li>Enter a name (e.g., <code>scenario_02_testcontainers</code>), select Pipeline, and click OK.</li> <li>In the pipeline config:</li> <li>Under Pipeline script, select Pipeline script from SCM.</li> <li>Set SCM to Git and enter your repository URL.</li> <li>Set Script Path to <code>Jenkins/jenkins_scenarios/scenario_02_testcontainers/Jenkinsfile</code>.</li> <li>Click Save.</li> </ol>"},{"location":"jenkins/scenario_02_testcontainers/#how-to-run-the-pipeline","title":"\u2705 How to Run the Pipeline","text":"<ol> <li>Click \"Build with Parameters\".</li> <li>Set the <code>TEST_MODE</code> parameter to <code>pass</code> (for passing tests) or <code>fail</code> (for chaos/failing tests).</li> <li>Click Build.</li> <li>Watch the console output for test execution and results.</li> <li>Check for success or failure messages.</li> </ol>"},{"location":"jenkins/scenario_02_testcontainers/#what-the-pipeline-does","title":"\u2705 What the Pipeline Does","text":"<ul> <li>Builds a Docker image with all dependencies</li> <li>Runs Testcontainers-based integration tests for Postgres and Redis</li> <li>Supports both passing and intentionally failing test modes</li> <li>Cleans up containers after tests</li> </ul>"},{"location":"jenkins/scenario_02_testcontainers/#chaos-testing-scenarios","title":"\ud83e\uddea Chaos Testing Scenarios","text":""},{"location":"jenkins/scenario_02_testcontainers/#scenario-1-database-connection-failures","title":"\u2705 Scenario 1: Database Connection Failures","text":"<pre><code>def test_postgres_connection_failure():\n    \"\"\"Simulate PostgreSQL connection failures in CI/CD\"\"\"\n    with PostgresContainer(\"postgres:15\") as postgres:\n        # Simulate network partition\n        postgres.get_docker_client().pause(postgres.get_container_id())\n\n        # Verify our app handles the failure gracefully\n        with pytest.raises(ConnectionError):\n            create_connection(postgres.get_connection_url())\n</code></pre>"},{"location":"jenkins/scenario_02_testcontainers/#scenario-2-slow-database-queries","title":"\u2705 Scenario 2: Slow Database Queries","text":"<pre><code>def test_redis_slow_operations():\n    \"\"\"Simulate slow Redis operations in CI/CD\"\"\"\n    with RedisContainer(\"redis:7-alpine\") as redis:\n        client = redis.get_client()\n\n        # Simulate slow operation\n        import time\n        start_time = time.time()\n\n        # Perform operation\n        client.set(\"test\", \"value\")\n        client.get(\"test\")\n\n        # Verify it completes within reasonable time\n        assert time.time() - start_time &lt; 5.0\n</code></pre>"},{"location":"jenkins/scenario_02_testcontainers/#scenario-3-resource-constraints","title":"\u2705 Scenario 3: Resource Constraints","text":"<pre><code>def test_memory_constrained_database():\n    \"\"\"Test database behavior under memory constraints\"\"\"\n    with PostgresContainer(\"postgres:15\") as postgres:\n        # Set memory limit\n        postgres.with_memory_limit(\"50m\")\n\n        conn = create_connection(postgres.get_connection_url())\n\n        # Try to insert large dataset\n        try:\n            for i in range(1000):\n                conn.execute(text(f\"INSERT INTO test_table VALUES ({i}, 'data');\"))\n        except Exception as e:\n            # Handle memory constraint gracefully\n            assert \"memory\" in str(e).lower() or \"resource\" in str(e).lower()\n</code></pre>"},{"location":"jenkins/scenario_02_testcontainers/#troubleshooting","title":"\u2705 Troubleshooting","text":"<ul> <li>Tests fail to start:</li> <li>Ensure Docker is running and accessible from Jenkins.</li> <li>Check that the Docker socket is mounted in Jenkins.</li> <li>Database containers not starting:</li> <li>Check for port conflicts or resource limits on the Jenkins agent.</li> <li>Permission errors:</li> <li>Make sure Jenkins has permission to run Docker commands.</li> <li>Test mode confusion:</li> <li>Double-check the <code>TEST_MODE</code> parameter value (<code>pass</code> or <code>fail</code>).</li> </ul>"},{"location":"jenkins/scenario_02_testcontainers/#useful-commands","title":"\u2705 Useful Commands","text":"<ul> <li>See running containers:   <code>bash   docker ps</code></li> <li>Check logs for a container:   <code>bash   docker logs &lt;container_id&gt;</code></li> <li>Remove a container:   <code>bash   docker rm -f &lt;container_id&gt;</code></li> </ul>"},{"location":"jenkins/scenario_02_testcontainers/#monitoring-reporting","title":"\ud83d\udcca Monitoring &amp; Reporting","text":""},{"location":"jenkins/scenario_02_testcontainers/#test-metrics","title":"\u2705 Test Metrics","text":"<ul> <li>Test execution time</li> <li>Container startup time</li> <li>Database connection success rate</li> <li>Test pass/fail ratio</li> </ul>"},{"location":"jenkins/scenario_02_testcontainers/#chaos-metrics","title":"\u2705 Chaos Metrics","text":"<ul> <li>Number of simulated failures</li> <li>Recovery time from database failures</li> <li>System resilience under stress</li> </ul> <p>Next: Scenario 01: Docker Build | Scenario 03: HTML Reports | Scenario 04: Manage Secrets | Scenario 05: Deploy to EKS</p> <p>This scenario helps you master integration testing with real services in Jenkins using Testcontainers! \ud83d\udd25 </p>"},{"location":"jenkins/scenario_03_html_reports/","title":"\ud83d\udcca Scenario 03: HTML Reports Chaos","text":""},{"location":"jenkins/scenario_03_html_reports/#overview","title":"Overview","text":"<p>This scenario teaches you how to generate, archive, and view beautiful HTML test reports in Jenkins, making your CI/CD results visually clear and enterprise-ready.</p>"},{"location":"jenkins/scenario_03_html_reports/#directory-structure","title":"\ud83d\udcc1 Directory Structure","text":"<pre><code>Jenkins/jenkins_scenarios/scenario_03_html_reports/\n\u251c\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 Jenkinsfile\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 report_generator.py\n\u251c\u2500\u2500 requirements.txt\n\u2514\u2500\u2500 tests/\n    \u251c\u2500\u2500 test_config_validation_pass.py\n    \u251c\u2500\u2500 test_config_validation_fail.py\n    \u251c\u2500\u2500 test_api_health_pass.py\n    \u251c\u2500\u2500 test_api_health_fail.py\n    \u251c\u2500\u2500 test_postgres_pass.py\n    \u251c\u2500\u2500 test_postgres_fail.py\n    \u251c\u2500\u2500 test_redis_pass.py\n    \u251c\u2500\u2500 test_redis_fail.py\n    \u251c\u2500\u2500 test_secret_scan_pass.py\n    \u2514\u2500\u2500 test_secret_scan_fail.py\n</code></pre>"},{"location":"jenkins/scenario_03_html_reports/#how-to-set-up-the-pipeline-in-jenkins-ui","title":"\u2705 How to Set Up the Pipeline in Jenkins UI","text":"<ol> <li>Open Jenkins in your browser.</li> <li>Click \"New Item\".</li> <li>Enter a name (e.g., <code>scenario_03_html_reports</code>), select Pipeline, and click OK.</li> <li>In the pipeline config:</li> <li>Under Pipeline script, select Pipeline script from SCM.</li> <li>Set SCM to Git and enter your repository URL.</li> <li>Set Script Path to <code>Jenkins/jenkins_scenarios/scenario_03_html_reports/Jenkinsfile</code>.</li> <li>Click Save.</li> </ol>"},{"location":"jenkins/scenario_03_html_reports/#how-to-run-the-pipeline","title":"\u2705 How to Run the Pipeline","text":"<ol> <li>Click \"Build with Parameters\" (if parameters are defined).</li> <li>Click Build.</li> <li>Watch the console output for test execution and report generation.</li> <li>Download/view HTML reports from Jenkins artifacts after the build completes.</li> </ol>"},{"location":"jenkins/scenario_03_html_reports/#what-the-pipeline-does","title":"\u2705 What the Pipeline Does","text":"<ul> <li>Builds a Docker image with all dependencies</li> <li>Runs a suite of Python tests (config validation, API health, DB, Redis, secrets)</li> <li>Generates HTML and JSON reports for each test</li> <li>Archives reports as Jenkins build artifacts</li> </ul>"},{"location":"jenkins/scenario_03_html_reports/#chaos-testing-scenarios","title":"\ud83e\uddea Chaos Testing Scenarios","text":""},{"location":"jenkins/scenario_03_html_reports/#scenario-1-report-generation-failures","title":"\u2705 Scenario 1: Report Generation Failures","text":"<pre><code>def test_report_generation_failure():\n    \"\"\"Simulate HTML report generation failures\"\"\"\n    try:\n        # Simulate disk space issues\n        if os.path.exists(\"/tmp/disk_full\"):\n            raise OSError(\"No space left on device\")\n\n        # Generate report\n        generate_html_report(test_results)\n\n    except Exception as e:\n        # Fallback to simple text report\n        generate_text_report(test_results)\n        assert \"text\" in str(e).lower() or \"space\" in str(e).lower()\n</code></pre>"},{"location":"jenkins/scenario_03_html_reports/#scenario-2-slow-report-generation","title":"\u2705 Scenario 2: Slow Report Generation","text":"<pre><code>def test_slow_report_generation():\n    \"\"\"Test report generation under load\"\"\"\n    import time\n    start_time = time.time()\n\n    # Generate large report\n    large_dataset = [{\"test\": f\"test_{i}\", \"result\": \"pass\"} for i in range(10000)]\n    generate_html_report(large_dataset)\n\n    # Verify it completes within reasonable time\n    assert time.time() - start_time &lt; 30.0\n</code></pre>"},{"location":"jenkins/scenario_03_html_reports/#scenario-3-corrupted-report-data","title":"\u2705 Scenario 3: Corrupted Report Data","text":"<pre><code>def test_corrupted_report_data():\n    \"\"\"Test handling of corrupted test data\"\"\"\n    corrupted_data = [\n        {\"test\": \"valid_test\", \"result\": \"pass\"},\n        {\"test\": \"corrupted_test\", \"result\": None},  # Corrupted\n        {\"test\": \"another_test\", \"result\": \"fail\"}\n    ]\n\n    # Should handle corrupted data gracefully\n    report = generate_html_report(corrupted_data)\n    assert \"corrupted_test\" in report\n    assert \"error\" in report.lower()\n</code></pre>"},{"location":"jenkins/scenario_03_html_reports/#troubleshooting","title":"\u2705 Troubleshooting","text":"<ul> <li>Reports not found:</li> <li>Check the archive path in the Jenkinsfile matches the reports output directory.</li> <li>Ensure the tests generate reports in the expected location.</li> <li>Build fails:</li> <li>Check for missing dependencies in <code>requirements.txt</code>.</li> <li>Review the Docker build logs for errors.</li> <li>HTML not rendering:</li> <li>Download the HTML report and open it in your browser.</li> </ul>"},{"location":"jenkins/scenario_03_html_reports/#useful-commands","title":"\u2705 Useful Commands","text":"<ul> <li>See running containers:   <code>bash   docker ps</code></li> <li>Check logs for a container:   <code>bash   docker logs &lt;container_id&gt;</code></li> <li>Remove a container:   <code>bash   docker rm -f &lt;container_id&gt;</code></li> </ul>"},{"location":"jenkins/scenario_03_html_reports/#monitoring-reporting","title":"\ud83d\udcca Monitoring &amp; Reporting","text":""},{"location":"jenkins/scenario_03_html_reports/#report-metrics","title":"\u2705 Report Metrics","text":"<ul> <li>Report generation time</li> <li>Report file size</li> <li>Number of tests reported</li> <li>Report accessibility score</li> </ul>"},{"location":"jenkins/scenario_03_html_reports/#chaos-metrics","title":"\u2705 Chaos Metrics","text":"<ul> <li>Report generation failure rate</li> <li>Recovery time from report failures</li> <li>Data corruption detection rate</li> </ul> <p>Next: Scenario 01: Docker Build | Scenario 02: Testcontainers | Scenario 04: Manage Secrets | Scenario 05: Deploy to EKS</p> <p>This scenario helps you master enterprise-grade reporting in Jenkins, making your CI/CD results clear and actionable! \ud83d\udd25 </p>"},{"location":"jenkins/scenario_04_manage_secrets/","title":"\ud83d\udd10 Scenario 04: Manage Secrets","text":""},{"location":"jenkins/scenario_04_manage_secrets/#overview","title":"Overview","text":"<p>This scenario teaches you how to detect, scan, and report on secret leaks in your codebase using Gitleaks, all integrated into a Jenkins pipeline. You'll learn to handle both clean and intentionally leaky code, and generate beautiful HTML/JSON reports.</p>"},{"location":"jenkins/scenario_04_manage_secrets/#directory-structure","title":"\ud83d\udcc1 Directory Structure","text":"<pre><code>Jenkins/jenkins_scenarios/scenario_04_manage_secrets/\n\u251c\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 Jenkinsfile\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 requirements.txt\n\u251c\u2500\u2500 report_templates/\n\u251c\u2500\u2500 tests/\n\u2502   \u251c\u2500\u2500 run_tests.py\n\u2502   \u251c\u2500\u2500 test_secret_scan_pass.py\n\u2502   \u2514\u2500\u2500 test_secret_scan_fail.py\n</code></pre>"},{"location":"jenkins/scenario_04_manage_secrets/#how-to-set-up-the-pipeline-in-jenkins-ui","title":"\u2705 How to Set Up the Pipeline in Jenkins UI","text":"<ol> <li>Open Jenkins in your browser.</li> <li>Click \"New Item\".</li> <li>Enter a name (e.g., <code>scenario_04_manage_secrets</code>), select Pipeline, and click OK.</li> <li>In the pipeline config:</li> <li>Under Pipeline script, select Pipeline script from SCM.</li> <li>Set SCM to Git and enter your repository URL.</li> <li>Set Script Path to <code>Jenkins/jenkins_scenarios/scenario_04_manage_secrets/Jenkinsfile</code>.</li> <li>Click Save.</li> </ol>"},{"location":"jenkins/scenario_04_manage_secrets/#how-to-run-the-pipeline","title":"\u2705 How to Run the Pipeline","text":"<ol> <li>Click \"Build with Parameters\".</li> <li>Set the <code>RUN_SCENARIO_4</code> parameter to enable/disable the scenario.</li> <li>Set the <code>SCENARIO_4_PASS</code> parameter to <code>true</code> (clean scan) or <code>false</code> (leaky scan).</li> <li>Click Build.</li> <li>Download/view HTML and JSON reports from Jenkins artifacts after the build completes.</li> </ol>"},{"location":"jenkins/scenario_04_manage_secrets/#what-the-pipeline-does","title":"\u2705 What the Pipeline Does","text":"<ul> <li>Builds a Docker image with Gitleaks and all dependencies</li> <li>Runs secret scan tests in PASS (clean) or FAIL (leaky) mode</li> <li>Generates HTML and JSON reports for each scan</li> <li>Archives reports as Jenkins build artifacts</li> </ul>"},{"location":"jenkins/scenario_04_manage_secrets/#chaos-testing-scenarios","title":"\ud83e\uddea Chaos Testing Scenarios","text":""},{"location":"jenkins/scenario_04_manage_secrets/#scenario-1-secret-detection-failures","title":"\u2705 Scenario 1: Secret Detection Failures","text":"<pre><code>def test_secret_detection_failure():\n    \"\"\"Simulate secret detection tool failures\"\"\"\n    try:\n        # Simulate Gitleaks failure\n        if os.path.exists(\"/tmp/gitleaks_failure\"):\n            raise Exception(\"Gitleaks process killed\")\n\n        # Run secret scan\n        results = run_gitleaks_scan()\n\n    except Exception as e:\n        # Fallback to manual scan\n        results = run_manual_secret_scan()\n        assert \"manual\" in str(e).lower() or \"fallback\" in str(e).lower()\n</code></pre>"},{"location":"jenkins/scenario_04_manage_secrets/#scenario-2-false-positive-detection","title":"\u2705 Scenario 2: False Positive Detection","text":"<pre><code>def test_false_positive_handling():\n    \"\"\"Test handling of false positive secret detections\"\"\"\n    # Simulate false positive\n    false_positive_secret = \"AKIAIOSFODNN7EXAMPLE\"  # Fake AWS key\n\n    # Should be detected but marked as false positive\n    results = scan_for_secrets([false_positive_secret])\n\n    assert len(results) &gt; 0\n    assert results[0][\"confidence\"] == \"low\"\n    assert results[0][\"status\"] == \"false_positive\"\n</code></pre>"},{"location":"jenkins/scenario_04_manage_secrets/#scenario-3-secret-rotation-simulation","title":"\u2705 Scenario 3: Secret Rotation Simulation","text":"<pre><code>def test_secret_rotation():\n    \"\"\"Test secret rotation in CI/CD pipeline\"\"\"\n    old_secret = \"old_api_key_12345\"\n    new_secret = \"new_api_key_67890\"\n\n    # Simulate secret rotation\n    rotate_secret(old_secret, new_secret)\n\n    # Verify old secret is invalidated\n    assert not is_secret_valid(old_secret)\n    assert is_secret_valid(new_secret)\n</code></pre>"},{"location":"jenkins/scenario_04_manage_secrets/#troubleshooting","title":"\u2705 Troubleshooting","text":"<ul> <li>Gitleaks not found:</li> <li>Ensure the Dockerfile installs Gitleaks correctly (check build logs).</li> <li>No reports generated:</li> <li>Check the test output and ensure reports are written to the <code>reports/</code> directory.</li> <li>Build fails:</li> <li>Check for missing dependencies in <code>requirements.txt</code>.</li> <li>Review the Docker build logs for errors.</li> <li>HTML not rendering:</li> <li>Download the HTML report and open it in your browser.</li> </ul>"},{"location":"jenkins/scenario_04_manage_secrets/#useful-commands","title":"\u2705 Useful Commands","text":"<ul> <li>See running containers:   <code>bash   docker ps</code></li> <li>Check logs for a container:   <code>bash   docker logs &lt;container_id&gt;</code></li> <li>Remove a container:   <code>bash   docker rm -f &lt;container_id&gt;</code></li> </ul>"},{"location":"jenkins/scenario_04_manage_secrets/#monitoring-reporting","title":"\ud83d\udcca Monitoring &amp; Reporting","text":""},{"location":"jenkins/scenario_04_manage_secrets/#security-metrics","title":"\u2705 Security Metrics","text":"<ul> <li>Number of secrets detected</li> <li>False positive rate</li> <li>Secret rotation frequency</li> <li>Compliance score</li> </ul>"},{"location":"jenkins/scenario_04_manage_secrets/#chaos-metrics","title":"\u2705 Chaos Metrics","text":"<ul> <li>Secret detection failure rate</li> <li>Recovery time from security failures</li> <li>False positive handling accuracy</li> </ul> <p>Next: Scenario 01: Docker Build | Scenario 02: Testcontainers | Scenario 03: HTML Reports | Scenario 05: Deploy to EKS</p> <p>This scenario helps you master secret management and reporting in Jenkins, making your pipelines secure and audit-ready! \ud83d\udd25 </p>"},{"location":"jenkins/scenario_05_deploy_eks/","title":"\u2638\ufe0f Scenario 05: Deploy to AWS EKS","text":""},{"location":"jenkins/scenario_05_deploy_eks/#overview","title":"Overview","text":"<p>This scenario teaches you how to deploy applications to AWS EKS using Jenkins, including both successful and intentionally failing deployments. You'll learn to validate manifests, monitor rollouts, and troubleshoot Kubernetes chaos.</p>"},{"location":"jenkins/scenario_05_deploy_eks/#directory-structure","title":"\ud83d\udcc1 Directory Structure","text":"<pre><code>Jenkins/jenkins_scenarios/scenario_05_deploy_eks/\n\u251c\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 Jenkinsfile\n\u251c\u2500\u2500 JenkinsfileAuth\n\u251c\u2500\u2500 Jenkins-Setup.md\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 requirements.txt\n\u2514\u2500\u2500 tests/\n    \u2514\u2500\u2500 deploy/\n        \u251c\u2500\u2500 deployment-pass.yaml\n        \u251c\u2500\u2500 deployment-fail.yaml\n        \u251c\u2500\u2500 service.yaml\n        \u2514\u2500\u2500 configmap.yaml\n</code></pre>"},{"location":"jenkins/scenario_05_deploy_eks/#how-to-set-up-the-pipeline-in-jenkins-ui","title":"\u2705 How to Set Up the Pipeline in Jenkins UI","text":"<ol> <li>Open Jenkins in your browser.</li> <li>Click \"New Item\".</li> <li>Enter a name (e.g., <code>scenario_05_deploy_eks</code>), select Pipeline, and click OK.</li> <li>In the pipeline config:</li> <li>Under Pipeline script, select Pipeline script from SCM.</li> <li>Set SCM to Git and enter your repository URL.</li> <li>Set Script Path to <code>Jenkins/jenkins_scenarios/scenario_05_deploy_eks/Jenkinsfile</code>.</li> <li>Click Save.</li> </ol>"},{"location":"jenkins/scenario_05_deploy_eks/#how-to-run-the-pipeline","title":"\u2705 How to Run the Pipeline","text":"<ol> <li>Click \"Build with Parameters\".</li> <li>Set the following parameters as needed:</li> <li><code>RUN_SCENARIO_5</code>: Enable/disable scenario</li> <li><code>SCENARIO_5_PASS</code>: Run successful deployment test</li> <li><code>SCENARIO_5_FAIL</code>: Run failure simulation test</li> <li><code>CLUSTER_NAME</code>: EKS cluster name</li> <li><code>AWS_REGION</code>: AWS region</li> <li><code>CLEANUP_AFTER_TESTS</code>: Clean up resources after tests</li> <li>Click Build.</li> <li>Watch the console output for deployment, monitoring, and results.</li> <li>Download/view reports from Jenkins artifacts after the build completes.</li> </ol>"},{"location":"jenkins/scenario_05_deploy_eks/#what-the-pipeline-does","title":"\u2705 What the Pipeline Does","text":"<ul> <li>Builds a Docker image with all dependencies</li> <li>Sets up AWS and Kubernetes access</li> <li>Validates Kubernetes manifests</li> <li>Deploys to EKS (both PASS and FAIL scenarios)</li> <li>Monitors rollout and pod status</li> <li>Optionally cleans up resources after tests</li> <li>Archives reports as Jenkins build artifacts</li> </ul>"},{"location":"jenkins/scenario_05_deploy_eks/#chaos-testing-scenarios","title":"\ud83e\uddea Chaos Testing Scenarios","text":""},{"location":"jenkins/scenario_05_deploy_eks/#scenario-1-deployment-failures","title":"\u2705 Scenario 1: Deployment Failures","text":"<pre><code># deployment-fail.yaml - Intentionally broken deployment\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: chaos-app-fail\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: chaos-app\n  template:\n    metadata:\n      labels:\n        app: chaos-app\n    spec:\n      containers:\n      - name: chaos-app\n        image: chaos-app:latest\n        resources:\n          requests:\n            memory: \"1Gi\"  # Too much memory request\n            cpu: \"1000m\"   # Too much CPU request\n        ports:\n        - containerPort: 3000\n</code></pre>"},{"location":"jenkins/scenario_05_deploy_eks/#scenario-2-pod-eviction-simulation","title":"\u2705 Scenario 2: Pod Eviction Simulation","text":"<pre><code>def test_pod_eviction():\n    \"\"\"Simulate pod eviction in EKS\"\"\"\n    # Deploy application\n    kubectl_apply(\"deployment-pass.yaml\")\n\n    # Simulate node pressure\n    kubectl_drain_node(\"node-1\", \"--force\", \"--ignore-daemonsets\")\n\n    # Verify pods reschedule\n    pods = kubectl_get_pods(\"--field-selector=spec.nodeName=node-1\")\n    assert len(pods) == 0\n</code></pre>"},{"location":"jenkins/scenario_05_deploy_eks/#scenario-3-service-discovery-failures","title":"\u2705 Scenario 3: Service Discovery Failures","text":"<pre><code>def test_service_discovery_failure():\n    \"\"\"Test service discovery under chaos\"\"\"\n    # Deploy service\n    kubectl_apply(\"service.yaml\")\n\n    # Simulate DNS failure\n    kubectl_patch_service(\"chaos-app-service\", \n                         '{\"spec\":{\"clusterIP\":\"10.0.0.999\"}}')\n\n    # Verify service is unreachable\n    with pytest.raises(Exception):\n        kubectl_exec(\"chaos-app-pod\", \"curl\", \"chaos-app-service:3000\")\n</code></pre>"},{"location":"jenkins/scenario_05_deploy_eks/#troubleshooting","title":"\u2705 Troubleshooting","text":"<ul> <li>Cannot connect to EKS:</li> <li>Check kubeconfig and AWS credentials.</li> <li>Ensure your cluster is running and accessible.</li> <li>YAML validation fails:</li> <li>Check for syntax errors in your manifest files in <code>tests/deploy/</code>.</li> <li>Pods stuck or failing:</li> <li>Use Jenkins logs to inspect rollout status and pod events.</li> <li>Build fails:</li> <li>Check for missing dependencies in <code>requirements.txt</code>.</li> <li>Review the Docker build logs for errors.</li> <li>No reports generated:</li> <li>Check the Jenkins workspace and ensure reports are written to the correct directory.</li> </ul>"},{"location":"jenkins/scenario_05_deploy_eks/#useful-commands","title":"\u2705 Useful Commands","text":"<ul> <li>See running pods and services:   <code>bash   kubectl get pods   kubectl get services</code></li> <li>Check rollout status:   <code>bash   kubectl rollout status deployment/&lt;deployment-name&gt;</code></li> <li>View events for troubleshooting:   <code>bash   kubectl get events --sort-by=.metadata.creationTimestamp</code></li> </ul>"},{"location":"jenkins/scenario_05_deploy_eks/#monitoring-reporting","title":"\ud83d\udcca Monitoring &amp; Reporting","text":""},{"location":"jenkins/scenario_05_deploy_eks/#deployment-metrics","title":"\u2705 Deployment Metrics","text":"<ul> <li>Deployment success rate</li> <li>Rollout time</li> <li>Pod startup time</li> <li>Resource utilization</li> </ul>"},{"location":"jenkins/scenario_05_deploy_eks/#chaos-metrics","title":"\u2705 Chaos Metrics","text":"<ul> <li>Number of deployment failures</li> <li>Recovery time from failures</li> <li>Service discovery reliability</li> <li>Node failure resilience</li> </ul> <p>Next: Scenario 01: Docker Build | Scenario 02: Testcontainers | Scenario 03: HTML Reports | Scenario 04: Manage Secrets</p> <p>This scenario helps you master Kubernetes deployments in Jenkins, preparing you for real-world cloud CI/CD challenges! \ud83d\udd25 </p>"},{"location":"kubernetes/scenario_01_python_deploy/","title":"\ud83c\udfad Scenario 01: Chaos Strikes Manual Deployments","text":"<p>\"Python K8s Automation Saves the Day!\"</p>"},{"location":"kubernetes/scenario_01_python_deploy/#scenario-overview","title":"\ud83d\udcd6 SCENARIO OVERVIEW","text":""},{"location":"kubernetes/scenario_01_python_deploy/#the-challenge","title":"The Challenge","text":"<p>Chaos Agent has infiltrated your Kubernetes deployments! Manual <code>kubectl</code> commands are failing left and right due to missing namespaces, broken ConfigMaps, and service misconfigurations. Your team is frustrated, deployments are unreliable, and production is at risk.</p>"},{"location":"kubernetes/scenario_01_python_deploy/#the-hero-solution","title":"The Hero Solution","text":"<p>Deploy a bulletproof Python automation system that handles Kubernetes deployments with enterprise-grade reliability. No more manual errors, no more missing dependencies, no more chaos!</p>"},{"location":"kubernetes/scenario_01_python_deploy/#what-youll-build","title":"What You'll Build","text":"<ul> <li>\ud83d\udc0d Python Kubernetes Client automation</li> <li>\ud83d\uddf3\ufe0f Interactive Vote Application for real-world testing</li> <li>\ud83d\udcca Real-time Monitoring System for deployment health</li> <li>\ud83d\udee1\ufe0f Chaos-proof Deployment Process with error handling</li> </ul>"},{"location":"kubernetes/scenario_01_python_deploy/#time-allocation","title":"\u23f1\ufe0f TIME ALLOCATION","text":"Activity Duration Type Live Demo (Instructor) 10 minutes \ud83d\udc40 Watch Your Deployment 5 minutes \ud83d\udee0\ufe0f Hands-on App Interaction 5 minutes \ud83c\udfae Interactive Total 20 minutes"},{"location":"kubernetes/scenario_01_python_deploy/#learning-objectives","title":"\ud83c\udfaf LEARNING OBJECTIVES","text":"<p>By completing this scenario, you will:</p> <p>\u2705 Understand why manual Kubernetes deployments fail \u2705 Master Python Kubernetes client library basics \u2705 Implement automated resource creation and management \u2705 Experience enterprise-grade error handling \u2705 Build monitoring and observability systems \u2705 Defeat Chaos Agent's manual deployment attacks! \ud83e\uddb8\u200d\u2642\ufe0f</p>"},{"location":"kubernetes/scenario_01_python_deploy/#the-chaos-agents-attack","title":"\ud83e\udde8 THE CHAOS AGENT'S ATTACK","text":"<p>\"Your manual kubectl commands are unreliable! Watch me break your deployments with 'simple' configuration errors! Good luck debugging YAML hell in production!\" \ud83d\ude08</p> <p>What Chaos Agent Breaks: - \u274c Missing namespaces cause deployment failures - \u274c Wrong ConfigMap names break application startup - \u274c Service misconfigurations prevent access - \u274c Missing resource limits cause production chaos - \u274c No health checks = unknown application state</p>"},{"location":"kubernetes/scenario_01_python_deploy/#the-python-heros-response","title":"\ud83e\uddb8\u200d\u2642\ufe0f THE PYTHON HERO'S RESPONSE","text":"<p>\"Not so fast, Chaos Agent! Python automation makes deployments bulletproof. Watch this!\"</p> <p>How Python Hero Wins: - \u2705 Automatic namespace management - creates if missing - \u2705 Dependency handling - ConfigMaps before deployments - \u2705 Configuration validation - catches errors before applying - \u2705 Best practices enforcement - resource limits, health checks - \u2705 Graceful error handling - conflicts and failures managed - \u2705 Real-time monitoring - know exactly what's happening</p>"},{"location":"kubernetes/scenario_01_python_deploy/#file-structure","title":"\ud83d\udcc1 FILE STRUCTURE","text":"<pre><code>scenarios/01-python-deploy/\n\u251c\u2500\u2500 README.md                          # This comprehensive guide\n\u251c\u2500\u2500 demo-script.sh                     # Instructor live demo script\n\u251c\u2500\u2500 chaos/\n\u2502   \u251c\u2500\u2500 broken-vote-app.yaml          # Intentionally broken for demo\n\u2502   \u2514\u2500\u2500 chaos-explanation.md          # What's wrong with manual approach\n\u251c\u2500\u2500 hero-solution/\n\u2502   \u251c\u2500\u2500 deploy-vote-app.py            # \ud83d\ude80 Main Python deployment automation\n\u2502   \u251c\u2500\u2500 monitor-deployment.py         # \ud83d\udcca Real-time monitoring system\n\u2502   \u251c\u2500\u2500 requirements.txt              # Python dependencies\n\u2502   \u2514\u2500\u2500 k8s-manifests/               # Generated Kubernetes resources\n\u2502       \u251c\u2500\u2500 namespace.yaml\n\u2502       \u251c\u2500\u2500 configmap.yaml\n\u2502       \u251c\u2500\u2500 deployment.yaml\n\u2502       \u2514\u2500\u2500 service.yaml\n\u251c\u2500\u2500 participant-guide.md               # Step-by-step participant instructions\n\u2514\u2500\u2500 troubleshooting.md                # Complete troubleshooting guide\n</code></pre>"},{"location":"kubernetes/scenario_01_python_deploy/#quick-start-for-participants","title":"\ud83d\ude80 QUICK START (For Participants)","text":""},{"location":"kubernetes/scenario_01_python_deploy/#prerequisites","title":"Prerequisites","text":"<ul> <li>\u2705 Kubernetes cluster running (Docker Desktop, Minikube, or EKS)</li> <li>\u2705 Python 3.8+ installed</li> <li>\u2705 kubectl configured and working</li> </ul>"},{"location":"kubernetes/scenario_01_python_deploy/#step-1-environment-setup-2-minutes","title":"Step 1: Environment Setup (2 minutes)","text":"<pre><code># Navigate to this scenario\ncd scenarios/01-python-deploy\n\n# Install Python dependencies\npip3 install -r hero-solution/requirements.txt\n\n# Verify your cluster connection\nkubectl cluster-info\n</code></pre>"},{"location":"kubernetes/scenario_01_python_deploy/#step-2-deploy-with-python-automation-3-minutes","title":"Step 2: Deploy with Python Automation (3 minutes)","text":"<pre><code># Run the Python hero solution\npython3 hero-solution/deploy-vote-app.py\n</code></pre> <p>Expected Output:</p> <pre><code>\ud83d\ude80 Initializing Python K8s Hero System...\n\u2705 Hero system ready to defeat Chaos Agent!\n\ud83d\udcc1 Creating namespace: vote-app\n\u2705 Namespace created successfully\n\u2699\ufe0f  Creating ConfigMap with poll configuration\n\u2705 ConfigMap created with poll settings\n\ud83d\ude80 Creating bulletproof deployment\n\u2705 Deployment created with health checks and resource limits\n\ud83c\udf10 Creating service for external access\n\u2705 Service created - accessible at port 30001\n\u23f3 Waiting for deployment to be ready...\n\ud83c\udf89 Deployment ready! 2/2 pods running\n\ud83c\udfaf ACCESS YOUR VOTE APP:\n   \ud83d\udcbb Local: http://localhost:30001\n   \ud83c\udf10 Minikube: http://$(minikube ip):30001\n   \u2601\ufe0f  EKS: http://&lt;any-node-ip&gt;:30001\n\ud83c\udf89 CHAOS AGENT DEFEATED!\n</code></pre>"},{"location":"kubernetes/scenario_01_python_deploy/#step-3-access-your-vote-application-5-minutes","title":"Step 3: Access Your Vote Application (5 minutes)","text":"<p>The script will provide environment-specific access instructions based on auto-detection:</p>"},{"location":"kubernetes/scenario_01_python_deploy/#docker-desktop-environment","title":"\ud83d\udc33 Docker Desktop Environment:","text":"<pre><code>\ud83d\udcbb Primary: http://localhost:31000\n\ud83d\udd04 If blocked: Use port forwarding below\n</code></pre>"},{"location":"kubernetes/scenario_01_python_deploy/#minikube-environment","title":"\ud83c\udfaf Minikube Environment:","text":"<pre><code>\ud83c\udf10 Minikube: http://&lt;minikube-ip&gt;:31000 (auto-detected)\n\ud83d\ude80 Auto-open: minikube service vote-app-service -n vote-app\n\ud83d\udca1 Manual IP: minikube ip\n</code></pre>"},{"location":"kubernetes/scenario_01_python_deploy/#cloud-environment-eksgkeaks","title":"\u2601\ufe0f Cloud Environment (EKS/GKE/AKS):","text":"<pre><code>\ud83c\udf0d Get node IP: kubectl get nodes -o wide\n\ud83d\udd17 Access: http://&lt;any-external-ip&gt;:31000\n</code></pre>"},{"location":"kubernetes/scenario_01_python_deploy/#universal-access-always-works","title":"\ud83c\udf10 Universal Access (Always Works):","text":"<pre><code># This works on ANY Kubernetes environment - no conflicts!\nkubectl port-forward svc/vote-app-service -n vote-app 31500:80\n\n# Then access: http://localhost:31500\n# Note: Uses port 31500 to avoid Jenkins (8080) and MkDocs (8000) conflicts\n</code></pre>"},{"location":"kubernetes/scenario_01_python_deploy/#step-4-interact-with-your-vote-app-5-minutes","title":"Step 4: Interact with Your Vote App (5 minutes)","text":"<p>Once you access the vote app through any of the above methods:</p> <ol> <li>\ud83d\uddf3\ufe0f Cast Your Vote:</li> <li>Select your favorite programming language</li> <li>Click \"Vote\" button</li> <li> <p>See your vote recorded instantly</p> </li> <li> <p>\ud83d\udcca Watch Real-time Results:</p> </li> <li>View the live chart updating</li> <li>See vote percentages change</li> <li> <p>Notice the interactive features</p> </li> <li> <p>\ud83d\udd04 Test Multiple Votes:</p> </li> <li>Try different browsers</li> <li>Vote multiple times (each counts!)</li> <li> <p>Refresh page and see persistence</p> </li> <li> <p>\ud83c\udfae Challenge Others:</p> </li> <li>Share your URL with neighbors</li> <li>See collaborative voting</li> <li>Watch real-time updates from multiple users</li> </ol>"},{"location":"kubernetes/scenario_01_python_deploy/#step-5-monitor-your-deployment-5-minutes","title":"Step 5: Monitor Your Deployment (5 minutes)","text":"<pre><code># Run the monitoring system\npython3 hero-solution/monitor-deployment.py\n\n# Choose option:\n# 1 = One-time status check\n# 2 = Continuous monitoring (Press Ctrl+C to stop)\n</code></pre>"},{"location":"kubernetes/scenario_01_python_deploy/#live-demo-walkthrough-for-instructors","title":"\ud83c\udfac LIVE DEMO WALKTHROUGH (For Instructors)","text":""},{"location":"kubernetes/scenario_01_python_deploy/#demo-script-overview","title":"Demo Script Overview","text":""},{"location":"kubernetes/scenario_01_python_deploy/#part-1-chaos-agent-strikes-3-minutes","title":"Part 1: Chaos Agent Strikes (3 minutes)","text":"<pre><code># Show the chaos - run this live\n./demo-script.sh\n</code></pre> <p>What Students See: 1. Manual deployment fails - missing namespace 2. Fix namespace, still fails - missing ConfigMap 3. Create ConfigMap manually, still fails - service misconfiguration 4. Frustration mounts - \"This is production reality!\"</p>"},{"location":"kubernetes/scenario_01_python_deploy/#part-2-python-hero-saves-the-day-4-minutes","title":"Part 2: Python Hero Saves the Day (4 minutes)","text":"<pre><code># Run the hero solution\npython3 hero-solution/deploy-vote-app.py\n</code></pre> <p>Key Teaching Points: - \u2728 Automation handles all dependencies - \u2728 Error handling prevents failures - \u2728 Best practices applied automatically - \u2728 Monitoring built-in from the start</p>"},{"location":"kubernetes/scenario_01_python_deploy/#part-3-victory-celebration-3-minutes","title":"Part 3: Victory Celebration (3 minutes)","text":"<ul> <li>Show the working vote app</li> <li>Demonstrate real-time voting</li> <li>Highlight the automation benefits</li> <li>Celebrate defeating Chaos Agent!</li> </ul>"},{"location":"kubernetes/scenario_01_python_deploy/#chaos-testing","title":"\ud83e\uddea CHAOS TESTING","text":""},{"location":"kubernetes/scenario_01_python_deploy/#test-1-kill-pods-and-watch-recovery","title":"Test 1: Kill Pods and Watch Recovery","text":"<pre><code># Kill a random pod\nkubectl get pods -n vote-app -o name | xargs -I {} kubectl delete {} --grace-period=0\n\n# Watch Kubernetes recreate it automatically\nkubectl get pods -n vote-app -w\n</code></pre>"},{"location":"kubernetes/scenario_01_python_deploy/#test-2-scale-updown","title":"Test 2: Scale Up/Down","text":"<pre><code># Scale up to 5 replicas\nkubectl scale deployment vote-app -n vote-app --replicas=5\n\n# Scale down to 1 replica\nkubectl scale deployment vote-app -n vote-app --replicas=1\n</code></pre>"},{"location":"kubernetes/scenario_01_python_deploy/#test-3-resource-pressure","title":"Test 3: Resource Pressure","text":"<pre><code># Create resource pressure\nkubectl run stress-test --image=busybox --requests=cpu=1000m,memory=1Gi --limits=cpu=2000m,memory=2Gi --command -- stress --cpu 4 --vm 2 --vm-bytes 1G\n</code></pre>"},{"location":"kubernetes/scenario_01_python_deploy/#monitoring-observability","title":"\ud83d\udcca MONITORING &amp; OBSERVABILITY","text":""},{"location":"kubernetes/scenario_01_python_deploy/#real-time-monitoring","title":"Real-time Monitoring","text":"<pre><code># Watch pod status\nkubectl get pods -n vote-app -w\n\n# Monitor service endpoints\nkubectl get endpoints -n vote-app\n\n# Check resource usage\nkubectl top pods -n vote-app\n</code></pre>"},{"location":"kubernetes/scenario_01_python_deploy/#logs-and-debugging","title":"Logs and Debugging","text":"<pre><code># View application logs\nkubectl logs -f deployment/vote-app -n vote-app\n\n# Check events\nkubectl get events -n vote-app --sort-by='.lastTimestamp'\n</code></pre>"},{"location":"kubernetes/scenario_01_python_deploy/#success-criteria","title":"\ud83c\udfaf SUCCESS CRITERIA","text":""},{"location":"kubernetes/scenario_01_python_deploy/#scenario-01-complete-checklist","title":"\u2705 Scenario 01 Complete Checklist:","text":"<ul> <li>\u2705 Python automation deployed successfully</li> <li>\u2705 Vote application accessible and functional</li> <li>\u2705 Real-time voting working</li> <li>\u2705 Monitoring system operational</li> <li>\u2705 Chaos Agent defeated! \ud83e\uddb8\u200d\u2642\ufe0f</li> </ul>"},{"location":"kubernetes/scenario_01_python_deploy/#key-learning-outcomes","title":"Key Learning Outcomes:","text":"<ul> <li>\u2705 Python Kubernetes Client - Mastered automation</li> <li>\u2705 Error Handling - Graceful failure management</li> <li>\u2705 Best Practices - Resource limits and health checks</li> <li>\u2705 Monitoring - Real-time observability</li> <li>\u2705 Chaos Resilience - Survived pod failures</li> </ul>"},{"location":"kubernetes/scenario_01_python_deploy/#next-steps","title":"\ud83d\ude80 NEXT STEPS","text":""},{"location":"kubernetes/scenario_01_python_deploy/#whats-next","title":"What's Next:","text":"<ol> <li>Scenario 02: Enterprise Security with Secret Management</li> <li>Scenario 03: Auto-scaling with HPA</li> <li>Scenario 04: Blue-Green Deployment Strategies</li> <li>Scenario 05: GitOps with ArgoCD and Argo Rollouts</li> </ol>"},{"location":"kubernetes/scenario_01_python_deploy/#production-readiness","title":"Production Readiness:","text":"<ul> <li>Apply these Python automation patterns to your real applications</li> <li>Implement comprehensive error handling</li> <li>Add monitoring and alerting</li> <li>Test chaos scenarios regularly</li> </ul>"},{"location":"kubernetes/scenario_01_python_deploy/#troubleshooting","title":"\ud83c\udd98 TROUBLESHOOTING","text":""},{"location":"kubernetes/scenario_01_python_deploy/#common-issues","title":"Common Issues:","text":""},{"location":"kubernetes/scenario_01_python_deploy/#issue-python-dependencies-not-found","title":"Issue: Python dependencies not found","text":"<pre><code># Solution: Install requirements\npip3 install -r hero-solution/requirements.txt\n</code></pre>"},{"location":"kubernetes/scenario_01_python_deploy/#issue-kubernetes-connection-failed","title":"Issue: Kubernetes connection failed","text":"<pre><code># Solution: Check cluster status\nkubectl cluster-info\nkubectl get nodes\n</code></pre>"},{"location":"kubernetes/scenario_01_python_deploy/#issue-port-already-in-use","title":"Issue: Port already in use","text":"<pre><code># Solution: Use different port\nkubectl port-forward svc/vote-app-service -n vote-app 31501:80\n</code></pre>"},{"location":"kubernetes/scenario_01_python_deploy/#issue-pods-not-starting","title":"Issue: Pods not starting","text":"<pre><code># Solution: Check events and logs\nkubectl get events -n vote-app\nkubectl describe pod -n vote-app\n</code></pre>"},{"location":"kubernetes/scenario_01_python_deploy/#conclusion","title":"\ud83c\udf89 CONCLUSION","text":"<p>Congratulations! You've successfully defeated Chaos Agent's manual deployment attacks! \ud83e\uddb8\u200d\u2642\ufe0f</p>"},{"location":"kubernetes/scenario_01_python_deploy/#what-youve-accomplished","title":"What You've Accomplished:","text":"<ul> <li>\u2705 Automated Kubernetes deployments with Python</li> <li>\u2705 Built a real interactive application (vote app)</li> <li>\u2705 Implemented enterprise-grade error handling</li> <li>\u2705 Created comprehensive monitoring systems</li> <li>\u2705 Proven chaos resilience through testing</li> </ul>"},{"location":"kubernetes/scenario_01_python_deploy/#key-takeaways","title":"Key Takeaways:","text":"<ul> <li>Automation is essential for reliable deployments</li> <li>Error handling prevents production failures</li> <li>Monitoring provides real-time visibility</li> <li>Testing chaos scenarios builds confidence</li> </ul> <p>You're now ready for the next challenge: Enterprise Security! \ud83d\udd10</p> <p>Remember: In the world of Kubernetes, automation is your superpower against chaos! \ud83d\ude80 </p>"},{"location":"kubernetes/scenario_02_secret_automation/","title":"\ud83d\udd10 Scenario 02: Chaos Attacks Your Secrets!","text":"<p>\"Python Security Hero Defeats Database Chaos!\"</p>"},{"location":"kubernetes/scenario_02_secret_automation/#scenario-overview","title":"\ud83d\udcd6 SCENARIO OVERVIEW","text":""},{"location":"kubernetes/scenario_02_secret_automation/#the-security-challenge","title":"The Security Challenge","text":"<p>Chaos Agent has escalated their attack! They've discovered that manual secret management is a security nightmare. Plain text passwords in YAML files, databases exposed to the internet, and missing security configurations have left your infrastructure vulnerable to data theft, ransomware attacks, and compliance violations.</p>"},{"location":"kubernetes/scenario_02_secret_automation/#the-security-hero-solution","title":"The Security Hero Solution","text":"<p>Deploy an enterprise-grade secret management system using Python automation that generates cryptographically secure passwords, implements automated secret rotation, and provides real-time security monitoring. No more exposed credentials, no more security chaos!</p>"},{"location":"kubernetes/scenario_02_secret_automation/#what-youll-build","title":"What You'll Build","text":"<ul> <li>\ud83d\udd10 Enterprise Secret Management with automated generation</li> <li>\ud83d\udcdd Secure Todo Application with encrypted database storage</li> <li>\ud83d\udd04 Zero-Downtime Secret Rotation system</li> <li>\ud83d\udc41\ufe0f Real-time Security Monitoring dashboard</li> <li>\ud83d\udee1\ufe0f Production-Grade Security controls and compliance</li> </ul>"},{"location":"kubernetes/scenario_02_secret_automation/#time-allocation","title":"\u23f1\ufe0f TIME ALLOCATION","text":"Activity Duration Type Live Demo (Instructor) 10 minutes \ud83d\udc40 Watch Your Secure Deployment 5 minutes \ud83d\udee0\ufe0f Hands-on App Testing 5 minutes \ud83c\udfae Interactive Secret Rotation 5 minutes \ud83d\udd04 Automation Security Monitoring 5 minutes \ud83d\udcca Analysis Total 30 minutes"},{"location":"kubernetes/scenario_02_secret_automation/#learning-objectives","title":"\ud83c\udfaf LEARNING OBJECTIVES","text":"<p>By completing this scenario, you will:</p> <p>\u2705 Master Kubernetes Secrets API and lifecycle management \u2705 Implement enterprise-grade secret generation and rotation \u2705 Build secure multi-tier applications with encrypted storage \u2705 Deploy production-ready security controls and monitoring \u2705 Understand the critical importance of automated security \u2705 Defeat Chaos Agent's data theft and security attacks! \ud83d\udee1\ufe0f</p>"},{"location":"kubernetes/scenario_02_secret_automation/#the-chaos-agents-security-attack","title":"\ud83e\udde8 THE CHAOS AGENT'S SECURITY ATTACK","text":"<p>\"Your database passwords are EXPOSED! I can see them in plain text in your YAML files! I'll steal your data and crash your databases! Your manual secret management is a security nightmare!\" \ud83d\ude08\ud83d\udc80</p> <p>What Chaos Agent Exploits: - \u274c Plain text passwords visible in YAML files and Git repositories - \u274c Database services exposed directly to the internet - \u274c No secret rotation = permanent compromise after breach - \u274c Missing security contexts = privilege escalation attacks - \u274c No audit trails = invisible security violations - \u274c Resource exhaustion = denial of service vulnerabilities</p>"},{"location":"kubernetes/scenario_02_secret_automation/#the-python-security-heros-response","title":"\ud83e\uddb8\u200d\u2642\ufe0f THE PYTHON SECURITY HERO'S RESPONSE","text":"<p>\"Not today, Chaos Agent! Python-powered secret automation will protect our data with enterprise-grade security. Watch as I deploy bulletproof secret management!\" \ud83e\uddb8\u200d\u2642\ufe0f\ud83d\udd10</p> <p>How Python Security Hero Wins: - \u2705 Cryptographically secure password generation - Unbreakable credentials - \u2705 Kubernetes Secrets encryption - No plain text storage ever - \u2705 Automated secret rotation - Credentials change regularly - \u2705 Network isolation - Database internal-only access - \u2705 Security contexts - Non-root execution, dropped privileges - \u2705 Resource limits - Prevent DoS attacks - \u2705 Comprehensive monitoring - Real-time security status - \u2705 Audit trails - Complete security metadata tracking</p>"},{"location":"kubernetes/scenario_02_secret_automation/#file-structure","title":"\ud83d\udcc1 FILE STRUCTURE","text":"<pre><code>scenarios/02-secret-management/\n\u251c\u2500\u2500 README.md                          # This comprehensive guide\n\u251c\u2500\u2500 demo-script.sh                     # Instructor live demo script\n\u251c\u2500\u2500 chaos/\n\u2502   \u251c\u2500\u2500 insecure-todo-app.yaml        # \ud83d\udc80 Security nightmare demo\n\u2502   \u251c\u2500\u2500 broken-secrets.yaml           # Wrong secret configurations\n\u2502   \u251c\u2500\u2500 exposed-database.yaml         # Database security disasters\n\u2502   \u251c\u2500\u2500 privilege-escalation.yaml     # Container security failures\n\u2502   \u251c\u2500\u2500 security-disasters.md         # Educational disaster explanations\n\u2502   \u2514\u2500\u2500 vulnerability-examples.md     # Real-world attack scenarios\n\u251c\u2500\u2500 hero-solution/\n\u2502   \u251c\u2500\u2500 deploy-secure-todo.py         # \ud83d\udd10 Main security automation system\n\u2502   \u251c\u2500\u2500 secret-manager.py             # \ud83d\udd04 Advanced secret lifecycle management\n\u2502   \u251c\u2500\u2500 rotate-secrets.py             # \u26a1 Automated secret rotation\n\u2502   \u251c\u2500\u2500 security-monitor.py           # \ud83d\udc41\ufe0f Security monitoring dashboard\n\u2502   \u251c\u2500\u2500 requirements.txt              # Python security dependencies\n\u2502   \u2514\u2500\u2500 k8s-manifests/               # Generated secure resources\n\u2502       \u251c\u2500\u2500 namespace.yaml\n\u2502       \u251c\u2500\u2500 mysql-secret.yaml         # Generated dynamically\n\u2502       \u251c\u2500\u2500 app-secret.yaml           # Generated dynamically\n\u2502       \u251c\u2500\u2500 mysql-deployment.yaml\n\u2502       \u251c\u2500\u2500 todo-deployment.yaml\n\u2502       \u2514\u2500\u2500 services.yaml\n\u251c\u2500\u2500 participant-guide.md               # Step-by-step security instructions\n\u2514\u2500\u2500 troubleshooting.md                # Security-focused troubleshooting\n</code></pre>"},{"location":"kubernetes/scenario_02_secret_automation/#quick-start-for-participants","title":"\ud83d\ude80 QUICK START (For Participants)","text":""},{"location":"kubernetes/scenario_02_secret_automation/#prerequisites","title":"Prerequisites","text":"<ul> <li>\u2705 Scenario 1 completed (vote app should still be running)</li> <li>\u2705 Kubernetes cluster running (Docker Desktop, Minikube, or EKS)</li> <li>\u2705 Python 3.8+ with security libraries</li> <li>\u2705 kubectl configured and working</li> </ul>"},{"location":"kubernetes/scenario_02_secret_automation/#step-1-environment-setup-2-minutes","title":"Step 1: Environment Setup (2 minutes)","text":"<pre><code># Navigate to security scenario\ncd scenarios/02-secret-management\n\n# Install security dependencies\npip3 install -r hero-solution/requirements.txt\n\n# Verify security tools are available\npython3 -c \"from cryptography.fernet import Fernet; print('\u2705 Security tools ready')\"\n</code></pre>"},{"location":"kubernetes/scenario_02_secret_automation/#step-2-deploy-secure-todo-app-5-minutes","title":"Step 2: Deploy Secure Todo App (5 minutes)","text":"<pre><code># Run the security hero automation\npython3 hero-solution/deploy-secure-todo.py\n</code></pre> <p>Expected Output:</p> <pre><code>\ud83c\udfad SCENARIO 2: Chaos Attacks Your Secrets!\n\ud83d\udd10 Python Security Hero to the rescue!\n\n\ud83d\udd10 Initializing Enterprise Secret Management...\n\u2705 Security system armed and ready!\n======================================================================\n\ud83d\udd10 PYTHON SECURITY HERO DEPLOYMENT STARTING\n======================================================================\n\ud83c\udfe0 Creating secure namespace: secure-todo\n\u2705 Secure namespace created\n\ud83d\udd10 Generating secure MySQL credentials...\n\u2705 MySQL secrets created with enterprise security\n\ud83d\udd11 Generating application security tokens...\n\u2705 Application secrets created with rotation policy\n\ud83d\uddc4\ufe0f Deploying secure MySQL database...\n\u2705 Secure MySQL deployed with secret integration\n\ud83d\udcdd Deploying secure todo application...\n\u2705 Secure todo app deployed with encrypted secrets\n\ud83c\udf10 Creating secure network services...\n\u2705 Secure services created with proper network isolation\n\u23f3 Waiting for secure deployments to be ready...\n\ud83c\udf89 Deployment ready! 3/3 pods running\n\ud83c\udf10 Getting secure access information...\n\ud83c\udfaf ACCESS YOUR SECURE TODO APP:\n   \ud83d\udcbb NodePort: http://localhost:31001\n   \ud83d\udd27 Port Forward: kubectl port-forward svc/secure-todo-service -n secure-todo 31501:80\n   \ud83c\udf0d Then access: http://localhost:31501\n\n======================================================================\n\ud83c\udf89 CHAOS AGENT'S SECURITY ATTACK DEFEATED!\n\u2705 Secure todo app deployed with enterprise-grade secrets\n======================================================================\n</code></pre>"},{"location":"kubernetes/scenario_02_secret_automation/#step-3-access-your-secure-todo-app-5-minutes","title":"Step 3: Access Your Secure Todo App (5 minutes)","text":"<p>The script provides environment-specific access methods:</p>"},{"location":"kubernetes/scenario_02_secret_automation/#docker-desktop-environment","title":"\ud83d\udc33 Docker Desktop Environment:","text":"<pre><code>\ud83d\udcbb Primary: http://localhost:31001\n\ud83d\udd04 Fallback: Port forwarding (see universal access below)\n</code></pre>"},{"location":"kubernetes/scenario_02_secret_automation/#minikube-environment","title":"\ud83c\udfaf Minikube Environment:","text":"<pre><code># Get Minikube IP and access\nminikube service secure-todo-service -n secure-todo --url\n# Or use: http://$(minikube ip):31001\n</code></pre>"},{"location":"kubernetes/scenario_02_secret_automation/#cloud-environment-eksgkeaks","title":"\u2601\ufe0f Cloud Environment (EKS/GKE/AKS):","text":"<pre><code># Get node external IP\nkubectl get nodes -o wide\n# Access: http://&lt;external-ip&gt;:31001\n</code></pre>"},{"location":"kubernetes/scenario_02_secret_automation/#universal-access-always-works","title":"\ud83c\udf10 Universal Access (Always Works):","text":"<pre><code># Port forwarding - conflict-free with Jenkins (8080) and MkDocs (8000)\nkubectl port-forward svc/secure-todo-service -n secure-todo 31501:80\n# Then access: http://localhost:31501\n</code></pre>"},{"location":"kubernetes/scenario_02_secret_automation/#step-4-test-your-secure-todo-app-5-minutes","title":"Step 4: Test Your Secure Todo App (5 minutes)","text":"<ol> <li>\ud83d\udcdd Create Secure Tasks:</li> <li>Add new todo items</li> <li>Mark tasks as complete</li> <li>Delete completed tasks</li> <li> <p>Notice data persistence</p> </li> <li> <p>\ud83d\udd10 Verify Security Features:</p> </li> <li>Check that database is internal-only</li> <li>Verify secrets are encrypted</li> <li> <p>Confirm no plain text passwords</p> </li> <li> <p>\ud83d\udd04 Test Secret Rotation (5 minutes):</p> </li> </ol> <pre><code># Run secret rotation automation\npython3 hero-solution/rotate-secrets.py\n\n# Watch the rotation process\nkubectl get secrets -n secure-todo -w\n</code></pre>"},{"location":"kubernetes/scenario_02_secret_automation/#step-5-security-monitoring-5-minutes","title":"Step 5: Security Monitoring (5 minutes)","text":"<pre><code># Run security monitoring dashboard\npython3 hero-solution/security-monitor.py\n\n# Choose monitoring options:\n# 1 = Security status check\n# 2 = Secret rotation status\n# 3 = Vulnerability scan\n# 4 = Continuous monitoring\n</code></pre>"},{"location":"kubernetes/scenario_02_secret_automation/#live-demo-walkthrough-for-instructors","title":"\ud83c\udfac LIVE DEMO WALKTHROUGH (For Instructors)","text":""},{"location":"kubernetes/scenario_02_secret_automation/#demo-script-overview","title":"Demo Script Overview","text":""},{"location":"kubernetes/scenario_02_secret_automation/#part-1-security-chaos-exposed-3-minutes","title":"Part 1: Security Chaos Exposed (3 minutes)","text":"<pre><code># Show the security nightmare - run this live\n./demo-script.sh\n</code></pre> <p>What Students See: 1. Plain text passwords in YAML files 2. Database exposed to internet 3. Missing security contexts 4. No audit trails 5. \"This is a security disaster!\"</p>"},{"location":"kubernetes/scenario_02_secret_automation/#part-2-security-hero-saves-the-day-4-minutes","title":"Part 2: Security Hero Saves the Day (4 minutes)","text":"<pre><code># Run the security hero solution\npython3 hero-solution/deploy-secure-todo.py\n</code></pre> <p>Key Teaching Points: - \ud83d\udd10 Cryptographically secure secrets - \ud83d\udd10 Encrypted storage only - \ud83d\udd10 Network isolation - \ud83d\udd10 Security contexts - \ud83d\udd10 Audit trails</p>"},{"location":"kubernetes/scenario_02_secret_automation/#part-3-security-victory-3-minutes","title":"Part 3: Security Victory (3 minutes)","text":"<ul> <li>Show the secure todo app</li> <li>Demonstrate secret rotation</li> <li>Highlight security monitoring</li> <li>Celebrate security victory!</li> </ul>"},{"location":"kubernetes/scenario_02_secret_automation/#security-features-demonstrated","title":"\ud83d\udd10 SECURITY FEATURES DEMONSTRATED","text":""},{"location":"kubernetes/scenario_02_secret_automation/#1-cryptographically-secure-secrets","title":"1. Cryptographically Secure Secrets","text":"<pre><code># Generated using Python cryptography library\nfrom cryptography.fernet import Fernet\nimport secrets\nimport string\n\n# Generate cryptographically secure passwords\ndef generate_secure_password(length=32):\n    alphabet = string.ascii_letters + string.digits + string.punctuation\n    return ''.join(secrets.choice(alphabet) for _ in range(length))\n</code></pre>"},{"location":"kubernetes/scenario_02_secret_automation/#2-kubernetes-secrets-encryption","title":"2. Kubernetes Secrets Encryption","text":"<pre><code># Secrets are encrypted at rest\napiVersion: v1\nkind: Secret\nmetadata:\n  name: mysql-secret\n  namespace: secure-todo\ntype: Opaque\ndata:\n  # Base64 encoded, encrypted values\n  password: &lt;encrypted-base64-value&gt;\n  username: &lt;encrypted-base64-value&gt;\n</code></pre>"},{"location":"kubernetes/scenario_02_secret_automation/#3-network-isolation","title":"3. Network Isolation","text":"<pre><code># Database service - internal only\napiVersion: v1\nkind: Service\nmetadata:\n  name: mysql-service\n  namespace: secure-todo\nspec:\n  type: ClusterIP  # Internal only\n  selector:\n    app: mysql\n  ports:\n  - port: 3306\n    targetPort: 3306\n</code></pre>"},{"location":"kubernetes/scenario_02_secret_automation/#4-security-contexts","title":"4. Security Contexts","text":"<pre><code># Non-root execution with dropped privileges\nsecurityContext:\n  runAsNonRoot: true\n  runAsUser: 1000\n  runAsGroup: 1000\n  allowPrivilegeEscalation: false\n  capabilities:\n    drop:\n    - ALL\n</code></pre>"},{"location":"kubernetes/scenario_02_secret_automation/#security-testing","title":"\ud83e\uddea SECURITY TESTING","text":""},{"location":"kubernetes/scenario_02_secret_automation/#test-1-secret-encryption-verification","title":"Test 1: Secret Encryption Verification","text":"<pre><code># Check that secrets are encrypted\nkubectl get secret mysql-secret -n secure-todo -o yaml\n\n# Verify no plain text passwords\nkubectl get secret mysql-secret -n secure-todo -o jsonpath='{.data.password}' | base64 -d\n</code></pre>"},{"location":"kubernetes/scenario_02_secret_automation/#test-2-network-isolation-test","title":"Test 2: Network Isolation Test","text":"<pre><code># Verify database is internal-only\nkubectl get svc mysql-service -n secure-todo\n\n# Should show ClusterIP, not LoadBalancer or NodePort\n</code></pre>"},{"location":"kubernetes/scenario_02_secret_automation/#test-3-security-context-verification","title":"Test 3: Security Context Verification","text":"<pre><code># Check container security\nkubectl describe pod -n secure-todo -l app=todo-app\n\n# Verify non-root execution\nkubectl exec -it deployment/todo-app -n secure-todo -- whoami\n</code></pre>"},{"location":"kubernetes/scenario_02_secret_automation/#test-4-secret-rotation-test","title":"Test 4: Secret Rotation Test","text":"<pre><code># Trigger secret rotation\npython3 hero-solution/rotate-secrets.py\n\n# Watch secrets update\nkubectl get secrets -n secure-todo -w\n</code></pre>"},{"location":"kubernetes/scenario_02_secret_automation/#security-monitoring","title":"\ud83d\udcca SECURITY MONITORING","text":""},{"location":"kubernetes/scenario_02_secret_automation/#real-time-security-dashboard","title":"Real-time Security Dashboard","text":"<pre><code># Run security monitoring\npython3 hero-solution/security-monitor.py\n\n# Features:\n# - Secret rotation status\n# - Security context compliance\n# - Network isolation verification\n# - Vulnerability scanning\n# - Audit trail tracking\n</code></pre>"},{"location":"kubernetes/scenario_02_secret_automation/#security-metrics","title":"Security Metrics","text":"<pre><code># Check security status\nkubectl get events -n secure-todo --sort-by='.lastTimestamp'\n\n# Monitor secret access\nkubectl get secret mysql-secret -n secure-todo -o yaml\n\n# Verify network policies\nkubectl get networkpolicies -n secure-todo\n</code></pre>"},{"location":"kubernetes/scenario_02_secret_automation/#success-criteria","title":"\ud83c\udfaf SUCCESS CRITERIA","text":""},{"location":"kubernetes/scenario_02_secret_automation/#scenario-02-complete-checklist","title":"\u2705 Scenario 02 Complete Checklist:","text":"<ul> <li>\u2705 Secure todo app deployed successfully</li> <li>\u2705 Database secrets encrypted and secure</li> <li>\u2705 Network isolation implemented</li> <li>\u2705 Security contexts applied</li> <li>\u2705 Secret rotation working</li> <li>\u2705 Security monitoring operational</li> <li>\u2705 Chaos Agent's security attacks defeated! \ud83d\udee1\ufe0f</li> </ul>"},{"location":"kubernetes/scenario_02_secret_automation/#key-learning-outcomes","title":"Key Learning Outcomes:","text":"<ul> <li>\u2705 Kubernetes Secrets API - Mastered secure secret management</li> <li>\u2705 Cryptographic Security - Implemented unbreakable credentials</li> <li>\u2705 Network Security - Applied proper isolation</li> <li>\u2705 Security Contexts - Enforced least privilege</li> <li>\u2705 Secret Rotation - Automated credential management</li> <li>\u2705 Security Monitoring - Real-time security visibility</li> </ul>"},{"location":"kubernetes/scenario_02_secret_automation/#next-steps","title":"\ud83d\ude80 NEXT STEPS","text":""},{"location":"kubernetes/scenario_02_secret_automation/#whats-next","title":"What's Next:","text":"<ol> <li>Scenario 03: Auto-scaling with HPA</li> <li>Scenario 04: Blue-Green Deployment Strategies</li> <li>Scenario 05: GitOps with ArgoCD and Argo Rollouts</li> </ol>"},{"location":"kubernetes/scenario_02_secret_automation/#production-security","title":"Production Security:","text":"<ul> <li>Apply these security patterns to production applications</li> <li>Implement automated secret rotation</li> <li>Add security monitoring and alerting</li> <li>Regular security audits and penetration testing</li> </ul>"},{"location":"kubernetes/scenario_02_secret_automation/#troubleshooting","title":"\ud83c\udd98 TROUBLESHOOTING","text":""},{"location":"kubernetes/scenario_02_secret_automation/#common-security-issues","title":"Common Security Issues:","text":""},{"location":"kubernetes/scenario_02_secret_automation/#issue-secrets-not-encrypted","title":"Issue: Secrets not encrypted","text":"<pre><code># Solution: Check encryption at rest\nkubectl get secret mysql-secret -n secure-todo -o yaml\n</code></pre>"},{"location":"kubernetes/scenario_02_secret_automation/#issue-database-accessible-externally","title":"Issue: Database accessible externally","text":"<pre><code># Solution: Verify service type\nkubectl get svc mysql-service -n secure-todo\n# Should be ClusterIP, not LoadBalancer\n</code></pre>"},{"location":"kubernetes/scenario_02_secret_automation/#issue-container-running-as-root","title":"Issue: Container running as root","text":"<pre><code># Solution: Check security context\nkubectl describe pod -n secure-todo -l app=todo-app\n</code></pre>"},{"location":"kubernetes/scenario_02_secret_automation/#issue-secret-rotation-failed","title":"Issue: Secret rotation failed","text":"<pre><code># Solution: Check rotation logs\nkubectl logs -f deployment/todo-app -n secure-todo\n</code></pre>"},{"location":"kubernetes/scenario_02_secret_automation/#conclusion","title":"\ud83c\udf89 CONCLUSION","text":"<p>Congratulations! You've successfully defeated Chaos Agent's security attacks! \ud83d\udee1\ufe0f</p>"},{"location":"kubernetes/scenario_02_secret_automation/#what-youve-accomplished","title":"What You've Accomplished:","text":"<ul> <li>\u2705 Implemented enterprise-grade secret management</li> <li>\u2705 Built secure multi-tier applications</li> <li>\u2705 Applied cryptographic security principles</li> <li>\u2705 Created automated secret rotation</li> <li>\u2705 Deployed comprehensive security monitoring</li> </ul>"},{"location":"kubernetes/scenario_02_secret_automation/#key-security-takeaways","title":"Key Security Takeaways:","text":"<ul> <li>Cryptographic security is essential for sensitive data</li> <li>Network isolation prevents unauthorized access</li> <li>Security contexts enforce least privilege</li> <li>Secret rotation maintains credential security</li> <li>Security monitoring provides real-time visibility</li> </ul> <p>You're now ready for the next challenge: Auto-scaling! \ud83d\udcc8</p> <p>Remember: In the world of Kubernetes security, automation and encryption are your shields against chaos! \ud83d\udd10 </p>"},{"location":"kubernetes/scenario_03_auto_scaling/","title":"\ud83d\udcc8 Scenario 03: The Great Auto-scaling Challenge!","text":"<p>\"Python Auto-scaling Hero Defeats Resource Exhaustion Chaos!\"</p>"},{"location":"kubernetes/scenario_03_auto_scaling/#scenario-overview","title":"\ud83d\udcd6 SCENARIO OVERVIEW","text":""},{"location":"kubernetes/scenario_03_auto_scaling/#the-final-challenge","title":"The Final Challenge","text":"<p>Chaos Agent has launched their most devastating attack yet! They're attempting to overwhelm your applications with massive traffic spikes and resource exhaustion attacks. Manual scaling can't keep up with the dynamic load patterns, and your infrastructure is at risk of complete failure under the relentless assault.</p>"},{"location":"kubernetes/scenario_03_auto_scaling/#the-auto-scaling-hero-solution","title":"The Auto-scaling Hero Solution","text":"<p>Deploy an intelligent auto-scaling system using Python automation that dynamically adjusts resources based on real-time demand. Watch as your applications seamlessly scale up during attacks and efficiently scale down when the threat passes. No more manual intervention, no more resource waste!</p>"},{"location":"kubernetes/scenario_03_auto_scaling/#what-youll-build","title":"What You'll Build","text":"<ul> <li>\ud83d\udcc8 Horizontal Pod Autoscaler (HPA) with intelligent scaling policies</li> <li>\u26a1 Interactive Load Testing Platform with real-time visualization</li> <li>\ud83c\udfae Chaos Agent Attack Simulator for ultimate stress testing</li> <li>\ud83d\udcca Real-time Scaling Monitor with comprehensive metrics</li> <li>\ud83d\udee1\ufe0f Production-Grade Resource Management with smart limits</li> </ul>"},{"location":"kubernetes/scenario_03_auto_scaling/#time-allocation","title":"\u23f1\ufe0f TIME ALLOCATION","text":"Activity Duration Type Live Demo (Instructor) 10 minutes \ud83d\udc40 Watch Your Auto-scaling Deployment 5 minutes \ud83d\udee0\ufe0f Hands-on Interactive Load Testing 10 minutes \ud83c\udfae Interactive Chaos Agent Attack 5 minutes \ud83d\udca5 Challenge Scaling Analysis 5 minutes \ud83d\udcca Analysis Total 35 minutes"},{"location":"kubernetes/scenario_03_auto_scaling/#learning-objectives","title":"\ud83c\udfaf LEARNING OBJECTIVES","text":"<p>By completing this scenario, you will:</p> <p>\u2705 Master Horizontal Pod Autoscaler (HPA) configuration and behavior \u2705 Understand resource requests vs limits and their scaling impact \u2705 Implement intelligent scaling policies for production workloads \u2705 Experience real-time load testing and performance monitoring \u2705 Learn how to handle traffic spikes and resource attacks \u2705 Defeat Chaos Agent's most powerful resource exhaustion attacks! \u26a1</p>"},{"location":"kubernetes/scenario_03_auto_scaling/#the-chaos-agents-final-attack","title":"\ud83e\udde8 THE CHAOS AGENT'S FINAL ATTACK","text":"<p>\"Your static deployments are DOOMED! I'll launch massive traffic spikes that will overwhelm your servers! Watch as your applications crash under the weight of my resource exhaustion attacks! Your manual scaling is NO MATCH for my chaos!\" \ud83d\ude08\ud83d\udca5</p> <p>What Chaos Agent Exploits: - \u274c Fixed replica counts that can't handle traffic spikes - \u274c Manual scaling processes that are too slow to respond - \u274c Resource exhaustion leading to application crashes - \u274c No intelligent load distribution or capacity planning - \u274c Inability to scale down, wasting resources continuously - \u274c Single points of failure under high load conditions</p>"},{"location":"kubernetes/scenario_03_auto_scaling/#the-auto-scaling-heros-ultimate-response","title":"\ud83e\uddb8\u200d\u2642\ufe0f THE AUTO-SCALING HERO'S ULTIMATE RESPONSE","text":"<p>\"Not this time, Chaos Agent! My Python-powered auto-scaling system will adapt to ANY load you throw at it. Watch as intelligent algorithms automatically provision resources and maintain perfect performance!\" \ud83e\uddb8\u200d\u2642\ufe0f\ud83d\udcc8</p> <p>How Auto-scaling Hero Wins: - \u2705 Horizontal Pod Autoscaler (HPA) - Intelligent scaling based on CPU metrics - \u2705 Smart scaling policies - Aggressive scale-up, conservative scale-down - \u2705 Resource optimization - Perfect requests/limits balance - \u2705 Real-time monitoring - Live visibility into scaling decisions - \u2705 Load testing platform - Interactive chaos simulation - \u2705 Predictive scaling - Proactive resource management - \u2705 Zero-downtime scaling - Seamless capacity adjustments</p>"},{"location":"kubernetes/scenario_03_auto_scaling/#file-structure","title":"\ud83d\udcc1 FILE STRUCTURE","text":"<pre><code>scenarios/03-auto-scaling/\n\u251c\u2500\u2500 README.md                          # This comprehensive guide\n\u251c\u2500\u2500 deploy-auto-scaling-hero.py        # \ud83d\udcc8 Main auto-scaling deployment\n\u251c\u2500\u2500 monitor-scaling.py                 # \ud83d\udcca Real-time scaling monitor\n\u251c\u2500\u2500 load-test.py                       # \u26a1 Load testing utility\n\u251c\u2500\u2500 requirements.txt                   # Python dependencies\n\u251c\u2500\u2500 participant-guide.md               # Step-by-step instructions\n\u251c\u2500\u2500 troubleshooting.md                 # Auto-scaling troubleshooting\n\u2514\u2500\u2500 docs/\n    \u251c\u2500\u2500 hpa-deep-dive.md               # HPA technical explanation\n    \u251c\u2500\u2500 scaling-best-practices.md      # Production scaling guide\n    \u2514\u2500\u2500 metrics-and-monitoring.md      # Monitoring setup guide\n</code></pre>"},{"location":"kubernetes/scenario_03_auto_scaling/#quick-start-for-participants","title":"\ud83d\ude80 QUICK START (For Participants)","text":""},{"location":"kubernetes/scenario_03_auto_scaling/#prerequisites","title":"Prerequisites","text":"<ul> <li>\u2705 Scenario 2 completed (secure todo app should still be running)</li> <li>\u2705 Kubernetes cluster with metrics-server (Docker Desktop includes this)</li> <li>\u2705 Python 3.10+ with required libraries</li> <li>\u2705 kubectl configured and working</li> </ul>"},{"location":"kubernetes/scenario_03_auto_scaling/#step-1-environment-setup-2-minutes","title":"Step 1: Environment Setup (2 minutes)","text":"<pre><code># Navigate to auto-scaling scenario\ncd scenarios/03-auto-scaling\n\n# Install auto-scaling dependencies\npip3 install -r requirements.txt\n\n# Verify metrics server is available\nkubectl top nodes\n</code></pre>"},{"location":"kubernetes/scenario_03_auto_scaling/#step-2-deploy-auto-scaling-challenge-5-minutes","title":"Step 2: Deploy Auto-scaling Challenge (5 minutes)","text":"<pre><code># Run the auto-scaling hero deployment\npython3 deploy-auto-scaling-hero.py\n</code></pre> <p>Expected Output:</p> <pre><code>\ud83d\udcc8 AUTO-SCALING HERO DEPLOYMENT STARTING\n======================================================================\n\ud83c\udfe0 Creating scaling challenge namespace: scaling-challenge\n\u2705 Scaling namespace created\n\ud83d\ude80 Deploying scalable demonstration application...\n\u2705 Scalable application deployed\n\u26a1 Deploying load testing application...\n\u2705 Load testing application deployed\n\ud83d\udcc8 Creating Horizontal Pod Autoscaler (HPA)...\n\u2705 HPA created with intelligent scaling policies\n\ud83c\udf10 Creating application services...\n\u2705 Services created for scaling demo and load testing\n\u23f3 Waiting for auto-scaling deployments to be ready...\n\u2705 scaling-demo-app ready! 1/1 pods\n\u2705 load-tester ready! 1/1 pods\n\ud83d\udcca Checking metrics server availability...\n\u2705 Metrics server is available\n\n======================================================================\n\ud83c\udf89 AUTO-SCALING HERO DEPLOYMENT SUCCESSFUL!\n\u2705 Interactive auto-scaling challenge ready!\n======================================================================\n\n\ud83c\udfaf ACCESS YOUR AUTO-SCALING CHALLENGE:\n   \ud83d\udcbb Primary: http://localhost:31003\n   \ud83d\udd27 Port Forward: kubectl port-forward svc/scaling-demo-service -n scaling-challenge 31503:80\n   \ud83c\udf0d Then access: http://localhost:31503\n</code></pre>"},{"location":"kubernetes/scenario_03_auto_scaling/#step-3-access-your-auto-scaling-challenge-immediate","title":"Step 3: Access Your Auto-scaling Challenge (Immediate)","text":"<p>The script provides environment-specific access methods:</p>"},{"location":"kubernetes/scenario_03_auto_scaling/#docker-desktop-environment","title":"\ud83d\udc33 Docker Desktop Environment:","text":"<pre><code>\ud83d\udcbb Primary: http://localhost:31003\n\ud83d\udd04 Fallback: Port forwarding (see universal access below)\n</code></pre>"},{"location":"kubernetes/scenario_03_auto_scaling/#minikube-environment","title":"\ud83c\udfaf Minikube Environment:","text":"<pre><code># Get Minikube IP and access\nminikube service scaling-demo-service -n scaling-challenge --url\n# Or use: http://$(minikube ip):31003\n</code></pre>"},{"location":"kubernetes/scenario_03_auto_scaling/#cloud-environment-eksgkeaks","title":"\u2601\ufe0f Cloud Environment (EKS/GKE/AKS):","text":"<pre><code># Get node external IP\nkubectl get nodes -o wide\n# Access: http://&lt;external-ip&gt;:31003\n</code></pre>"},{"location":"kubernetes/scenario_03_auto_scaling/#universal-access-always-works","title":"\ud83c\udf10 Universal Access (Always Works):","text":"<pre><code># Port forwarding - conflict-free with other services\nkubectl port-forward svc/scaling-demo-service -n scaling-challenge 31503:80\n# Then access: http://localhost:31503\n</code></pre>"},{"location":"kubernetes/scenario_03_auto_scaling/#step-4-interactive-load-testing-10-minutes","title":"Step 4: Interactive Load Testing (10 minutes)","text":"<ol> <li>\ud83d\udcca Open the Auto-scaling Dashboard:</li> <li>Access the application at the URL provided</li> <li>View the real-time scaling dashboard</li> <li> <p>Observe current pod count and resource usage</p> </li> <li> <p>\u26a1 Launch Chaos Agent Attacks:</p> </li> <li>Click \"Launch Traffic Spike\" button</li> <li>Watch pods scale up automatically</li> <li> <p>Monitor CPU usage and response times</p> </li> <li> <p>\ud83c\udfae Interactive Load Testing:</p> </li> <li>Use the load testing controls</li> <li>Adjust traffic intensity</li> <li> <p>Observe scaling behavior in real-time</p> </li> <li> <p>\ud83d\udcc8 Monitor Scaling Decisions:</p> </li> <li>Watch HPA metrics</li> <li>See scaling events</li> <li>Understand scaling policies</li> </ol>"},{"location":"kubernetes/scenario_03_auto_scaling/#step-5-real-time-scaling-monitor-5-minutes","title":"Step 5: Real-time Scaling Monitor (5 minutes)","text":"<pre><code># Run the scaling monitor\npython3 monitor-scaling.py\n\n# Choose monitoring options:\n# 1 = Current scaling status\n# 2 = HPA metrics analysis\n# 3 = Resource usage tracking\n# 4 = Continuous monitoring\n</code></pre>"},{"location":"kubernetes/scenario_03_auto_scaling/#live-demo-walkthrough-for-instructors","title":"\ud83c\udfac LIVE DEMO WALKTHROUGH (For Instructors)","text":""},{"location":"kubernetes/scenario_03_auto_scaling/#demo-script-overview","title":"Demo Script Overview","text":""},{"location":"kubernetes/scenario_03_auto_scaling/#part-1-chaos-agents-resource-attack-3-minutes","title":"Part 1: Chaos Agent's Resource Attack (3 minutes)","text":"<pre><code># Show the resource exhaustion chaos\n./demo-script.sh\n</code></pre> <p>What Students See: 1. Static deployment overwhelmed by traffic 2. Manual scaling too slow to respond 3. Application crashes under load 4. \"This is what happens without auto-scaling!\"</p>"},{"location":"kubernetes/scenario_03_auto_scaling/#part-2-auto-scaling-hero-saves-the-day-4-minutes","title":"Part 2: Auto-scaling Hero Saves the Day (4 minutes)","text":"<pre><code># Deploy the auto-scaling solution\npython3 deploy-auto-scaling-hero.py\n</code></pre> <p>Key Teaching Points: - \ud83d\udcc8 HPA automatically scales based on CPU - \ud83d\udcc8 Smart scaling policies prevent thrashing - \ud83d\udcc8 Resource optimization for efficiency - \ud83d\udcc8 Real-time monitoring and visibility</p>"},{"location":"kubernetes/scenario_03_auto_scaling/#part-3-interactive-chaos-testing-3-minutes","title":"Part 3: Interactive Chaos Testing (3 minutes)","text":"<ul> <li>Launch traffic spikes</li> <li>Watch automatic scaling</li> <li>Demonstrate load testing</li> <li>Show scaling efficiency</li> </ul>"},{"location":"kubernetes/scenario_03_auto_scaling/#hpa-configuration","title":"\ud83d\udcc8 HPA CONFIGURATION","text":""},{"location":"kubernetes/scenario_03_auto_scaling/#horizontal-pod-autoscaler-setup","title":"Horizontal Pod Autoscaler Setup","text":"<pre><code>apiVersion: autoscaling/v2\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: scaling-demo-hpa\n  namespace: scaling-challenge\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: scaling-demo-app\n  minReplicas: 1\n  maxReplicas: 10\n  metrics:\n  - type: Resource\n    resource:\n      name: cpu\n      target:\n        type: Utilization\n        averageUtilization: 70\n  - type: Resource\n    resource:\n      name: memory\n      target:\n        type: Utilization\n        averageUtilization: 80\n  behavior:\n    scaleUp:\n      stabilizationWindowSeconds: 0\n      policies:\n      - type: Percent\n        value: 100\n        periodSeconds: 15\n    scaleDown:\n      stabilizationWindowSeconds: 300\n      policies:\n      - type: Percent\n        value: 10\n        periodSeconds: 60\n</code></pre>"},{"location":"kubernetes/scenario_03_auto_scaling/#resource-requests-and-limits","title":"Resource Requests and Limits","text":"<pre><code>resources:\n  requests:\n    cpu: 100m\n    memory: 128Mi\n  limits:\n    cpu: 500m\n    memory: 256Mi\n</code></pre>"},{"location":"kubernetes/scenario_03_auto_scaling/#auto-scaling-testing","title":"\ud83e\uddea AUTO-SCALING TESTING","text":""},{"location":"kubernetes/scenario_03_auto_scaling/#test-1-traffic-spike-simulation","title":"Test 1: Traffic Spike Simulation","text":"<pre><code># Generate load to trigger scaling\nkubectl run load-generator --image=busybox --command -- sh -c \"while true; do wget -qO- http://scaling-demo-service.scaling-challenge.svc.cluster.local; done\"\n\n# Watch pods scale up\nkubectl get pods -n scaling-challenge -w\n</code></pre>"},{"location":"kubernetes/scenario_03_auto_scaling/#test-2-hpa-metrics-verification","title":"Test 2: HPA Metrics Verification","text":"<pre><code># Check HPA status\nkubectl get hpa -n scaling-challenge\n\n# View HPA details\nkubectl describe hpa scaling-demo-hpa -n scaling-challenge\n</code></pre>"},{"location":"kubernetes/scenario_03_auto_scaling/#test-3-scale-down-test","title":"Test 3: Scale Down Test","text":"<pre><code># Stop load generation\nkubectl delete pod load-generator\n\n# Watch pods scale down\nkubectl get pods -n scaling-challenge -w\n</code></pre>"},{"location":"kubernetes/scenario_03_auto_scaling/#test-4-resource-pressure-test","title":"Test 4: Resource Pressure Test","text":"<pre><code># Create CPU pressure\nkubectl run cpu-stress --image=busybox --requests=cpu=1000m --limits=cpu=2000m --command -- stress --cpu 4\n\n# Watch scaling response\nkubectl top pods -n scaling-challenge\n</code></pre>"},{"location":"kubernetes/scenario_03_auto_scaling/#scaling-monitoring","title":"\ud83d\udcca SCALING MONITORING","text":""},{"location":"kubernetes/scenario_03_auto_scaling/#real-time-scaling-dashboard","title":"Real-time Scaling Dashboard","text":"<pre><code># Run scaling monitor\npython3 monitor-scaling.py\n\n# Features:\n# - Current pod count and target\n# - CPU and memory utilization\n# - Scaling events and history\n# - Performance metrics\n# - Resource efficiency analysis\n</code></pre>"},{"location":"kubernetes/scenario_03_auto_scaling/#hpa-metrics-analysis","title":"HPA Metrics Analysis","text":"<pre><code># Check HPA metrics\nkubectl get hpa scaling-demo-hpa -n scaling-challenge -o yaml\n\n# View scaling events\nkubectl get events -n scaling-challenge --sort-by='.lastTimestamp' | grep HPA\n</code></pre>"},{"location":"kubernetes/scenario_03_auto_scaling/#resource-usage-tracking","title":"Resource Usage Tracking","text":"<pre><code># Monitor resource usage\nkubectl top pods -n scaling-challenge\n\n# Check node resource allocation\nkubectl top nodes\n</code></pre>"},{"location":"kubernetes/scenario_03_auto_scaling/#success-criteria","title":"\ud83c\udfaf SUCCESS CRITERIA","text":""},{"location":"kubernetes/scenario_03_auto_scaling/#scenario-03-complete-checklist","title":"\u2705 Scenario 03 Complete Checklist:","text":"<ul> <li>\u2705 Auto-scaling application deployed successfully</li> <li>\u2705 HPA configured with intelligent policies</li> <li>\u2705 Load testing platform operational</li> <li>\u2705 Real-time scaling dashboard working</li> <li>\u2705 Traffic spike handling verified</li> <li>\u2705 Scale down efficiency confirmed</li> <li>\u2705 Chaos Agent's resource attacks defeated! \u26a1</li> </ul>"},{"location":"kubernetes/scenario_03_auto_scaling/#key-learning-outcomes","title":"Key Learning Outcomes:","text":"<ul> <li>\u2705 HPA Configuration - Mastered auto-scaling setup</li> <li>\u2705 Resource Management - Optimized requests and limits</li> <li>\u2705 Scaling Policies - Implemented smart scaling behavior</li> <li>\u2705 Load Testing - Experienced real-time scaling</li> <li>\u2705 Performance Monitoring - Tracked scaling efficiency</li> <li>\u2705 Chaos Resilience - Survived resource exhaustion attacks</li> </ul>"},{"location":"kubernetes/scenario_03_auto_scaling/#next-steps","title":"\ud83d\ude80 NEXT STEPS","text":""},{"location":"kubernetes/scenario_03_auto_scaling/#whats-next","title":"What's Next:","text":"<ol> <li>Scenario 04: Blue-Green Deployment Strategies</li> <li>Scenario 05: GitOps with ArgoCD and Argo Rollouts</li> </ol>"},{"location":"kubernetes/scenario_03_auto_scaling/#production-auto-scaling","title":"Production Auto-scaling:","text":"<ul> <li>Apply these HPA patterns to production applications</li> <li>Implement custom metrics for application-specific scaling</li> <li>Add predictive scaling based on historical patterns</li> <li>Regular load testing and capacity planning</li> </ul>"},{"location":"kubernetes/scenario_03_auto_scaling/#troubleshooting","title":"\ud83c\udd98 TROUBLESHOOTING","text":""},{"location":"kubernetes/scenario_03_auto_scaling/#common-auto-scaling-issues","title":"Common Auto-scaling Issues:","text":""},{"location":"kubernetes/scenario_03_auto_scaling/#issue-hpa-not-scaling","title":"Issue: HPA not scaling","text":"<pre><code># Solution: Check metrics server\nkubectl top nodes\nkubectl top pods -n scaling-challenge\n</code></pre>"},{"location":"kubernetes/scenario_03_auto_scaling/#issue-pods-not-scaling-up","title":"Issue: Pods not scaling up","text":"<pre><code># Solution: Check HPA configuration\nkubectl describe hpa scaling-demo-hpa -n scaling-challenge\n</code></pre>"},{"location":"kubernetes/scenario_03_auto_scaling/#issue-scaling-too-aggressively","title":"Issue: Scaling too aggressively","text":"<pre><code># Solution: Adjust scaling policies\nkubectl patch hpa scaling-demo-hpa -n scaling-challenge --type='merge' -p='{\"spec\":{\"behavior\":{\"scaleUp\":{\"stabilizationWindowSeconds\":60}}}}'\n</code></pre>"},{"location":"kubernetes/scenario_03_auto_scaling/#issue-resource-limits-too-low","title":"Issue: Resource limits too low","text":"<pre><code># Solution: Increase resource limits\nkubectl patch deployment scaling-demo-app -n scaling-challenge --type='merge' -p='{\"spec\":{\"template\":{\"spec\":{\"containers\":[{\"name\":\"app\",\"resources\":{\"limits\":{\"cpu\":\"1000m\",\"memory\":\"512Mi\"}}}]}}}}'\n</code></pre>"},{"location":"kubernetes/scenario_03_auto_scaling/#conclusion","title":"\ud83c\udf89 CONCLUSION","text":"<p>Congratulations! You've successfully defeated Chaos Agent's resource exhaustion attacks! \u26a1</p>"},{"location":"kubernetes/scenario_03_auto_scaling/#what-youve-accomplished","title":"What You've Accomplished:","text":"<ul> <li>\u2705 Implemented intelligent auto-scaling with HPA</li> <li>\u2705 Built real-time load testing platform</li> <li>\u2705 Created comprehensive scaling monitoring</li> <li>\u2705 Proven chaos resilience through testing</li> <li>\u2705 Optimized resource management for efficiency</li> </ul>"},{"location":"kubernetes/scenario_03_auto_scaling/#key-auto-scaling-takeaways","title":"Key Auto-scaling Takeaways:","text":"<ul> <li>HPA provides intelligent scaling based on metrics</li> <li>Resource optimization prevents waste and improves performance</li> <li>Real-time monitoring enables proactive scaling</li> <li>Load testing validates scaling behavior</li> <li>Smart scaling policies prevent thrashing</li> </ul> <p>You're now ready for the next challenge: Blue-Green Deployments! \ud83d\udd04</p> <p>Remember: In the world of Kubernetes auto-scaling, intelligence and automation are your weapons against chaos! \ud83d\udcc8 </p>"},{"location":"kubernetes/scenario_04_blue_green/","title":"\ud83d\udd04 Scenario 04: Blue-Green Deployment Hero","text":"<p>\"Visual, Interactive Deployment Strategies Defeat Chaos!\"</p>"},{"location":"kubernetes/scenario_04_blue_green/#scenario-overview","title":"\ud83d\udcd6 SCENARIO OVERVIEW","text":""},{"location":"kubernetes/scenario_04_blue_green/#the-deployment-challenge","title":"The Deployment Challenge","text":"<p>Chaos Agent has discovered that manual deployments are causing service downtime and user complaints! Deployment failures lead to user errors, and there's no rollback capability when things go wrong. Your team needs a visual, interactive way to manage deployment strategies with zero downtime.</p>"},{"location":"kubernetes/scenario_04_blue_green/#the-deployment-hero-solution","title":"The Deployment Hero Solution","text":"<p>Deploy a visual, interactive demonstration showcasing multiple Kubernetes deployment strategies including Blue-Green, Rolling, and Canary deployments with real-time pod management and self-healing capabilities. Experience deployment strategies that ensure zero downtime and instant rollbacks!</p>"},{"location":"kubernetes/scenario_04_blue_green/#what-youll-build","title":"What You'll Build","text":"<ul> <li>\ud83d\udd04 Visual &amp; Interactive Deployment Demo with real-time pod visualization</li> <li>\ud83d\udd35\ud83d\udd34 Blue-Green Deployment Strategy with instant traffic switching</li> <li>\ud83d\udcc8 Progressive Rollout Strategy with gradual pod replacement</li> <li>\ud83c\udfaf Canary Deployment Strategy with safe testing approach</li> <li>\ud83d\udee1\ufe0f Self-Healing Demonstrations with automatic pod recreation</li> </ul>"},{"location":"kubernetes/scenario_04_blue_green/#time-allocation","title":"\u23f1\ufe0f TIME ALLOCATION","text":"Activity Duration Type Live Demo (Instructor) 10 minutes \ud83d\udc40 Watch Your Deployment Setup 5 minutes \ud83d\udee0\ufe0f Hands-on Interactive Strategy Testing 15 minutes \ud83c\udfae Interactive Self-Healing Demonstrations 5 minutes \ud83d\udee1\ufe0f Testing Total 35 minutes"},{"location":"kubernetes/scenario_04_blue_green/#learning-objectives","title":"\ud83c\udfaf LEARNING OBJECTIVES","text":"<p>By completing this scenario, you will:</p> <p>\u2705 Master multiple Kubernetes deployment strategies \u2705 Understand zero-downtime deployment techniques \u2705 Experience visual deployment management \u2705 Learn self-healing and high availability concepts \u2705 Implement instant rollback capabilities \u2705 Defeat Chaos Agent's deployment downtime attacks! \ud83d\udd04</p>"},{"location":"kubernetes/scenario_04_blue_green/#the-chaos-agents-deployment-attack","title":"\ud83e\udde8 THE CHAOS AGENT'S DEPLOYMENT ATTACK","text":"<p>\"Deployment failed! Users are seeing errors! Your manual deployments are causing downtime and user complaints! Your deployment process is a mess!\" \ud83d\ude08</p> <p>What Chaos Agent Exploits: - \u274c Manual deployments causing service downtime - \u274c No rollback capability when deployments fail - \u274c Users experience errors during updates - \u274c No testing environment for new versions - \u274c Single point of failure during deployments - \u274c No visual feedback on deployment progress</p>"},{"location":"kubernetes/scenario_04_blue_green/#the-deployment-heros-response","title":"\ud83e\uddb8\u200d\u2642\ufe0f THE DEPLOYMENT HERO'S RESPONSE","text":"<p>\"Not anymore! My visual, interactive deployment strategies will ensure zero-downtime updates and instant rollbacks. Watch as I demonstrate multiple deployment strategies with real-time pod management!\" \ud83e\uddb8\u200d\u2642\ufe0f\ud83d\udd04</p> <p>How Deployment Hero Wins: - \u2705 Visual deployment management - Real-time pod visualization - \u2705 Zero-downtime deployments - Blue-green traffic switching - \u2705 Instant rollback capability - One-click reversion - \u2705 Self-healing demonstrations - Automatic pod recreation - \u2705 Multiple strategy support - Blue-green, rolling, canary - \u2705 Interactive controls - Real-time strategy switching - \u2705 Health monitoring - Live status updates</p>"},{"location":"kubernetes/scenario_04_blue_green/#file-structure","title":"\ud83d\udcc1 FILE STRUCTURE","text":"<pre><code>scenarios/04-blue-green/\n\u251c\u2500\u2500 README.md                          # This comprehensive guide\n\u251c\u2500\u2500 deploy-strategies.sh               # Deployment strategy management\n\u251c\u2500\u2500 backend/\n\u2502   \u251c\u2500\u2500 app.py                        # Flask API with K8s integration\n\u2502   \u251c\u2500\u2500 requirements.txt              # Python dependencies\n\u2502   \u2514\u2500\u2500 Dockerfile                    # Backend container\n\u251c\u2500\u2500 frontend/\n\u2502   \u251c\u2500\u2500 src/                          # React TypeScript application\n\u2502   \u251c\u2500\u2500 package.json                  # Node.js dependencies\n\u2502   \u2514\u2500\u2500 Dockerfile                    # Frontend container\n\u251c\u2500\u2500 k8s/\n\u2502   \u251c\u2500\u2500 blue-deployment.yaml          # Blue deployment (stable)\n\u2502   \u251c\u2500\u2500 green-deployment.yaml         # Green deployment (new)\n\u2502   \u251c\u2500\u2500 service.yaml                  # Load balancer service\n\u2502   \u2514\u2500\u2500 rbac.yaml                     # RBAC permissions\n\u2514\u2500\u2500 docker-compose.yml                # Local development setup\n</code></pre>"},{"location":"kubernetes/scenario_04_blue_green/#quick-start-for-participants","title":"\ud83d\ude80 QUICK START (For Participants)","text":""},{"location":"kubernetes/scenario_04_blue_green/#prerequisites","title":"Prerequisites","text":"<ul> <li>\u2705 Scenario 3 completed (auto-scaling should still be running)</li> <li>\u2705 Kubernetes cluster running (Docker Desktop, Minikube, or cloud)</li> <li>\u2705 Node.js installed for frontend development</li> <li>\u2705 kubectl configured and working</li> </ul>"},{"location":"kubernetes/scenario_04_blue_green/#step-1-environment-setup-2-minutes","title":"Step 1: Environment Setup (2 minutes)","text":"<pre><code># Navigate to blue-green scenario\ncd scenarios/04-blue-green\n\n# Install backend dependencies\npip3 install -r backend/requirements.txt\n\n# Install frontend dependencies\ncd frontend\nnpm install\ncd ..\n</code></pre>"},{"location":"kubernetes/scenario_04_blue_green/#step-2-deploy-blue-green-demo-3-minutes","title":"Step 2: Deploy Blue-Green Demo (3 minutes)","text":"<pre><code># Apply Kubernetes manifests\nkubectl apply -f k8s/\n\n# Start the backend API\ncd backend\npython app.py &amp;\ncd ..\n\n# Start the frontend\ncd frontend\nnpm start &amp;\ncd ..\n</code></pre> <p>Expected Output:</p> <pre><code>\ud83d\udd04 BLUE-GREEN DEPLOYMENT DEMO STARTING\n======================================================================\n\ud83c\udfe0 Creating namespace: deployment-demo\n\u2705 Namespace created\n\ud83d\udd35 Deploying blue deployment (stable version)...\n\u2705 Blue deployment ready\n\ud83d\udd34 Deploying green deployment (new version)...\n\u2705 Green deployment ready\n\ud83c\udf10 Creating load balancer service...\n\u2705 Service created\n\ud83d\ude80 Starting backend API...\n\u2705 Backend API running on port 5000\n\ud83c\udfa8 Starting frontend application...\n\u2705 Frontend running on port 3000\n\n======================================================================\n\ud83c\udf89 BLUE-GREEN DEPLOYMENT DEMO READY!\n\u2705 Interactive deployment strategies available!\n======================================================================\n\n\ud83c\udfaf ACCESS YOUR DEPLOYMENT DEMO:\n   \ud83d\udcbb Frontend: http://localhost:3000\n   \ud83d\udd27 Backend API: http://localhost:5000\n   \u2638\ufe0f Kubernetes: kubectl get pods -n deployment-demo\n</code></pre>"},{"location":"kubernetes/scenario_04_blue_green/#step-3-access-your-deployment-demo-immediate","title":"Step 3: Access Your Deployment Demo (Immediate)","text":""},{"location":"kubernetes/scenario_04_blue_green/#frontend-application","title":"\ud83c\udf10 Frontend Application:","text":"<pre><code>\ud83d\udcbb Primary: http://localhost:3000\n</code></pre>"},{"location":"kubernetes/scenario_04_blue_green/#backend-api","title":"\ud83d\udd27 Backend API:","text":"<pre><code>\ud83d\udd27 API: http://localhost:5000\n</code></pre>"},{"location":"kubernetes/scenario_04_blue_green/#kubernetes-dashboard","title":"\u2638\ufe0f Kubernetes Dashboard:","text":"<pre><code># Check deployment status\nkubectl get pods -n deployment-demo\n\n# View services\nkubectl get svc -n deployment-demo\n\n# Monitor deployments\nkubectl get deployments -n deployment-demo\n</code></pre>"},{"location":"kubernetes/scenario_04_blue_green/#step-4-interactive-deployment-strategies-15-minutes","title":"Step 4: Interactive Deployment Strategies (15 minutes)","text":"<ol> <li>\ud83d\udd35\ud83d\udd34 Blue-Green Switch:</li> <li>Click \"Switch to Green\" button</li> <li>Watch all pods become green instantly</li> <li> <p>Experience zero-downtime deployment</p> </li> <li> <p>\ud83d\udcc8 Progressive Rollout:</p> </li> <li>Click \"Progressive Rollout\" button</li> <li>Observe pods gradually change from blue to green</li> <li> <p>See controlled, gradual deployment</p> </li> <li> <p>\ud83c\udfaf Canary Testing:</p> </li> <li>Click \"Canary Deployment\" button</li> <li>See 2 green pods among 8 blue pods</li> <li> <p>Experience safe testing with minimal risk</p> </li> <li> <p>\ud83d\udd04 Reset to 50/50:</p> </li> <li>Click \"Reset to 50/50\" button</li> <li>Return to balanced state with 5 blue and 5 green pods</li> </ol>"},{"location":"kubernetes/scenario_04_blue_green/#step-5-self-healing-demonstrations-5-minutes","title":"Step 5: Self-Healing Demonstrations (5 minutes)","text":"<ol> <li>\ud83d\udde1\ufe0f Kill Pod Test:</li> <li>Click \"\ud83d\udde1\ufe0f Kill Pod\" button on any pod</li> <li>Watch the pod disappear</li> <li> <p>Observe Kubernetes recreate it automatically</p> </li> <li> <p>\ud83d\udee1\ufe0f Health Monitoring:</p> </li> <li>Monitor real-time health status updates</li> <li>See color-coded status indicators</li> <li>Experience automatic health checks</li> </ol>"},{"location":"kubernetes/scenario_04_blue_green/#live-demo-walkthrough-for-instructors","title":"\ud83c\udfac LIVE DEMO WALKTHROUGH (For Instructors)","text":""},{"location":"kubernetes/scenario_04_blue_green/#demo-script-overview","title":"Demo Script Overview","text":""},{"location":"kubernetes/scenario_04_blue_green/#part-1-deployment-chaos-exposed-3-minutes","title":"Part 1: Deployment Chaos Exposed (3 minutes)","text":"<pre><code># Show deployment failures\n./demo-script.sh\n</code></pre> <p>What Students See: 1. Manual deployment causing downtime 2. Users experiencing errors 3. No rollback capability 4. \"This is deployment chaos!\"</p>"},{"location":"kubernetes/scenario_04_blue_green/#part-2-deployment-hero-saves-the-day-4-minutes","title":"Part 2: Deployment Hero Saves the Day (4 minutes)","text":"<pre><code># Deploy the visual demo\nkubectl apply -f k8s/\npython backend/app.py &amp;\ncd frontend &amp;&amp; npm start &amp;\n</code></pre> <p>Key Teaching Points: - \ud83d\udd04 Visual deployment management - \ud83d\udd04 Zero-downtime strategies - \ud83d\udd04 Instant rollback capability - \ud83d\udd04 Self-healing demonstrations</p>"},{"location":"kubernetes/scenario_04_blue_green/#part-3-interactive-strategy-testing-3-minutes","title":"Part 3: Interactive Strategy Testing (3 minutes)","text":"<ul> <li>Demonstrate blue-green switching</li> <li>Show progressive rollout</li> <li>Test canary deployment</li> <li>Highlight self-healing</li> </ul>"},{"location":"kubernetes/scenario_04_blue_green/#deployment-strategies","title":"\ud83d\udd04 DEPLOYMENT STRATEGIES","text":""},{"location":"kubernetes/scenario_04_blue_green/#1-blue-green-deployment","title":"1. Blue-Green Deployment","text":"<pre><code># Blue deployment (stable)\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: blue-deployment\n  namespace: deployment-demo\nspec:\n  replicas: 5\n  selector:\n    matchLabels:\n      app: demo-app\n      version: blue\n  template:\n    metadata:\n      labels:\n        app: demo-app\n        version: blue\n    spec:\n      containers:\n      - name: app\n        image: demo-app:blue\n        ports:\n        - containerPort: 8080\n\n# Green deployment (new)\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: green-deployment\n  namespace: deployment-demo\nspec:\n  replicas: 0  # Start with 0 replicas\n  selector:\n    matchLabels:\n      app: demo-app\n      version: green\n  template:\n    metadata:\n      labels:\n        app: demo-app\n        version: green\n    spec:\n      containers:\n      - name: app\n        image: demo-app:green\n        ports:\n        - containerPort: 8080\n</code></pre>"},{"location":"kubernetes/scenario_04_blue_green/#2-service-configuration","title":"2. Service Configuration","text":"<pre><code>apiVersion: v1\nkind: Service\nmetadata:\n  name: demo-service\n  namespace: deployment-demo\nspec:\n  selector:\n    app: demo-app\n    version: blue  # Initially route to blue\n  ports:\n  - port: 80\n    targetPort: 8080\n  type: ClusterIP\n</code></pre>"},{"location":"kubernetes/scenario_04_blue_green/#3-deployment-strategy-script","title":"3. Deployment Strategy Script","text":"<pre><code>#!/bin/bash\n# deploy-strategies.sh\n\ncase $1 in\n  \"blue-green\")\n    # Switch to blue-green (5 blue, 5 green)\n    kubectl scale deployment blue-deployment --replicas=5 -n deployment-demo\n    kubectl scale deployment green-deployment --replicas=5 -n deployment-demo\n    ;;\n  \"green\")\n    # Switch to green (0 blue, 10 green)\n    kubectl scale deployment blue-deployment --replicas=0 -n deployment-demo\n    kubectl scale deployment green-deployment --replicas=10 -n deployment-demo\n    kubectl patch service demo-service -n deployment-demo --type='merge' -p='{\"spec\":{\"selector\":{\"version\":\"green\"}}}'\n    ;;\n  \"rollout\")\n    # Progressive rollout (3 blue, 7 green)\n    kubectl scale deployment blue-deployment --replicas=3 -n deployment-demo\n    kubectl scale deployment green-deployment --replicas=7 -n deployment-demo\n    ;;\n  \"canary\")\n    # Canary deployment (8 blue, 2 green)\n    kubectl scale deployment blue-deployment --replicas=8 -n deployment-demo\n    kubectl scale deployment green-deployment --replicas=2 -n deployment-demo\n    ;;\n  \"kill\")\n    # Kill random pod\n    kubectl get pods -n deployment-demo -o name | shuf -n 1 | xargs kubectl delete\n    ;;\nesac\n</code></pre>"},{"location":"kubernetes/scenario_04_blue_green/#deployment-testing","title":"\ud83e\uddea DEPLOYMENT TESTING","text":""},{"location":"kubernetes/scenario_04_blue_green/#test-1-blue-green-switch","title":"Test 1: Blue-Green Switch","text":"<pre><code># Switch to green deployment\n./deploy-strategies.sh green\n\n# Verify traffic routing\nkubectl get endpoints -n deployment-demo\n</code></pre>"},{"location":"kubernetes/scenario_04_blue_green/#test-2-progressive-rollout","title":"Test 2: Progressive Rollout","text":"<pre><code># Start progressive rollout\n./deploy-strategies.sh rollout\n\n# Watch gradual transition\nkubectl get pods -n deployment-demo -w\n</code></pre>"},{"location":"kubernetes/scenario_04_blue_green/#test-3-canary-testing","title":"Test 3: Canary Testing","text":"<pre><code># Deploy canary version\n./deploy-strategies.sh canary\n\n# Test with limited traffic\ncurl http://demo-service.deployment-demo.svc.cluster.local\n</code></pre>"},{"location":"kubernetes/scenario_04_blue_green/#test-4-self-healing","title":"Test 4: Self-Healing","text":"<pre><code># Kill a random pod\n./deploy-strategies.sh kill\n\n# Watch automatic recreation\nkubectl get pods -n deployment-demo -w\n</code></pre>"},{"location":"kubernetes/scenario_04_blue_green/#deployment-monitoring","title":"\ud83d\udcca DEPLOYMENT MONITORING","text":""},{"location":"kubernetes/scenario_04_blue_green/#real-time-pod-visualization","title":"Real-time Pod Visualization","text":"<pre><code># Watch pod status\nkubectl get pods -n deployment-demo -w\n\n# Monitor deployment status\nkubectl get deployments -n deployment-demo -w\n\n# Check service endpoints\nkubectl get endpoints -n deployment-demo\n</code></pre>"},{"location":"kubernetes/scenario_04_blue_green/#health-monitoring","title":"Health Monitoring","text":"<pre><code># Check pod health\nkubectl describe pods -n deployment-demo\n\n# View application logs\nkubectl logs -f deployment/blue-deployment -n deployment-demo\nkubectl logs -f deployment/green-deployment -n deployment-demo\n</code></pre>"},{"location":"kubernetes/scenario_04_blue_green/#performance-metrics","title":"Performance Metrics","text":"<pre><code># Monitor resource usage\nkubectl top pods -n deployment-demo\n\n# Check network connectivity\nkubectl exec -it deployment/blue-deployment -n deployment-demo -- curl -I http://demo-service\n</code></pre>"},{"location":"kubernetes/scenario_04_blue_green/#success-criteria","title":"\ud83c\udfaf SUCCESS CRITERIA","text":""},{"location":"kubernetes/scenario_04_blue_green/#scenario-04-complete-checklist","title":"\u2705 Scenario 04 Complete Checklist:","text":"<ul> <li>\u2705 Blue-green deployment demo deployed successfully</li> <li>\u2705 Visual pod management interface working</li> <li>\u2705 Blue-green switching operational</li> <li>\u2705 Progressive rollout functional</li> <li>\u2705 Canary deployment working</li> <li>\u2705 Self-healing demonstrations verified</li> <li>\u2705 Zero-downtime deployments confirmed</li> <li>\u2705 Chaos Agent's deployment attacks defeated! \ud83d\udd04</li> </ul>"},{"location":"kubernetes/scenario_04_blue_green/#key-learning-outcomes","title":"Key Learning Outcomes:","text":"<ul> <li>\u2705 Multiple Deployment Strategies - Mastered blue-green, rolling, canary</li> <li>\u2705 Zero-Downtime Deployments - Implemented seamless updates</li> <li>\u2705 Visual Management - Experienced interactive deployment control</li> <li>\u2705 Self-Healing - Understood automatic pod recreation</li> <li>\u2705 Instant Rollback - Implemented quick reversion capability</li> <li>\u2705 Health Monitoring - Applied real-time status tracking</li> </ul>"},{"location":"kubernetes/scenario_04_blue_green/#next-steps","title":"\ud83d\ude80 NEXT STEPS","text":""},{"location":"kubernetes/scenario_04_blue_green/#whats-next","title":"What's Next:","text":"<ol> <li>Scenario 05: GitOps with ArgoCD and Argo Rollouts</li> </ol>"},{"location":"kubernetes/scenario_04_blue_green/#production-deployment-strategies","title":"Production Deployment Strategies:","text":"<ul> <li>Apply these deployment patterns to production applications</li> <li>Implement automated deployment pipelines</li> <li>Add comprehensive health monitoring</li> <li>Regular deployment strategy testing</li> </ul>"},{"location":"kubernetes/scenario_04_blue_green/#troubleshooting","title":"\ud83c\udd98 TROUBLESHOOTING","text":""},{"location":"kubernetes/scenario_04_blue_green/#common-deployment-issues","title":"Common Deployment Issues:","text":""},{"location":"kubernetes/scenario_04_blue_green/#issue-pods-not-switching-colors","title":"Issue: Pods not switching colors","text":"<pre><code># Solution: Check deployment labels\nkubectl get pods -n deployment-demo --show-labels\n</code></pre>"},{"location":"kubernetes/scenario_04_blue_green/#issue-service-not-routing-traffic","title":"Issue: Service not routing traffic","text":"<pre><code># Solution: Check service selector\nkubectl describe service demo-service -n deployment-demo\n</code></pre>"},{"location":"kubernetes/scenario_04_blue_green/#issue-frontend-not-connecting-to-backend","title":"Issue: Frontend not connecting to backend","text":"<pre><code># Solution: Check API connectivity\nkubectl exec -it deployment/blue-deployment -n deployment-demo -- curl http://demo-service\n</code></pre>"},{"location":"kubernetes/scenario_04_blue_green/#issue-self-healing-not-working","title":"Issue: Self-healing not working","text":"<pre><code># Solution: Check pod events\nkubectl get events -n deployment-demo --sort-by='.lastTimestamp'\n</code></pre>"},{"location":"kubernetes/scenario_04_blue_green/#conclusion","title":"\ud83c\udf89 CONCLUSION","text":"<p>Congratulations! You've successfully defeated Chaos Agent's deployment attacks! \ud83d\udd04</p>"},{"location":"kubernetes/scenario_04_blue_green/#what-youve-accomplished","title":"What You've Accomplished:","text":"<ul> <li>\u2705 Implemented multiple deployment strategies (blue-green, rolling, canary)</li> <li>\u2705 Created visual, interactive deployment management</li> <li>\u2705 Achieved zero-downtime deployments</li> <li>\u2705 Built instant rollback capabilities</li> <li>\u2705 Demonstrated self-healing and high availability</li> </ul>"},{"location":"kubernetes/scenario_04_blue_green/#key-deployment-takeaways","title":"Key Deployment Takeaways:","text":"<ul> <li>Multiple strategies provide flexibility for different scenarios</li> <li>Zero-downtime deployments ensure continuous service availability</li> <li>Visual management improves deployment control and understanding</li> <li>Self-healing provides automatic recovery from failures</li> <li>Instant rollback enables quick recovery from deployment issues</li> </ul> <p>You're now ready for the final challenge: GitOps with ArgoCD! \ud83d\ude80</p> <p>Remember: In the world of Kubernetes deployments, strategy and automation are your weapons against chaos! \ud83d\udd04 </p>"},{"location":"kubernetes/scenario_05_gitops_argocd/","title":"\ud83d\ude80 Scenario 05: GitOps with ArgoCD &amp; Argo Rollouts","text":"<p>\"Enterprise-Grade GitOps Defeats Deployment Chaos!\"</p>"},{"location":"kubernetes/scenario_05_gitops_argocd/#scenario-overview","title":"\ud83d\udcd6 SCENARIO OVERVIEW","text":""},{"location":"kubernetes/scenario_05_gitops_argocd/#the-gitops-challenge","title":"The GitOps Challenge","text":"<p>Chaos Agent has discovered that manual deployments lead to environment drift and inconsistent configurations! Different environments have different configurations, teams can't track what's deployed where, and the deployment process is a mess. There's no audit trail and no automated rollback capabilities.</p>"},{"location":"kubernetes/scenario_05_gitops_argocd/#the-gitops-hero-solution","title":"The GitOps Hero Solution","text":"<p>Deploy an enterprise-grade GitOps system using ArgoCD and Argo Rollouts that provides declarative, automated, and visual deployment management. Experience advanced deployment strategies with real-time monitoring and comprehensive dashboards!</p>"},{"location":"kubernetes/scenario_05_gitops_argocd/#what-youll-build","title":"What You'll Build","text":"<ul> <li>\ud83d\ude80 ArgoCD Application Management with declarative GitOps workflows</li> <li>\ud83d\udcca Argo Rollouts Dashboard for visual deployment strategies</li> <li>\ud83c\udfad Canary Deployment with gradual traffic shifting (25% \u2192 50% \u2192 75% \u2192 100%)</li> <li>\ud83d\udd35\ud83d\udd34 Blue-Green Deployment with environment switching and manual promotion</li> <li>\ud83d\udd04 Rolling Update Strategy with pod-by-pod updates</li> <li>\ud83d\udc41\ufe0f Real-time Monitoring with comprehensive dashboards</li> </ul>"},{"location":"kubernetes/scenario_05_gitops_argocd/#time-allocation","title":"\u23f1\ufe0f TIME ALLOCATION","text":"Activity Duration Type Live Demo (Instructor) 10 minutes \ud83d\udc40 Watch ArgoCD &amp; Argo Rollouts Setup 5 minutes \ud83d\udee0\ufe0f Hands-on Interactive Deployment Strategies 15 minutes \ud83c\udfae Interactive Dashboard Monitoring 5 minutes \ud83d\udcca Analysis Total 35 minutes"},{"location":"kubernetes/scenario_05_gitops_argocd/#learning-objectives","title":"\ud83c\udfaf LEARNING OBJECTIVES","text":"<p>By completing this scenario, you will:</p> <p>\u2705 Master GitOps principles and ArgoCD workflows \u2705 Implement advanced deployment strategies with Argo Rollouts \u2705 Experience visual deployment management and monitoring \u2705 Learn enterprise-grade deployment automation \u2705 Understand declarative infrastructure management \u2705 Defeat Chaos Agent's deployment inconsistency attacks! \ud83d\ude80</p>"},{"location":"kubernetes/scenario_05_gitops_argocd/#the-chaos-agents-gitops-attack","title":"\ud83e\udde8 THE CHAOS AGENT'S GITOPS ATTACK","text":"<p>\"Your manual deployments are inconsistent! Different environments have different configurations! Your team can't track what's deployed where! Your deployment process is a mess!\" \ud83d\ude08</p> <p>What Chaos Agent Exploits: - \u274c Manual deployments lead to environment drift - \u274c No audit trail of what's deployed - \u274c Inconsistent deployment processes across teams - \u274c No automated rollback capabilities - \u274c Lack of deployment strategy visualization - \u274c No declarative infrastructure management</p>"},{"location":"kubernetes/scenario_05_gitops_argocd/#the-gitops-heros-response","title":"\ud83e\uddb8\u200d\u2642\ufe0f THE GITOPS HERO'S RESPONSE","text":"<p>\"Enter the world of GitOps! ArgoCD and Argo Rollouts will provide declarative, automated, and visual deployment management. Watch as I demonstrate enterprise-grade GitOps workflows!\" \ud83e\uddb8\u200d\u2642\ufe0f\ud83d\ude80</p> <p>How GitOps Hero Wins: - \u2705 Declarative GitOps workflows - Infrastructure as code - \u2705 Automated deployment management - Git-driven deployments - \u2705 Visual deployment strategies - Real-time dashboard monitoring - \u2705 Advanced deployment strategies - Canary, blue-green, rolling - \u2705 Comprehensive audit trails - Complete deployment history - \u2705 Instant rollback capabilities - Automated reversion - \u2705 Multi-environment management - Consistent deployments</p>"},{"location":"kubernetes/scenario_05_gitops_argocd/#file-structure","title":"\ud83d\udcc1 FILE STRUCTURE","text":"<pre><code>scenarios/05-gitops/\n\u251c\u2500\u2500 README.md                          # This comprehensive guide\n\u251c\u2500\u2500 argocd-apps/\n\u2502   \u251c\u2500\u2500 app-of-apps.yaml              # ArgoCD Application of Applications\n\u2502   \u2514\u2500\u2500 apps/                         # Individual ArgoCD Applications\n\u2502       \u251c\u2500\u2500 frontend.yaml             # Points to overlays/rollouts\n\u2502       \u251c\u2500\u2500 recommendationservice.yaml # Points to overlays/rollouts\n\u2502       \u2514\u2500\u2500 [other services].yaml\n\u251c\u2500\u2500 services/                         # Base manifests (ClusterIP, Deployments)\n\u2502   \u251c\u2500\u2500 frontend/\n\u2502   \u2502   \u251c\u2500\u2500 service-frontend.yaml     # ClusterIP\n\u2502   \u2502   \u251c\u2500\u2500 service-frontend-external.yaml # NodePort (30081)\n\u2502   \u2502   \u251c\u2500\u2500 deployment-frontend.yaml\n\u2502   \u2502   \u2514\u2500\u2500 serviceaccount-frontend.yaml\n\u2502   \u2514\u2500\u2500 [other services]/\n\u251c\u2500\u2500 overlays/\n\u2502   \u251c\u2500\u2500 local/\n\u2502   \u2502   \u2514\u2500\u2500 frontend/\n\u2502   \u2502       \u2514\u2500\u2500 service-frontend-external.yaml # NodePort (30081)\n\u2502   \u251c\u2500\u2500 cloud/\n\u2502   \u2502   \u2514\u2500\u2500 frontend/\n\u2502   \u2502       \u2514\u2500\u2500 service-frontend-external.yaml # LoadBalancer\n\u2502   \u2514\u2500\u2500 rollouts/                     # Advanced deployment strategies\n\u2502       \u251c\u2500\u2500 frontend-rollout.yaml     # Canary deployment\n\u2502       \u251c\u2500\u2500 frontend-preview-service.yaml\n\u2502       \u251c\u2500\u2500 recommendationservice-rollout.yaml # Blue-green deployment\n\u2502       \u251c\u2500\u2500 recommendationservice-preview-service.yaml\n\u2502       \u2514\u2500\u2500 analysis-template.yaml    # Health checks\n\u251c\u2500\u2500 scripts/\n\u2502   \u251c\u2500\u2500 interactive-demo.sh           # Interactive demo script\n\u2502   \u251c\u2500\u2500 setup.sh\n\u2502   \u251c\u2500\u2500 teardown.sh\n\u2502   \u251c\u2500\u2500 switch-overlay.sh\n\u2502   \u2514\u2500\u2500 reset-demo.sh\n\u2514\u2500\u2500 scenario_05_gitops_argocd.md     # Complete handbook\n</code></pre>"},{"location":"kubernetes/scenario_05_gitops_argocd/#quick-start-for-participants","title":"\ud83d\ude80 QUICK START (For Participants)","text":""},{"location":"kubernetes/scenario_05_gitops_argocd/#prerequisites","title":"Prerequisites","text":"<ul> <li>\u2705 Scenario 4 completed (blue-green demo should still be running)</li> <li>\u2705 Kubernetes cluster running (Docker Desktop, Minikube, or cloud)</li> <li>\u2705 kubectl configured and working</li> <li>\u2705 ArgoCD CLI installed (optional but recommended)</li> </ul>"},{"location":"kubernetes/scenario_05_gitops_argocd/#step-1-install-argocd-argo-rollouts-3-minutes","title":"Step 1: Install ArgoCD &amp; Argo Rollouts (3 minutes)","text":"<pre><code># Install ArgoCD\nkubectl create namespace argocd\nkubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml\n\n# Install Argo Rollouts\nkubectl create namespace argo-rollouts\nkubectl apply -n argo-rollouts -f https://github.com/argoproj/argo-rollouts/releases/latest/download/install.yaml\nkubectl apply -n argo-rollouts -f https://github.com/argoproj/argo-rollouts/releases/latest/download/dashboard-install.yaml\n</code></pre>"},{"location":"kubernetes/scenario_05_gitops_argocd/#step-2-access-dashboards-2-minutes","title":"Step 2: Access Dashboards (2 minutes)","text":"<pre><code># Start ArgoCD UI\nkubectl port-forward svc/argocd-server -n argocd 8080:443 &amp;\n# Visit http://localhost:8080\n\n# Start Argo Rollouts UI\nkubectl port-forward deployment/argo-rollouts-dashboard -n argo-rollouts 3100:3100 &amp;\n# Visit http://localhost:3100 (switch to gitops-demo namespace)\n</code></pre>"},{"location":"kubernetes/scenario_05_gitops_argocd/#step-3-get-argocd-admin-password","title":"Step 3: Get ArgoCD Admin Password","text":"<pre><code>kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath=\"{.data.password}\" | base64 -d &amp;&amp; echo\n# Username: admin\n# Password: (output from above)\n</code></pre>"},{"location":"kubernetes/scenario_05_gitops_argocd/#step-4-bootstrap-the-app-of-apps-2-minutes","title":"Step 4: Bootstrap the App-of-Apps (2 minutes)","text":"<pre><code># Navigate to gitops scenario\ncd scenarios/05-gitops\n\n# Bootstrap ArgoCD applications\nkubectl apply -f argocd-apps/app-of-apps.yaml\n</code></pre> <p>Expected Output:</p> <pre><code>\ud83d\ude80 GITOPS WITH ARGOCD &amp; ARGO ROLLOUTS\n======================================================================\n\ud83d\udd27 Installing ArgoCD and Argo Rollouts...\n\u2705 ArgoCD installed successfully\n\u2705 Argo Rollouts installed successfully\n\ud83c\udf10 Starting dashboards...\n\u2705 ArgoCD UI: http://localhost:8080\n\u2705 Argo Rollouts UI: http://localhost:3100\n\ud83d\udd10 Getting admin credentials...\n\u2705 Username: admin\n\u2705 Password: &lt;auto-generated&gt;\n\ud83d\ude80 Bootstrapping applications...\n\u2705 App-of-apps pattern deployed\n\u23f3 Syncing applications...\n\u2705 All applications synced successfully\n\n======================================================================\n\ud83c\udf89 GITOPS DEPLOYMENT SUCCESSFUL!\n\u2705 Enterprise-grade GitOps ready!\n======================================================================\n\n\ud83c\udfaf ACCESS YOUR GITOPS DASHBOARDS:\n   \ud83d\udd27 ArgoCD UI: http://localhost:8080 (admin/&lt;password&gt;)\n   \ud83d\udcca Argo Rollouts UI: http://localhost:3100 (switch to gitops-demo namespace)\n   \ud83c\udf10 Demo App: http://localhost:8080 (via port-forward)\n</code></pre>"},{"location":"kubernetes/scenario_05_gitops_argocd/#step-5-access-your-gitops-dashboards-immediate","title":"Step 5: Access Your GitOps Dashboards (Immediate)","text":""},{"location":"kubernetes/scenario_05_gitops_argocd/#argocd-ui","title":"\ud83d\udd27 ArgoCD UI:","text":"<pre><code>\ud83d\udcbb Primary: http://localhost:8080\n\ud83d\udc64 Username: admin\n\ud83d\udd10 Password: &lt;auto-generated&gt;\n</code></pre>"},{"location":"kubernetes/scenario_05_gitops_argocd/#argo-rollouts-ui","title":"\ud83d\udcca Argo Rollouts UI:","text":"<pre><code>\ud83d\udcbb Primary: http://localhost:3100\n\u26a0\ufe0f Important: Switch namespace to gitops-demo\n</code></pre>"},{"location":"kubernetes/scenario_05_gitops_argocd/#demo-application","title":"\ud83c\udf10 Demo Application:","text":"<pre><code># Port forward to demo app\nkubectl port-forward service/frontend-external 8080:80 -n gitops-demo\n# Then access: http://localhost:8080\n</code></pre>"},{"location":"kubernetes/scenario_05_gitops_argocd/#step-6-interactive-deployment-strategies-15-minutes","title":"Step 6: Interactive Deployment Strategies (15 minutes)","text":"<ol> <li>\ud83c\udfad Canary Deployment (Frontend):</li> <li>Edit <code>overlays/rollouts/frontend-rollout.yaml</code></li> <li>Change image tag to trigger canary</li> <li>Watch traffic shift: 25% \u2192 50% \u2192 75% \u2192 100%</li> <li> <p>Use Argo Rollouts UI to promote/rollback</p> </li> <li> <p>\ud83d\udd35\ud83d\udd34 Blue-Green Deployment (Recommendationservice):</p> </li> <li>Edit <code>overlays/rollouts/recommendationservice-rollout.yaml</code></li> <li>Change image tag to trigger blue-green</li> <li>Watch blue (stable) and green (preview) environments</li> <li> <p>Use Argo Rollouts UI to promote green to blue</p> </li> <li> <p>\ud83d\udd04 Rolling Update Strategy:</p> </li> <li>Edit deployment manifests</li> <li>Watch pod-by-pod updates</li> <li>Experience zero-downtime deployments</li> </ol>"},{"location":"kubernetes/scenario_05_gitops_argocd/#step-7-dashboard-monitoring-5-minutes","title":"Step 7: Dashboard Monitoring (5 minutes)","text":"<ol> <li>\ud83d\udcca ArgoCD Dashboard:</li> <li>View application health and sync status</li> <li>Monitor deployment history</li> <li> <p>Check resource synchronization</p> </li> <li> <p>\ud83d\udcc8 Argo Rollouts Dashboard:</p> </li> <li>Visual deployment progress</li> <li>Traffic shifting visualization</li> <li>Health check monitoring</li> </ol>"},{"location":"kubernetes/scenario_05_gitops_argocd/#live-demo-walkthrough-for-instructors","title":"\ud83c\udfac LIVE DEMO WALKTHROUGH (For Instructors)","text":""},{"location":"kubernetes/scenario_05_gitops_argocd/#demo-script-overview","title":"Demo Script Overview","text":""},{"location":"kubernetes/scenario_05_gitops_argocd/#part-1-gitops-chaos-exposed-3-minutes","title":"Part 1: GitOps Chaos Exposed (3 minutes)","text":"<pre><code># Show deployment inconsistency chaos\n./demo-script.sh\n</code></pre> <p>What Students See: 1. Manual deployments causing environment drift 2. No audit trail of deployments 3. Inconsistent configurations 4. \"This is deployment chaos!\"</p>"},{"location":"kubernetes/scenario_05_gitops_argocd/#part-2-gitops-hero-saves-the-day-4-minutes","title":"Part 2: GitOps Hero Saves the Day (4 minutes)","text":"<pre><code># Deploy ArgoCD and Argo Rollouts\nkubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml\nkubectl apply -n argo-rollouts -f https://github.com/argoproj/argo-rollouts/releases/latest/download/install.yaml\nkubectl apply -f argocd-apps/app-of-apps.yaml\n</code></pre> <p>Key Teaching Points: - \ud83d\ude80 Declarative GitOps workflows - \ud83d\ude80 Automated deployment management - \ud83d\ude80 Visual deployment strategies - \ud83d\ude80 Comprehensive monitoring</p>"},{"location":"kubernetes/scenario_05_gitops_argocd/#part-3-interactive-strategy-testing-3-minutes","title":"Part 3: Interactive Strategy Testing (3 minutes)","text":"<ul> <li>Demonstrate canary deployment</li> <li>Show blue-green switching</li> <li>Highlight dashboard monitoring</li> <li>Celebrate GitOps victory!</li> </ul>"},{"location":"kubernetes/scenario_05_gitops_argocd/#gitops-configuration","title":"\ud83d\ude80 GITOPS CONFIGURATION","text":""},{"location":"kubernetes/scenario_05_gitops_argocd/#1-argocd-application-of-applications","title":"1. ArgoCD Application of Applications","text":"<pre><code>apiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: app-of-apps\n  namespace: argocd\nspec:\n  project: default\n  source:\n    repoURL: https://github.com/vellankikoti/ci-cd-chaos-workshop\n    targetRevision: HEAD\n    path: Kubernetes/kubernetes-scenarios/05-gitops/argocd-apps\n  destination:\n    server: https://kubernetes.default.svc\n    namespace: gitops-demo\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n</code></pre>"},{"location":"kubernetes/scenario_05_gitops_argocd/#2-frontend-application","title":"2. Frontend Application","text":"<pre><code>apiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: frontend\n  namespace: argocd\nspec:\n  project: default\n  source:\n    repoURL: https://github.com/vellankikoti/ci-cd-chaos-workshop\n    targetRevision: HEAD\n    path: Kubernetes/kubernetes-scenarios/05-gitops/overlays/rollouts\n  destination:\n    server: https://kubernetes.default.svc\n    namespace: gitops-demo\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n</code></pre>"},{"location":"kubernetes/scenario_05_gitops_argocd/#3-canary-deployment-strategy","title":"3. Canary Deployment Strategy","text":"<pre><code>apiVersion: argoproj.io/v1alpha1\nkind: Rollout\nmetadata:\n  name: frontend\n  namespace: gitops-demo\nspec:\n  replicas: 4\n  strategy:\n    canary:\n      steps:\n      - setWeight: 25\n      - pause: {}\n      - setWeight: 50\n      - pause: {}\n      - setWeight: 75\n      - pause: {}\n      - setWeight: 100\n  selector:\n    matchLabels:\n      app: frontend\n  template:\n    metadata:\n      labels:\n        app: frontend\n    spec:\n      containers:\n      - name: server\n        image: us-central1-docker.pkg.dev/google-samples/microservices-demo/frontend:v0.10.3\n        ports:\n        - containerPort: 8080\n</code></pre>"},{"location":"kubernetes/scenario_05_gitops_argocd/#4-blue-green-deployment-strategy","title":"4. Blue-Green Deployment Strategy","text":"<pre><code>apiVersion: argoproj.io/v1alpha1\nkind: Rollout\nmetadata:\n  name: recommendationservice\n  namespace: gitops-demo\nspec:\n  replicas: 2\n  strategy:\n    blueGreen:\n      activeService: recommendationservice\n      previewService: recommendationservice-preview\n      autoPromotionEnabled: false\n      scaleDownDelaySeconds: 30\n  selector:\n    matchLabels:\n      app: recommendationservice\n  template:\n    metadata:\n      labels:\n        app: recommendationservice\n    spec:\n      containers:\n      - name: server\n        image: us-central1-docker.pkg.dev/google-samples/microservices-demo/recommendationservice:v0.10.3\n        ports:\n        - containerPort: 8080\n</code></pre>"},{"location":"kubernetes/scenario_05_gitops_argocd/#gitops-testing","title":"\ud83e\uddea GITOPS TESTING","text":""},{"location":"kubernetes/scenario_05_gitops_argocd/#test-1-canary-deployment","title":"Test 1: Canary Deployment","text":"<pre><code># Trigger canary deployment\nkubectl apply -f overlays/rollouts/frontend-rollout.yaml\n\n# Watch progress in Argo Rollouts UI\n# Visit http://localhost:3100 and switch to gitops-demo namespace\n</code></pre>"},{"location":"kubernetes/scenario_05_gitops_argocd/#test-2-blue-green-deployment","title":"Test 2: Blue-Green Deployment","text":"<pre><code># Trigger blue-green deployment\nkubectl apply -f overlays/rollouts/recommendationservice-rollout.yaml\n\n# Watch environments in Argo Rollouts UI\n# Promote green to blue when ready\nkubectl argo rollouts promote recommendationservice -n gitops-demo\n</code></pre>"},{"location":"kubernetes/scenario_05_gitops_argocd/#test-3-gitops-sync","title":"Test 3: GitOps Sync","text":"<pre><code># Check ArgoCD applications\nkubectl get applications -n argocd\n\n# Force sync with latest revision\nkubectl patch application frontend -n argocd --type='merge' -p='{\"spec\":{\"source\":{\"targetRevision\":\"HEAD\"}}}'\n</code></pre>"},{"location":"kubernetes/scenario_05_gitops_argocd/#test-4-rollback-capability","title":"Test 4: Rollback Capability","text":"<pre><code># Rollback to previous version\nkubectl argo rollouts rollback frontend -n gitops-demo\n\n# Check rollback status\nkubectl get rollout frontend -n gitops-demo\n</code></pre>"},{"location":"kubernetes/scenario_05_gitops_argocd/#gitops-monitoring","title":"\ud83d\udcca GITOPS MONITORING","text":""},{"location":"kubernetes/scenario_05_gitops_argocd/#argocd-dashboard-monitoring","title":"ArgoCD Dashboard Monitoring","text":"<pre><code># Check application health\nkubectl get applications -n argocd\n\n# View sync status\nkubectl describe application frontend -n argocd\n\n# Check deployment history\nkubectl get events -n argocd --sort-by='.lastTimestamp'\n</code></pre>"},{"location":"kubernetes/scenario_05_gitops_argocd/#argo-rollouts-dashboard-monitoring","title":"Argo Rollouts Dashboard Monitoring","text":"<pre><code># Check rollout status\nkubectl get rollouts -n gitops-demo\n\n# View rollout details\nkubectl describe rollout frontend -n gitops-demo\n\n# Monitor traffic shifting\nkubectl get services -n gitops-demo\n</code></pre>"},{"location":"kubernetes/scenario_05_gitops_argocd/#real-time-metrics","title":"Real-time Metrics","text":"<pre><code># Monitor pod status\nkubectl get pods -n gitops-demo -w\n\n# Check resource usage\nkubectl top pods -n gitops-demo\n\n# View application logs\nkubectl logs -f deployment/frontend -n gitops-demo\n</code></pre>"},{"location":"kubernetes/scenario_05_gitops_argocd/#success-criteria","title":"\ud83c\udfaf SUCCESS CRITERIA","text":""},{"location":"kubernetes/scenario_05_gitops_argocd/#scenario-05-complete-checklist","title":"\u2705 Scenario 05 Complete Checklist:","text":"<ul> <li>\u2705 ArgoCD installed and accessible</li> <li>\u2705 Argo Rollouts installed and functional</li> <li>\u2705 App-of-apps pattern deployed</li> <li>\u2705 Canary deployment strategy working</li> <li>\u2705 Blue-green deployment strategy operational</li> <li>\u2705 Dashboard monitoring functional</li> <li>\u2705 GitOps workflows automated</li> <li>\u2705 Chaos Agent's deployment inconsistency attacks defeated! \ud83d\ude80</li> </ul>"},{"location":"kubernetes/scenario_05_gitops_argocd/#key-learning-outcomes","title":"Key Learning Outcomes:","text":"<ul> <li>\u2705 GitOps Principles - Mastered declarative infrastructure</li> <li>\u2705 ArgoCD Management - Implemented application automation</li> <li>\u2705 Argo Rollouts - Experienced advanced deployment strategies</li> <li>\u2705 Dashboard Monitoring - Applied visual deployment management</li> <li>\u2705 Automated Workflows - Built Git-driven deployments</li> <li>\u2705 Enterprise Patterns - Implemented production-ready GitOps</li> </ul>"},{"location":"kubernetes/scenario_05_gitops_argocd/#next-steps","title":"\ud83d\ude80 NEXT STEPS","text":""},{"location":"kubernetes/scenario_05_gitops_argocd/#whats-next","title":"What's Next:","text":"<ul> <li>Production GitOps - Apply these patterns to real applications</li> <li>Advanced ArgoCD - Explore more complex application patterns</li> <li>Multi-Cluster GitOps - Deploy across multiple environments</li> <li>Custom Rollout Strategies - Build application-specific strategies</li> </ul>"},{"location":"kubernetes/scenario_05_gitops_argocd/#production-gitops","title":"Production GitOps:","text":"<ul> <li>Implement comprehensive GitOps workflows</li> <li>Add security scanning and compliance</li> <li>Build automated testing pipelines</li> <li>Regular GitOps strategy reviews</li> </ul>"},{"location":"kubernetes/scenario_05_gitops_argocd/#troubleshooting","title":"\ud83c\udd98 TROUBLESHOOTING","text":""},{"location":"kubernetes/scenario_05_gitops_argocd/#common-gitops-issues","title":"Common GitOps Issues:","text":""},{"location":"kubernetes/scenario_05_gitops_argocd/#issue-argocd-not-syncing-applications","title":"Issue: ArgoCD not syncing applications","text":"<pre><code># Solution: Check application status\nkubectl get applications -n argocd\nkubectl describe application frontend -n argocd\n</code></pre>"},{"location":"kubernetes/scenario_05_gitops_argocd/#issue-rollouts-not-visible-in-dashboard","title":"Issue: Rollouts not visible in dashboard","text":"<pre><code># Solution: Switch namespace in Argo Rollouts UI\n# Navigate to http://localhost:3100 and select gitops-demo namespace\n</code></pre>"},{"location":"kubernetes/scenario_05_gitops_argocd/#issue-canary-deployment-stuck","title":"Issue: Canary deployment stuck","text":"<pre><code># Solution: Promote the rollout\nkubectl argo rollouts promote frontend -n gitops-demo\n</code></pre>"},{"location":"kubernetes/scenario_05_gitops_argocd/#issue-blue-green-not-switching","title":"Issue: Blue-green not switching","text":"<pre><code># Solution: Check service selectors\nkubectl get services -n gitops-demo\nkubectl describe service recommendationservice -n gitops-demo\n</code></pre>"},{"location":"kubernetes/scenario_05_gitops_argocd/#conclusion","title":"\ud83c\udf89 CONCLUSION","text":"<p>Congratulations! You've successfully defeated Chaos Agent's deployment inconsistency attacks! \ud83d\ude80</p>"},{"location":"kubernetes/scenario_05_gitops_argocd/#what-youve-accomplished","title":"What You've Accomplished:","text":"<ul> <li>\u2705 Implemented enterprise-grade GitOps with ArgoCD</li> <li>\u2705 Mastered advanced deployment strategies with Argo Rollouts</li> <li>\u2705 Created visual deployment management with dashboards</li> <li>\u2705 Built automated GitOps workflows for consistency</li> <li>\u2705 Applied declarative infrastructure principles</li> </ul>"},{"location":"kubernetes/scenario_05_gitops_argocd/#key-gitops-takeaways","title":"Key GitOps Takeaways:","text":"<ul> <li>GitOps provides consistency across all environments</li> <li>Declarative infrastructure ensures reproducibility</li> <li>Visual dashboards improve deployment visibility</li> <li>Advanced strategies enable safe deployments</li> <li>Automation reduces human error and deployment time</li> </ul> <p>You've completed all 5 Kubernetes scenarios and are now a GitOps master! \ud83c\udf89</p> <p>Remember: In the world of GitOps, automation and consistency are your superpowers against chaos! \ud83d\ude80 </p>"},{"location":"phases/docker/","title":"\ud83d\udc33 Docker Mastery","text":"<p>Welcome to Phase 2 of the CI/CD Chaos Workshop \u2014 the stage where we dive deep into Docker, learn how to build Python apps properly, and create chaos-worthy Docker images for production!</p>"},{"location":"phases/docker/#what-youll-experience-in-this-phase","title":"\ud83d\ude80 What You'll Experience in This Phase","text":""},{"location":"phases/docker/#scenario-01-streaming-server-with-docker","title":"Scenario 01: Streaming Server with Docker","text":"<ul> <li>Launch your own live streaming server using Docker and Owncast.</li> <li>Connect OBS Studio, stream video, and share it with the world.</li> <li>Learn about containerized media, port mapping, and real-world Docker deployment.</li> <li>See how Docker makes complex app stacks portable and reproducible.</li> </ul>"},{"location":"phases/docker/#scenario-02-progressive-chaos-engineering-pipeline","title":"Scenario 02: Progressive Chaos Engineering Pipeline","text":"<ul> <li>Enter the world of chaos engineering \u2014 safely, in Docker!</li> <li>Run a Jenkins pipeline that simulates real-world failures: network outages, resource exhaustion, missing dependencies, and database crashes.</li> <li>Watch as each pipeline step introduces a new failure, then learn how to fix it.</li> <li>Master Docker-in-Docker (DinD), container orchestration, and resilient CI/CD design.</li> <li>Build confidence in troubleshooting and debugging containerized pipelines.</li> </ul>"},{"location":"phases/docker/#scenario-03-docker-networking-magic","title":"Scenario 03: Docker Networking Magic","text":"<ul> <li>Deploy a live voting app and see how containers communicate (or fail to!).</li> <li>Simulate broken networks, missing databases, and container isolation.</li> <li>Fix networking issues live and watch your app come to life.</li> <li>Learn about Docker networks, bridges, and best practices for multi-container apps.</li> <li>Experience the \"AHA!\" moment when everything just works.</li> </ul>"},{"location":"phases/docker/#scenario-04-docker-image-scanner","title":"Scenario 04: Docker Image Scanner","text":"<ul> <li>Upload any Dockerfile and get instant, real-world security and best-practices analysis.</li> <li>See how Trivy scans for vulnerabilities and how small Dockerfile changes impact security.</li> <li>Learn to optimize, harden, and benchmark your images \u2014 and get actionable feedback.</li> <li>Discover the power of automated image analysis in modern DevOps.</li> </ul>"},{"location":"phases/docker/#scenario-05-docker-escape-room","title":"Scenario 05: Docker Escape Room","text":"<ul> <li>Enter a gamified, puzzle-based Docker adventure.</li> <li>Solve hands-on challenges: volumes, networking, secrets, resource limits, and multi-stage builds.</li> <li>Race against the clock, outsmart Dr. NullPointer, and escape the Docker Vault!</li> <li>Experience Docker as a real-world troubleshooting and problem-solving journey.</li> <li>Walk away with Docker mastery, confidence, and a smile.</li> </ul>"},{"location":"phases/docker/#what-youll-learn","title":"\ud83c\udfac What You'll Learn","text":"<ul> <li>How to containerize and run real-world apps (media, web, CI/CD, games)</li> <li>The art of troubleshooting and debugging Dockerized systems</li> <li>Chaos engineering and resilience in pipelines</li> <li>Docker networking, volumes, and resource management</li> <li>Security scanning and best practices for Dockerfiles</li> <li>The fun and power of hands-on, scenario-based learning</li> </ul> <p>This phase is your Docker bootcamp, playground, and proving ground. Get ready to build, break, fix, and master Docker \u2014 with a little chaos and a lot of fun!</p>"},{"location":"phases/docker/#what-were-building","title":"\ud83d\ude80 What We're Building","text":"<p>We're developing a FastAPI Python app:</p> <ul> <li>5 different versions</li> <li>Each with new features, animations, or visuals</li> <li>Deployed via Docker</li> <li>Automatically analyzed for:<ul> <li>image size</li> <li>layer count</li> <li>base image details</li> </ul> </li> </ul> <p>Chaos Agent says: \"Let's bloat those images!\" Our mission: keep images lean and secure.</p>"},{"location":"phases/docker/#how-to-deploy-versions","title":"\u2728 How to Deploy Versions","text":"<p>Instead of manually switching files and building containers, we've automated everything!</p> <p>Run:</p> <pre><code>python Docker/workshop_tools/deploy_version.py 3\n</code></pre> <p>\u2705 This:</p> <ul> <li>Copies the correct <code>main_vX.py</code> to <code>main.py</code></li> <li>Builds your Docker image</li> <li>Stops/removes any container running on port 3000</li> <li>Runs the new version</li> <li>Generates a beautiful HTML Docker report under:</li> </ul> <pre><code>reports/version_3/docker_report.html\n</code></pre>"},{"location":"phases/docker/#docker-analysis-reports","title":"\ud83d\udcca Docker Analysis Reports","text":"<p>Every deploy automatically runs:</p> <pre><code>python Docker/workshop_tools/generate_docker_report.py 3\n</code></pre> <p>This analyzes:</p> <p>\u2705 Image size (MB) \u2705 Number of layers \u2705 Base image used \u2705 Recommendations for optimization</p> <p>It creates a report like:</p> <p>Why it matters: This makes Docker transparent for developers and helps avoid bloat.</p>"},{"location":"phases/docker/#demo-scenarios","title":"\ud83d\udc0d Demo Scenarios","text":"<p>During the workshop, we'll:</p> <p>\u2705 Deploy version 1 \u2192 tiny image \u2705 Deploy version 2 \u2192 adds emojis \u2192 image grows \u2705 Deploy version 3 \u2192 multi-stage build \u2192 image shrinks \u2705 Deploy version 4 \u2192 adds background workers \u2192 image grows \u2705 Deploy version 5 \u2192 chaos animations \u2192 biggest image</p> <p>We'll learn how to:</p> <ul> <li>Avoid large images</li> <li>Use <code>.dockerignore</code> effectively</li> <li>Minimize layers</li> <li>Prefer multi-stage builds</li> <li>Separate dev vs prod images</li> </ul> <p>Chaos Agent's trap: </p> <p>\"Add one more pip install\u2026 what's the harm?\"</p> <p>We'll prove why that's dangerous.</p>"},{"location":"phases/docker/#why-multi-stage-builds-matter","title":"\ud83e\udd39 Why Multi-Stage Builds Matter","text":"<p>Without multi-stage:</p> <ul> <li>Images ~400MB or more</li> <li>Contains unnecessary build tools</li> <li>Slower deployments</li> </ul> <p>With multi-stage:</p> <ul> <li>Images ~100MB or less</li> <li>Production only includes:<ul> <li>compiled Python code</li> <li>minimal runtime packages</li> </ul> </li> <li>Fewer attack surfaces</li> </ul> <p>Example Dockerfile:</p> <pre><code># First stage\nFROM python:3.12-slim AS builder\nWORKDIR /app\nCOPY requirements.txt .\nRUN pip install --no-cache-dir --prefix=/install -r requirements.txt\n\n# Second stage\nFROM python:3.12-slim\nWORKDIR /app\nCOPY --from=builder /install /usr/local\nCOPY ./app ./app\nCMD [\"uvicorn\", \"app.main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"3000\"]\n</code></pre> <p>Best Practice: Keep the runtime image as slim as possible.</p>"},{"location":"phases/docker/#tips-for-workshop-demos","title":"\ud83d\udca1 Tips for Workshop Demos","text":"<p>\u2705 Show Docker image size differences:</p> <pre><code>docker images\n</code></pre> <p>\u2705 Check layer digests:</p> <pre><code>docker inspect ci-cd-chaos-app:v3\n</code></pre> <p>\u2705 Show Docker build history:</p> <pre><code>docker history ci-cd-chaos-app:v3\n</code></pre> <p>\u2705 Explain why small images deploy faster.</p> <p>\u2705 Highlight how multi-stage prevents secrets from leaking into final images.</p> <p>Chaos Agent: </p> <p>\"Let's leave secrets in the image. No one will find them\u2026\"</p> <p>We'll prove how scanning tools and image inspection can expose secrets.</p>"},{"location":"phases/docker/#chaos-engineering-with-docker","title":"\ud83d\udd25 Chaos Engineering with Docker","text":"<p>Optional chaos ideas:</p> <ul> <li>Randomly build incorrect versions</li> <li>Introduce slow builds to show Docker caching</li> <li>Simulate Docker build errors</li> <li>Show how CI/CD detects Docker issues early</li> </ul> <p>Mission: Prove that pipelines protect you from Docker chaos.</p>"},{"location":"phases/docker/#run-it-all-together","title":"\u2705 Run It All Together","text":"<p>To deploy version 5 and see the full chaos experience:</p> <pre><code>python Docker/workshop_tools/deploy_version.py --version 5\n</code></pre> <p>Then check:</p> <pre><code># View the running app\ncurl http://localhost:3000\n\n# Check the Docker report\nopen reports/version_5/docker_report.html\n</code></pre>"},{"location":"phases/docker/#chaos-testing-scenarios","title":"\ud83e\uddea Chaos Testing Scenarios","text":""},{"location":"phases/docker/#scenario-1-docker-build-failures","title":"\u2705 Scenario 1: Docker Build Failures","text":"<pre><code># Simulate Docker build failures\ndocker build --no-cache -t chaos-app:broken .\n# Expected: Build fails due to missing dependencies\n</code></pre>"},{"location":"phases/docker/#scenario-2-image-size-explosion","title":"\u2705 Scenario 2: Image Size Explosion","text":"<pre><code># Compare image sizes\ndocker images chaos-app --format \"table {{.Tag}}\\t{{.Size}}\"\n# Expected: Version 5 should be significantly larger than Version 1\n</code></pre>"},{"location":"phases/docker/#scenario-3-security-vulnerabilities","title":"\u2705 Scenario 3: Security Vulnerabilities","text":"<pre><code># Scan for vulnerabilities\ndocker run --rm -v /var/run/docker.sock:/var/run/docker.sock \\\n  aquasec/trivy image chaos-app:v1\n# Expected: Find potential security issues\n</code></pre>"},{"location":"phases/docker/#monitoring-reporting","title":"\ud83d\udcca Monitoring &amp; Reporting","text":""},{"location":"phases/docker/#docker-metrics","title":"\u2705 Docker Metrics","text":"<ul> <li>Image build time</li> <li>Image size trends</li> <li>Layer count analysis</li> <li>Security vulnerability count</li> </ul>"},{"location":"phases/docker/#chaos-metrics","title":"\u2705 Chaos Metrics","text":"<ul> <li>Build failure rate</li> <li>Image size explosion rate</li> <li>Security issue detection rate</li> </ul>"},{"location":"phases/docker/#next-steps","title":"\ud83c\udfaf Next Steps","text":"<p>\u2705 Phase 2 Complete: You now have Docker mastery! \u2705 Ready for Phase 3: Jenkins Pipeline Chaos \u2705 Chaos Agent Status: Defeated in Docker optimization! \ud83d\udd76\ufe0f</p> <p>Remember: Docker is your first line of defense against deployment chaos. Keep images lean, secure, and fast! \ud83d\udd25</p>"},{"location":"phases/jenkins/","title":"\ud83d\udd27 Jenkins: Pipeline Mastery &amp; Chaos Engineering","text":"<p>Welcome to Phase 3 of the CI/CD Chaos Workshop \u2014 where you'll transform from a Jenkins user into a pipeline architect who can build, test, secure, and deploy with confidence!</p>"},{"location":"phases/jenkins/#what-youll-master","title":"\ud83c\udfaf What You'll Master","text":"<ul> <li>Docker Integration: Build and test containers in Jenkins with real-world chaos scenarios</li> <li>Testcontainers Pipeline: Run database tests with intentional failures and recovery</li> <li>Enterprise Reporting: Generate stunning HTML reports that stakeholders love</li> <li>Security Scanning: Detect secrets and vulnerabilities before they reach production</li> <li>Kubernetes Deployment: Deploy to AWS EKS with proper monitoring and rollback</li> </ul>"},{"location":"phases/jenkins/#why-jenkins-mastery-matters","title":"\ud83d\ude80 Why Jenkins Mastery Matters","text":"<p>The Problem: Your CI/CD pipeline is fragile. One small change breaks everything. Chaos Agent loves this!</p> <p>The Solution: Build bulletproof pipelines that handle failures gracefully, provide clear feedback, and deploy with confidence.</p> <p>The Chaos Angle: What happens when your Docker build fails? When tests are flaky? When secrets leak? Your Jenkins pipeline will be ready for anything!</p>"},{"location":"phases/jenkins/#progressive-learning-scenarios","title":"\ud83e\uddea Progressive Learning Scenarios","text":""},{"location":"phases/jenkins/#1-docker-build-chaos","title":"1. Docker Build Chaos \ud83d\udc33","text":"<p>What You'll Experience: - Build 5 different Python app versions with intentional sabotage - Parameterize Jenkins pipelines with user inputs - Handle Docker socket permissions and container lifecycle - Detect and report build failures with clear error messages</p> <p>Real Pipeline You'll Write:</p> <pre><code>pipeline {\n    parameters {\n        string(name: 'APP_VERSION', defaultValue: '1', description: 'Which app version (1-5)?')\n    }\n\n    stages {\n        stage('Build Docker Image') {\n            steps {\n                sh \"docker build -t ci-cd-chaos-app:v${params.APP_VERSION} .\"\n            }\n        }\n        stage('Test Container') {\n            steps {\n                sh \"docker run -d --name chaos-app-v${params.APP_VERSION} -p 3000:3000 ci-cd-chaos-app:v${params.APP_VERSION}\"\n                sh \"curl -f http://localhost:3000 || exit 1\"\n            }\n        }\n    }\n}\n</code></pre> <p>Chaos Lessons: Version mismatches, container startup failures, network connectivity issues</p>"},{"location":"phases/jenkins/#2-testcontainers-integration","title":"2. Testcontainers Integration \ud83e\uddea","text":"<p>What You'll Experience: - Run PostgreSQL and Redis tests in Jenkins containers - Simulate database connection failures and recovery - Use Docker-in-Docker for isolated test environments - Handle test flakiness with proper retry logic</p> <p>Real Pipeline You'll Write:</p> <pre><code>pipeline {\n    agent {\n        docker {\n            image 'ci-cd-chaos-python:latest'\n            args '-u root -v /var/run/docker.sock:/var/run/docker.sock'\n        }\n    }\n\n    parameters {\n        choice(name: 'TEST_MODE', choices: ['pass', 'fail'], description: 'Run passing or failing tests?')\n    }\n\n    stages {\n        stage('Run Database Tests') {\n            steps {\n                sh \"pytest tests/test_postgres_${params.TEST_MODE}.py tests/test_redis_${params.TEST_MODE}.py\"\n            }\n        }\n    }\n}\n</code></pre> <p>Chaos Lessons: Database connection failures, test isolation, resource constraints</p>"},{"location":"phases/jenkins/#3-enterprise-html-reports","title":"3. Enterprise HTML Reports \ud83d\udcca","text":"<p>What You'll Experience: - Generate stunning, interactive HTML reports with charts and animations - Archive reports as Jenkins artifacts with proper retention - Create mobile-responsive dashboards that stakeholders love - Implement dark/light theme toggles and professional styling</p> <p>Real Pipeline You'll Write:</p> <pre><code>stage('Generate Reports') {\n    steps {\n        sh \"python report_generator.py --scenarios config,api,database,secrets\"\n        archiveArtifacts artifacts: 'reports/**/*.html', fingerprint: true\n    }\n    post {\n        always {\n            publishHTML([\n                allowMissing: false,\n                alwaysLinkToLastBuild: true,\n                keepAll: true,\n                reportDir: 'reports',\n                reportFiles: 'index.html',\n                reportName: 'Test Results Dashboard'\n            ])\n        }\n    }\n}\n</code></pre> <p>Chaos Lessons: Report generation failures, artifact storage issues, visualization challenges</p>"},{"location":"phases/jenkins/#4-secrets-management","title":"4. Secrets Management \ud83d\udd10","text":"<p>What You'll Experience: - Scan code for leaked credentials using Gitleaks - Use Jenkins credentials store for secure secret management - Generate security reports with severity levels and remediation steps - Implement secret rotation and access controls</p> <p>Real Pipeline You'll Write:</p> <pre><code>stage('Security Scan') {\n    steps {\n        withCredentials([string(credentialsId: 'aws-access-key', variable: 'AWS_ACCESS_KEY_ID')]) {\n            sh \"gitleaks detect --source . --report-format json --report-path reports/secrets.json\"\n        }\n    }\n    post {\n        always {\n            script {\n                if (fileExists('reports/secrets.json')) {\n                    def secrets = readJSON file: 'reports/secrets.json'\n                    if (secrets.size() &gt; 0) {\n                        error \"Found ${secrets.size()} secrets in code!\"\n                    }\n                }\n            }\n        }\n    }\n}\n</code></pre> <p>Chaos Lessons: Secret leaks, credential exposure, security compliance failures</p>"},{"location":"phases/jenkins/#5-aws-eks-deployment","title":"5. AWS EKS Deployment \u2601\ufe0f","text":"<p>What You'll Experience: - Deploy Python applications to Kubernetes clusters - Handle authentication with AWS IAM and EKS - Monitor deployments with real-time kubectl commands - Implement proper rollback procedures and health checks</p> <p>Real Pipeline You'll Write:</p> <pre><code>stage('Deploy to EKS') {\n    steps {\n        withCredentials([string(credentialsId: 'aws-access-key', variable: 'AWS_ACCESS_KEY_ID')]) {\n            sh \"aws eks update-kubeconfig --name ${params.CLUSTER_NAME} --region ${params.AWS_REGION}\"\n            sh \"kubectl apply -f k8s/deployment.yaml\"\n            sh \"kubectl rollout status deployment/chaos-app --timeout=300s\"\n        }\n    }\n    post {\n        failure {\n            sh \"kubectl rollout undo deployment/chaos-app\"\n            sh \"kubectl get events --sort-by=.metadata.creationTimestamp\"\n        }\n    }\n}\n</code></pre> <p>Chaos Lessons: Authentication failures, resource constraints, network connectivity issues, deployment timeouts</p>"},{"location":"phases/jenkins/#built-in-chaos-engineering","title":"\ud83c\udfad Built-In Chaos Engineering","text":"<p>Every scenario includes intentional chaos to build resilience:</p>"},{"location":"phases/jenkins/#parameterized-chaos","title":"Parameterized Chaos","text":"<pre><code>parameters {\n    choice(name: 'CHAOS_MODE', choices: ['pass', 'fail'], description: 'Run normal or chaos mode?')\n}\n</code></pre>"},{"location":"phases/jenkins/#conditional-failures","title":"Conditional Failures","text":"<pre><code>stage('Chaos Test') {\n    steps {\n        script {\n            if (params.CHAOS_MODE == 'fail') {\n                error \"Chaos Agent strikes! Simulated failure triggered.\"\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"phases/jenkins/#resource-constraints","title":"Resource Constraints","text":"<pre><code>stage('Resource Test') {\n    steps {\n        sh \"docker run --memory=100m --cpus=0.1 chaos-app\"\n    }\n}\n</code></pre>"},{"location":"phases/jenkins/#production-patterns-youll-learn","title":"\ud83c\udfd7\ufe0f Production Patterns You'll Learn","text":""},{"location":"phases/jenkins/#pipeline-structure","title":"Pipeline Structure","text":"<pre><code>pipeline {\n    agent any\n\n    parameters {\n        // User inputs\n    }\n\n    environment {\n        // Shared variables\n    }\n\n    stages {\n        // Build, test, deploy stages\n    }\n\n    post {\n        always {\n            // Cleanup and reporting\n        }\n        success {\n            // Success notifications\n        }\n        failure {\n            // Failure handling and rollback\n        }\n    }\n}\n</code></pre>"},{"location":"phases/jenkins/#docker-integration","title":"Docker Integration","text":"<pre><code>agent {\n    docker {\n        image 'python:3.12-slim'\n        args '-u root -v /var/run/docker.sock:/var/run/docker.sock'\n    }\n}\n</code></pre>"},{"location":"phases/jenkins/#error-handling","title":"Error Handling","text":"<pre><code>post {\n    failure {\n        sh \"docker logs ${container_name} || true\"\n        archiveArtifacts artifacts: 'logs/**/*', allowEmptyArchive: true\n        emailext subject: \"Build Failed: ${env.JOB_NAME}\",\n                 body: \"Build ${env.BUILD_NUMBER} failed. Check console output.\",\n                 to: 'team@company.com'\n    }\n}\n</code></pre>"},{"location":"phases/jenkins/#monitoring-reporting","title":"\ud83d\udcca Monitoring &amp; Reporting","text":""},{"location":"phases/jenkins/#pipeline-metrics","title":"Pipeline Metrics","text":"<ul> <li>Build success/failure rates</li> <li>Average build duration</li> <li>Test execution times</li> <li>Deployment success rates</li> <li>Security scan results</li> </ul>"},{"location":"phases/jenkins/#chaos-metrics","title":"Chaos Metrics","text":"<ul> <li>Number of simulated failures</li> <li>Recovery time from failures</li> <li>System resilience scores</li> <li>Rollback success rates</li> </ul>"},{"location":"phases/jenkins/#enterprise-reports","title":"Enterprise Reports","text":"<ul> <li>Interactive HTML dashboards</li> <li>Color-coded status indicators</li> <li>Performance analytics</li> <li>Security compliance reports</li> </ul>"},{"location":"phases/jenkins/#how-to-run","title":"\ud83d\ude80 How to Run","text":""},{"location":"phases/jenkins/#quick-start","title":"Quick Start","text":"<pre><code># Start Jenkins with Docker\ndocker run -d \\\n  -p 8080:8080 \\\n  -v jenkins_home:/var/jenkins_home \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  jenkins/jenkins:lts\n\n# Access Jenkins UI\nopen http://localhost:8080\n</code></pre>"},{"location":"phases/jenkins/#run-all-scenarios","title":"Run All Scenarios","text":"<pre><code># Execute the scenario runner\npython Jenkins/jenkins_scenarios/run_all_scenarios.py\n</code></pre>"},{"location":"phases/jenkins/#expected-progression","title":"Expected Progression","text":"<ol> <li>Scenario 1: Docker builds with chaos testing</li> <li>Scenario 2: Testcontainers integration with database failures</li> <li>Scenario 3: Beautiful HTML reports with interactive charts</li> <li>Scenario 4: Security scanning and secrets management</li> <li>Scenario 5: AWS EKS deployment with monitoring</li> </ol>"},{"location":"phases/jenkins/#learning-outcomes","title":"\ud83c\udfaf Learning Outcomes","text":"<p>By the end of Phase 3, you'll be able to:</p> <p>\u2705 Build bulletproof Jenkins pipelines that handle any failure gracefully \u2705 Integrate Docker and Testcontainers seamlessly into CI/CD workflows \u2705 Generate professional reports that stakeholders actually want to read \u2705 Implement security scanning that prevents credential leaks \u2705 Deploy to Kubernetes with proper monitoring and rollback procedures \u2705 Apply chaos engineering to make your pipelines more resilient  </p>"},{"location":"phases/jenkins/#the-chaos-agents-challenge","title":"\ud83c\udfad The Chaos Agent's Challenge","text":"<p>Chaos Agent: \"Let's just use a simple pipeline. What could go wrong?\"</p> <p>Your Response: \"Everything! Without proper error handling, security scanning, and monitoring, your pipeline becomes a liability. Jenkins mastery means building pipelines that survive chaos and provide clear feedback when things go wrong.\"</p>"},{"location":"phases/jenkins/#next-steps","title":"\ud83c\udfc1 Next Steps","text":"<p>\u2705 Phase 3 Complete: You now have Jenkins pipeline mastery! \u2705 Ready for Phase 4: Kubernetes Chaos &amp; Scalability \u2014 where you'll orchestrate chaos at scale. \u2705 Chaos Agent Status: Defeated in pipeline automation! \ud83d\udd76\ufe0f  </p> <p>Remember: Jenkins pipelines are your automation backbone. When chaos strikes, your pipeline will be your shield! \ud83d\udd25</p> <p>\ud83d\udca1 Pro Tip: The chaos scenarios in these pipelines aren't just for fun \u2014 they're teaching you to build resilient systems that can handle real-world failures gracefully.</p>"},{"location":"phases/k8s/","title":"\u2638\ufe0f Kubernetes Chaos &amp; Scalability","text":"<p>Welcome to Phase 4 of the CI/CD Chaos Workshop \u2014 where we deploy our Python apps to Kubernetes and learn to handle real-world chaos in production!</p> <p>This phase covers 5 comprehensive scenarios that take you from basic Kubernetes deployments to advanced GitOps with enterprise-grade deployment strategies.</p> <p>\ud83c\udfaf Goal: Prove our apps survive chaos in Kubernetes \u2014 pods crashing, nodes failing, networks partitioning, and traffic spikes.</p>"},{"location":"phases/k8s/#what-were-building","title":"\ud83d\ude80 What We're Building","text":"<p>We're deploying real-world applications to Kubernetes with:</p> <ul> <li>Python automation for bulletproof deployments</li> <li>Enterprise security with automated secret management</li> <li>Intelligent auto-scaling based on real-time demand</li> <li>Advanced deployment strategies (Blue-Green, Canary, Rolling)</li> <li>GitOps workflows with ArgoCD and Argo Rollouts</li> </ul> <p>Chaos Agent says: \"Let's crash some pods and see what happens!\" Our mission: Build apps that survive anything.</p>"},{"location":"phases/k8s/#kubernetes-setup","title":"\u2638\ufe0f Kubernetes Setup","text":""},{"location":"phases/k8s/#local-development","title":"\u2705 Local Development","text":"<p>For local testing, use one of these options:</p> <p>Option 1: Docker Desktop Kubernetes</p> <pre><code># Enable Kubernetes in Docker Desktop\n# Settings \u2192 Kubernetes \u2192 Enable Kubernetes\nkubectl cluster-info\n</code></pre> <p>Option 2: Minikube</p> <pre><code># Start Minikube\nminikube start\nkubectl cluster-info\n</code></pre> <p>Option 3: Kind</p> <pre><code># Create Kind cluster\nkind create cluster --name chaos-workshop\nkubectl cluster-info\n</code></pre>"},{"location":"phases/k8s/#scenario-1-python-automation-hero","title":"\ud83c\udfad SCENARIO 1: Python Automation Hero","text":""},{"location":"phases/k8s/#the-chaos-agents-attack","title":"\ud83e\udde8 The Chaos Agent's Attack","text":"<p>\"Your manual kubectl commands are unreliable! Watch me break your deployments with 'simple' configuration errors! Good luck debugging YAML hell in production!\" \ud83d\ude08</p> <p>What Chaos Agent Breaks: - \u274c Missing namespaces cause deployment failures - \u274c Wrong ConfigMap names break application startup - \u274c Service misconfigurations prevent access - \u274c Missing resource limits cause production chaos - \u274c No health checks = unknown application state</p>"},{"location":"phases/k8s/#the-python-heros-response","title":"\ud83e\uddb8\u200d\u2642\ufe0f The Python Hero's Response","text":"<p>\"Not so fast, Chaos Agent! Python automation makes deployments bulletproof. Watch this!\"</p> <p>What You'll Build: - \u2705 Python Kubernetes Client automation - \u2705 Interactive Vote Application for real-world testing - \u2705 Real-time Monitoring System for deployment health - \u2705 Chaos-proof Deployment Process with error handling</p> <p>Key Learning: - Master Python Kubernetes client library - Implement automated resource creation and management - Experience enterprise-grade error handling - Build monitoring and observability systems</p>"},{"location":"phases/k8s/#scenario-2-enterprise-security-hero","title":"\ud83d\udd10 SCENARIO 2: Enterprise Security Hero","text":""},{"location":"phases/k8s/#the-security-attack","title":"\ud83e\udde8 The Security Attack","text":"<p>\"Your database passwords are EXPOSED! I can see them in plain text in your YAML files! I'll steal your data and crash your databases! Your manual secret management is a security nightmare!\" \ud83d\ude08\ud83d\udc80</p> <p>What Chaos Agent Exploits: - \u274c Plain text passwords visible in YAML files and Git repositories - \u274c Database services exposed directly to the internet - \u274c No secret rotation = permanent compromise after breach - \u274c Missing security contexts = privilege escalation attacks - \u274c No audit trails = invisible security violations</p>"},{"location":"phases/k8s/#the-security-heros-response","title":"\ud83e\uddb8\u200d\u2642\ufe0f The Security Hero's Response","text":"<p>\"Not today, Chaos Agent! Python-powered secret automation will protect our data with enterprise-grade security. Watch as I deploy bulletproof secret management!\" \ud83e\uddb8\u200d\u2642\ufe0f\ud83d\udd10</p> <p>What You'll Build: - \u2705 Enterprise Secret Management with automated generation - \u2705 Secure Todo Application with encrypted database storage - \u2705 Zero-Downtime Secret Rotation system - \u2705 Real-time Security Monitoring dashboard</p> <p>Key Learning: - Master Kubernetes Secrets API and lifecycle management - Implement enterprise-grade secret generation and rotation - Build secure multi-tier applications with encrypted storage - Deploy production-ready security controls and monitoring</p>"},{"location":"phases/k8s/#scenario-3-auto-scaling-hero","title":"\ud83d\udcc8 SCENARIO 3: Auto-Scaling Hero","text":""},{"location":"phases/k8s/#the-final-attack","title":"\ud83e\udde8 The Final Attack","text":"<p>\"Your static deployments are DOOMED! I'll launch massive traffic spikes that will overwhelm your servers! Watch as your applications crash under the weight of my resource exhaustion attacks! Your manual scaling is NO MATCH for my chaos!\" \ud83d\ude08\ud83d\udca5</p> <p>What Chaos Agent Exploits: - \u274c Fixed replica counts that can't handle traffic spikes - \u274c Manual scaling processes that are too slow to respond - \u274c Resource exhaustion leading to application crashes - \u274c No intelligent load distribution or capacity planning - \u274c Inability to scale down, wasting resources continuously</p>"},{"location":"phases/k8s/#the-auto-scaling-heros-response","title":"\ud83e\uddb8\u200d\u2642\ufe0f The Auto-Scaling Hero's Response","text":"<p>\"Not this time, Chaos Agent! My Python-powered auto-scaling system will adapt to ANY load you throw at it. Watch as intelligent algorithms automatically provision resources and maintain perfect performance!\" \ud83e\uddb8\u200d\u2642\ufe0f\ud83d\udcc8</p> <p>What You'll Build: - \u2705 Horizontal Pod Autoscaler (HPA) with intelligent scaling policies - \u2705 Interactive Load Testing Platform with real-time visualization - \u2705 Chaos Agent Attack Simulator for ultimate stress testing - \u2705 Real-time Scaling Monitor with comprehensive metrics</p> <p>Key Learning: - Master Horizontal Pod Autoscaler (HPA) configuration and behavior - Understand resource requests vs limits and their scaling impact - Implement intelligent scaling policies for production workloads - Experience real-time load testing and performance monitoring</p>"},{"location":"phases/k8s/#scenario-4-blue-green-deployment-hero","title":"\ud83d\udd04 SCENARIO 4: Blue-Green Deployment Hero","text":""},{"location":"phases/k8s/#the-deployment-chaos","title":"\ud83e\udde8 The Deployment Chaos","text":"<p>\"Deployment failed! Users are seeing errors! Your manual deployments are causing downtime and user complaints!\" \ud83d\ude08</p> <p>What Chaos Agent Exploits: - \u274c Manual deployments causing service downtime - \u274c No rollback capability when deployments fail - \u274c Users experience errors during updates - \u274c No testing environment for new versions - \u274c Single point of failure during deployments</p>"},{"location":"phases/k8s/#the-deployment-heros-response","title":"\ud83e\uddb8\u200d\u2642\ufe0f The Deployment Hero's Response","text":"<p>\"Not anymore! My visual, interactive deployment strategies will ensure zero-downtime updates and instant rollbacks. Watch as I demonstrate multiple deployment strategies with real-time pod management!\" \ud83e\uddb8\u200d\u2642\ufe0f\ud83d\udd04</p> <p>What You'll Build: - \u2705 Visual &amp; Interactive Deployment Demo with real-time pod visualization - \u2705 Blue-Green Deployment Strategy with instant traffic switching - \u2705 Progressive Rollout Strategy with gradual pod replacement - \u2705 Canary Deployment Strategy with safe testing approach - \u2705 Self-Healing Demonstrations with automatic pod recreation</p> <p>Key Learning: - Master multiple Kubernetes deployment strategies - Understand zero-downtime deployment techniques - Experience visual deployment management - Learn self-healing and high availability concepts</p>"},{"location":"phases/k8s/#scenario-5-gitops-with-argocd-argo-rollouts","title":"\ud83d\ude80 SCENARIO 5: GitOps with ArgoCD &amp; Argo Rollouts","text":""},{"location":"phases/k8s/#the-gitops-challenge","title":"\ud83e\udde8 The GitOps Challenge","text":"<p>\"Your manual deployments are inconsistent! Different environments have different configurations! Your team can't track what's deployed where! Your deployment process is a mess!\" \ud83d\ude08</p> <p>What Chaos Agent Exploits: - \u274c Manual deployments lead to environment drift - \u274c No audit trail of what's deployed - \u274c Inconsistent deployment processes across teams - \u274c No automated rollback capabilities - \u274c Lack of deployment strategy visualization</p>"},{"location":"phases/k8s/#the-gitops-heros-response","title":"\ud83e\uddb8\u200d\u2642\ufe0f The GitOps Hero's Response","text":"<p>\"Enter the world of GitOps! ArgoCD and Argo Rollouts will provide declarative, automated, and visual deployment management. Watch as I demonstrate enterprise-grade GitOps workflows!\" \ud83e\uddb8\u200d\u2642\ufe0f\ud83d\ude80</p> <p>What You'll Build: - \u2705 ArgoCD Application Management with declarative GitOps workflows - \u2705 Argo Rollouts Dashboard for visual deployment strategies - \u2705 Canary Deployment with gradual traffic shifting (25% \u2192 50% \u2192 75% \u2192 100%) - \u2705 Blue-Green Deployment with environment switching and manual promotion - \u2705 Rolling Update Strategy with pod-by-pod updates - \u2705 Real-time Monitoring with comprehensive dashboards</p> <p>Key Learning: - Master GitOps principles and ArgoCD workflows - Implement advanced deployment strategies with Argo Rollouts - Experience visual deployment management and monitoring - Learn enterprise-grade deployment automation</p>"},{"location":"phases/k8s/#complete-learning-journey","title":"\ud83c\udfaf Complete Learning Journey","text":""},{"location":"phases/k8s/#phase-4-progression","title":"Phase 4 Progression:","text":"<ol> <li>Scenario 1: Python Automation \u2192 Bulletproof deployments</li> <li>Scenario 2: Enterprise Security \u2192 Cryptographically secure secrets</li> <li>Scenario 3: Auto-Scaling \u2192 Intelligent resource management</li> <li>Scenario 4: Blue-Green Deployments \u2192 Zero-downtime strategies</li> <li>Scenario 5: GitOps with ArgoCD \u2192 Enterprise-grade automation</li> </ol>"},{"location":"phases/k8s/#skills-youll-master","title":"Skills You'll Master:","text":"<ul> <li>\u2705 Kubernetes Fundamentals: Deployments, Services, ConfigMaps, Secrets</li> <li>\u2705 Python Automation: Kubernetes client library, error handling, monitoring</li> <li>\u2705 Security Best Practices: Secret management, encryption, audit trails</li> <li>\u2705 Auto-Scaling: HPA configuration, resource optimization, load testing</li> <li>\u2705 Deployment Strategies: Blue-green, canary, rolling updates</li> <li>\u2705 GitOps: ArgoCD, Argo Rollouts, declarative infrastructure</li> <li>\u2705 Chaos Engineering: Resilience testing, failure recovery</li> <li>\u2705 Production Monitoring: Real-time metrics, health checks, observability</li> </ul>"},{"location":"phases/k8s/#chaos-testing-scenarios","title":"\ud83e\uddea Chaos Testing Scenarios","text":""},{"location":"phases/k8s/#scenario-1-pod-crash-chaos","title":"\u2705 Scenario 1: Pod Crash Chaos","text":"<pre><code># Kill random pods\nkubectl get pods --selector=app=chaos-app -o name | xargs -I {} kubectl delete {}\n\n# Verify auto-recovery\nkubectl get pods --selector=app=chaos-app\n</code></pre>"},{"location":"phases/k8s/#scenario-2-node-failure-simulation","title":"\u2705 Scenario 2: Node Failure Simulation","text":"<pre><code># Drain a node (simulate node failure)\nkubectl drain node-1 --force --ignore-daemonsets\n\n# Verify pods reschedule\nkubectl get pods --all-namespaces -o wide\n</code></pre>"},{"location":"phases/k8s/#scenario-3-resource-exhaustion","title":"\u2705 Scenario 3: Resource Exhaustion","text":"<pre><code># Create resource pressure\nkubectl run stress-test --image=busybox --requests=cpu=1000m,memory=1Gi --limits=cpu=2000m,memory=2Gi --command -- stress --cpu 4 --vm 2 --vm-bytes 1G\n</code></pre>"},{"location":"phases/k8s/#scenario-4-traffic-spike-testing","title":"\u2705 Scenario 4: Traffic Spike Testing","text":"<pre><code># Generate load to test auto-scaling\nkubectl run load-test --image=busybox --command -- sh -c \"while true; do wget -qO- http://app-service; done\"\n</code></pre>"},{"location":"phases/k8s/#scenario-5-deployment-strategy-testing","title":"\u2705 Scenario 5: Deployment Strategy Testing","text":"<pre><code># Test canary deployment\nkubectl argo rollouts promote myapp -n gitops-demo\n\n# Test blue-green promotion\nkubectl argo rollouts promote recommendationservice -n gitops-demo\n</code></pre>"},{"location":"phases/k8s/#monitoring-observability","title":"\ud83d\udcca Monitoring &amp; Observability","text":""},{"location":"phases/k8s/#metrics-to-track","title":"\u2705 Metrics to Track","text":"<ul> <li>Pod health: Ready/NotReady ratio</li> <li>Scaling: HPA current/target replicas</li> <li>Performance: Response time, throughput</li> <li>Resources: CPU/memory utilization</li> <li>Security: Secret rotation status</li> <li>Deployments: Success/failure rates</li> </ul>"},{"location":"phases/k8s/#monitoring-setup","title":"\u2705 Monitoring Setup","text":"<pre><code># Prometheus ServiceMonitor\napiVersion: monitoring.coreos.com/v1\nkind: ServiceMonitor\nmetadata:\n  name: chaos-app-monitor\nspec:\n  selector:\n    matchLabels:\n      app: chaos-app\n  endpoints:\n  - port: metrics\n    interval: 30s\n</code></pre>"},{"location":"phases/k8s/#success-criteria","title":"\ud83c\udfaf Success Criteria","text":""},{"location":"phases/k8s/#phase-4-complete-checklist","title":"\u2705 Phase 4 Complete Checklist:","text":"<ul> <li>\u2705 Scenario 1: Python automation deployed and working</li> <li>\u2705 Scenario 2: Secure todo app with encrypted secrets</li> <li>\u2705 Scenario 3: Auto-scaling challenge with HPA</li> <li>\u2705 Scenario 4: Blue-green deployment demo interactive</li> <li>\u2705 Scenario 5: GitOps with ArgoCD and Argo Rollouts</li> <li>\u2705 Chaos Testing: All scenarios tested and resilient</li> <li>\u2705 Monitoring: Real-time metrics and health checks</li> <li>\u2705 Documentation: Complete guides and troubleshooting</li> </ul> <p>Remember: Kubernetes is your fortress against chaos. When pods crash, nodes fail, networks partition, or traffic spikes, your apps should keep running! \ud83d\udd25</p> <p>The Chaos Agent has been defeated in all 5 scenarios! \ud83c\udf89</p>"},{"location":"phases/setup/","title":"\ud83d\udee0\ufe0f Complete Workshop Setup Guide","text":"<p>Welcome to the CI/CD Chaos Workshop Setup Guide! This comprehensive guide will prepare your environment for all phases and scenarios\u2014from local Python testing to advanced Kubernetes GitOps with ArgoCD and Argo Rollouts.</p> <p>\ud83c\udfaf Goal: Get your environment battle-ready to defeat the Chaos Agent in every scenario! \ud83d\udd76\ufe0f</p>"},{"location":"phases/setup/#prerequisites-checklist","title":"\ud83d\udccb Prerequisites Checklist","text":""},{"location":"phases/setup/#hardware-requirements","title":"\ud83d\udcbb Hardware Requirements","text":"<ul> <li>RAM: 8GB+ (16GB recommended for Kubernetes/ArgoCD scenarios)</li> <li>Storage: 10GB+ free disk space</li> <li>Network: Reliable internet connection</li> <li>Access: Administrator/root access</li> </ul>"},{"location":"phases/setup/#software-requirements","title":"\ud83d\udee0\ufe0f Software Requirements","text":"<ul> <li>Python: 3.10+ for automation and testing</li> <li>Docker: Desktop or Engine for containerization</li> <li>Kubernetes: Local cluster (Docker Desktop, Minikube, Kind, or cloud)</li> <li>Git: Version control</li> <li>Node.js: For frontend demos (optional but recommended)</li> </ul>"},{"location":"phases/setup/#workshop-goals","title":"\ud83c\udfaf Workshop Goals","text":"<ul> <li>Build chaos-resistant CI/CD pipelines</li> <li>Master Testcontainers for reliable testing</li> <li>Deploy to Kubernetes with confidence</li> <li>Implement GitOps with ArgoCD and Argo Rollouts</li> <li>Defeat the Chaos Agent in all scenarios! \ud83d\udd25</li> </ul>"},{"location":"phases/setup/#step-1-install-python-310","title":"\ud83d\udc0d Step 1: Install Python 3.10+","text":""},{"location":"phases/setup/#windows-installation","title":"\ud83e\ude9f Windows Installation","text":"<ol> <li>Download Python</li> <li>Go to python.org/downloads</li> <li>Download Python 3.10 or higher</li> <li> <p>Important: Check \"Add Python to PATH\" during installation</p> </li> <li> <p>Verify Installation <code>cmd    python --version    # Should show: Python 3.10.x or higher</code></p> </li> </ol>"},{"location":"phases/setup/#macos-installation","title":"\ud83c\udf4e macOS Installation","text":"<p>Option A: Using Homebrew (Recommended)</p> <pre><code># Install Homebrew first if you don't have it\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n\n# Install Python\nbrew install python@3.10\n</code></pre> <p>Option B: Download from python.org - Visit python.org/downloads - Download the macOS installer - Run the installer</p> <p>Verify Installation</p> <pre><code>python3 --version\n# Should show: Python 3.10.x or higher\n</code></pre>"},{"location":"phases/setup/#linux-installation","title":"\ud83d\udc27 Linux Installation","text":"<p>Ubuntu/Debian</p> <pre><code># Update package list\nsudo apt update\n\n# Install Python 3.10\nsudo apt install python3.10 python3.10-venv python3-pip\n\n# Verify installation\npython3.10 --version\n</code></pre> <p>CentOS/RHEL</p> <pre><code># Install Python 3.10\nsudo yum install python3.10 python3-pip\n\n# Verify installation\npython3.10 --version\n</code></pre>"},{"location":"phases/setup/#step-2-install-docker-desktop","title":"\ud83d\udc33 Step 2: Install Docker Desktop","text":""},{"location":"phases/setup/#windows-installation_1","title":"\ud83e\ude9f Windows Installation","text":"<ol> <li>Download Docker Desktop</li> <li>Go to docker.com/products/docker-desktop</li> <li>Download Docker Desktop for Windows</li> <li>Run the installer</li> <li> <p>Important: Enable WSL 2 if prompted</p> </li> <li> <p>Start Docker Desktop</p> </li> <li>Launch Docker Desktop from Start Menu</li> <li>Wait for the whale icon to stop animating</li> <li> <p>Docker is ready when the icon is static</p> </li> <li> <p>Verify Installation <code>cmd    docker --version    docker run hello-world</code></p> </li> </ol>"},{"location":"phases/setup/#macos-installation_1","title":"\ud83c\udf4e macOS Installation","text":"<ol> <li>Download Docker Desktop</li> <li>Go to docker.com/products/docker-desktop</li> <li>Download Docker Desktop for Mac</li> <li>Drag Docker to Applications folder</li> <li> <p>Launch Docker Desktop</p> </li> <li> <p>Verify Installation <code>bash    docker --version    docker run hello-world</code></p> </li> </ol>"},{"location":"phases/setup/#linux-installation_1","title":"\ud83d\udc27 Linux Installation","text":"<p>Install Docker using convenience script</p> <pre><code># Install Docker\ncurl -fsSL https://get.docker.com -o get-docker.sh\nsudo sh get-docker.sh\n\n# Add your user to docker group (log out and back in)\nsudo usermod -aG docker $USER\n\n# Start Docker service\nsudo systemctl start docker\nsudo systemctl enable docker\n\n# Verify installation\ndocker --version\ndocker run hello-world\n</code></pre>"},{"location":"phases/setup/#step-3-choose-your-kubernetes-cluster","title":"\u2638\ufe0f Step 3: Choose Your Kubernetes Cluster","text":""},{"location":"phases/setup/#docker-desktop-kubernetes-easiest","title":"\ud83d\udc33 Docker Desktop Kubernetes (Easiest)","text":"<p>Perfect if you already installed Docker Desktop above!</p> <ol> <li>Enable Kubernetes</li> <li>Open Docker Desktop</li> <li>Go to Settings \u2192 Kubernetes</li> <li>Check \"Enable Kubernetes\"</li> <li> <p>Click \"Apply &amp; Restart\"</p> </li> <li> <p>Verify Installation <code>bash    kubectl version --client    kubectl cluster-info</code></p> </li> </ol>"},{"location":"phases/setup/#minikube-most-popular","title":"\ud83d\ude80 Minikube (Most Popular)","text":"<p>The most popular local Kubernetes cluster</p> <p>Install Minikube:</p> <p>Windows:</p> <pre><code># Using Chocolatey\nchoco install minikube\n\n# Or download manually from: https://minikube.sigs.k8s.io/docs/start/\n</code></pre> <p>macOS:</p> <pre><code># Using Homebrew\nbrew install minikube\n</code></pre> <p>Linux:</p> <pre><code># Download and install\ncurl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64\nsudo install minikube-linux-amd64 /usr/local/bin/minikube\n</code></pre> <p>Start and Verify:</p> <pre><code>minikube start\nkubectl version --client\nminikube status\n</code></pre>"},{"location":"phases/setup/#kind-kubernetes-in-docker","title":"\ud83d\udc33 Kind (Kubernetes in Docker)","text":"<p>Lightweight Kubernetes cluster using Docker</p> <p>Install Kind:</p> <p>Windows:</p> <pre><code># Using Chocolatey\nchoco install kind\n</code></pre> <p>macOS:</p> <pre><code># Using Homebrew\nbrew install kind\n</code></pre> <p>Linux:</p> <pre><code># Download and install\ncurl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64\nchmod +x ./kind\nsudo mv ./kind /usr/local/bin/kind\n</code></pre> <p>Create Cluster and Verify:</p> <pre><code>kind create cluster --name chaos-workshop\nkubectl version --client\nkind get clusters\n</code></pre>"},{"location":"phases/setup/#cloud-kubernetes-gkeeksaks","title":"\u2601\ufe0f Cloud Kubernetes (GKE/EKS/AKS)","text":"<p>For cloud-based development</p> <ul> <li>Google Kubernetes Engine (GKE): Follow GKE setup guide</li> <li>Amazon EKS: Follow EKS setup guide</li> <li>Azure Kubernetes Service (AKS): Follow AKS setup guide</li> </ul>"},{"location":"phases/setup/#step-4-install-kubectl-kubernetes-cli","title":"\ud83c\udfaf Step 4: Install kubectl (Kubernetes CLI)","text":""},{"location":"phases/setup/#windows-installation_2","title":"\ud83e\ude9f Windows Installation","text":"<pre><code># Using Chocolatey\nchoco install kubernetes-cli\n\n# Or download from: https://kubernetes.io/docs/tasks/tools/install-kubectl/\n</code></pre>"},{"location":"phases/setup/#macos-installation_2","title":"\ud83c\udf4e macOS Installation","text":"<pre><code># Using Homebrew\nbrew install kubectl\n\n# Or using curl\ncurl -LO \"https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/darwin/amd64/kubectl\"\nchmod +x ./kubectl\nsudo mv ./kubectl /usr/local/bin/kubectl\n</code></pre>"},{"location":"phases/setup/#linux-installation_2","title":"\ud83d\udc27 Linux Installation","text":"<pre><code># Download kubectl\ncurl -LO \"https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl\"\nchmod +x kubectl\nsudo mv kubectl /usr/local/bin/\n</code></pre> <p>Verify kubectl Installation:</p> <pre><code>kubectl version --client\n</code></pre>"},{"location":"phases/setup/#step-5-clone-workshop-repository","title":"\ud83d\udce6 Step 5: Clone Workshop Repository","text":""},{"location":"phases/setup/#install-git-if-not-already-installed","title":"Install Git (if not already installed)","text":"<p>Windows: Download from git-scm.com</p> <p>macOS:</p> <pre><code>brew install git\n</code></pre> <p>Linux:</p> <pre><code>sudo apt install git  # Ubuntu/Debian\nsudo yum install git  # CentOS/RHEL\n</code></pre>"},{"location":"phases/setup/#clone-the-workshop-repository","title":"Clone the workshop repository","text":"<pre><code>git clone https://github.com/vellankikoti/ci-cd-chaos-workshop.git\ncd ci-cd-chaos-workshop\n</code></pre>"},{"location":"phases/setup/#step-6-set-up-python-virtual-environment","title":"\ud83d\udc0d Step 6: Set Up Python Virtual Environment","text":""},{"location":"phases/setup/#create-a-virtual-environment","title":"Create a virtual environment","text":"<pre><code># Windows\npython -m venv venv\n\n# macOS/Linux\npython3 -m venv venv\n</code></pre>"},{"location":"phases/setup/#activate-the-virtual-environment","title":"Activate the virtual environment","text":"<p>Windows:</p> <pre><code>venv\\Scripts\\activate\n</code></pre> <p>macOS/Linux:</p> <pre><code>source venv/bin/activate\n</code></pre>"},{"location":"phases/setup/#verify-activation","title":"Verify activation","text":"<pre><code># You should see (venv) at the start of your prompt\nwhich python  # macOS/Linux\nwhere python  # Windows\n</code></pre>"},{"location":"phases/setup/#step-7-install-required-packages","title":"\ud83d\udcda Step 7: Install Required Packages","text":""},{"location":"phases/setup/#upgrade-pip","title":"Upgrade pip","text":"<pre><code>pip install --upgrade pip\n</code></pre>"},{"location":"phases/setup/#install-workshop-dependencies","title":"Install workshop dependencies","text":"<pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"phases/setup/#install-additional-packages","title":"Install additional packages","text":"<pre><code>pip install docker\npip install kubernetes\npip install jenkins\npip install jinja2\npip install weasyprint\npip install mkdocs\npip install mkdocs-material\n</code></pre>"},{"location":"phases/setup/#verify-installations","title":"Verify installations","text":"<pre><code>python -c \"import pytest, testcontainers, docker, kubernetes, fastapi, uvicorn; print('\u2705 All packages installed successfully!')\"\n</code></pre>"},{"location":"phases/setup/#step-8-install-nodejs-for-frontend-demos","title":"\ud83c\udfaf Step 8: Install Node.js (for frontend demos)","text":""},{"location":"phases/setup/#macos-installation_3","title":"\ud83c\udf4e macOS Installation","text":"<pre><code>brew install node\n</code></pre>"},{"location":"phases/setup/#windows-installation_3","title":"\ud83e\ude9f Windows Installation","text":"<p>Download from nodejs.org</p>"},{"location":"phases/setup/#linux-installation_3","title":"\ud83d\udc27 Linux Installation","text":"<p>Ubuntu/Debian:</p> <pre><code>curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -\nsudo apt-get install -y nodejs\n</code></pre> <p>CentOS/RHEL:</p> <pre><code>curl -fsSL https://rpm.nodesource.com/setup_lts.x | sudo bash -\nsudo yum install -y nodejs\n</code></pre>"},{"location":"phases/setup/#verify-nodejs-installation","title":"Verify Node.js installation","text":"<pre><code>node --version\nnpm --version\n</code></pre>"},{"location":"phases/setup/#step-9-install-argocd-cli-optional-for-advanced-gitops","title":"\ud83d\ude80 Step 9: Install ArgoCD CLI (Optional, for advanced GitOps)","text":""},{"location":"phases/setup/#macos-installation_4","title":"\ud83c\udf4e macOS Installation","text":"<pre><code>brew install argocd\n</code></pre>"},{"location":"phases/setup/#linux-installation_4","title":"\ud83d\udc27 Linux Installation","text":"<pre><code>curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64\nchmod +x argocd\nsudo mv argocd /usr/local/bin/\n</code></pre>"},{"location":"phases/setup/#windows-installation_4","title":"\ud83e\ude9f Windows Installation","text":"<pre><code>choco install argocd-cli\n</code></pre>"},{"location":"phases/setup/#step-10-install-argo-rollouts-plugin-optional-for-advanced-rollout-ui","title":"\ud83d\udd04 Step 10: Install Argo Rollouts Plugin (Optional, for advanced rollout UI)","text":""},{"location":"phases/setup/#macos-installation_5","title":"\ud83c\udf4e macOS Installation","text":"<pre><code>brew install argo-rollouts\n</code></pre>"},{"location":"phases/setup/#linux-installation_5","title":"\ud83d\udc27 Linux Installation","text":"<pre><code>curl -sLO https://github.com/argoproj/argo-rollouts/releases/latest/download/kubectl-argo-rollouts-linux-amd64\nchmod +x kubectl-argo-rollouts-linux-amd64\nsudo mv kubectl-argo-rollouts-linux-amd64 /usr/local/bin/kubectl-argo-rollouts\n</code></pre>"},{"location":"phases/setup/#windows-installation_5","title":"\ud83e\ude9f Windows Installation","text":"<pre><code>choco install argo-rollouts\n</code></pre>"},{"location":"phases/setup/#step-11-test-your-setup","title":"\ud83e\uddea Step 11: Test Your Setup","text":""},{"location":"phases/setup/#test-python","title":"Test Python","text":"<pre><code>python --version\n</code></pre>"},{"location":"phases/setup/#test-docker","title":"Test Docker","text":"<pre><code>docker run hello-world\n</code></pre>"},{"location":"phases/setup/#test-kubernetes","title":"Test Kubernetes","text":"<pre><code>kubectl version --client\nkubectl cluster-info\n</code></pre>"},{"location":"phases/setup/#test-testcontainers","title":"Test Testcontainers","text":"<pre><code>python -c \"\nfrom testcontainers.core.container import DockerContainer\nfrom testcontainers.core.waiting_utils import wait_for_logs\n\n# Test Redis container\nwith DockerContainer('redis:alpine') as redis:\n    redis.with_exposed_ports(6379)\n    redis.start()\n    print('\u2705 Testcontainers working!')\n\"\n</code></pre>"},{"location":"phases/setup/#test-nodejs","title":"Test Node.js","text":"<pre><code>node --version\nnpm --version\n</code></pre>"},{"location":"phases/setup/#step-12-youre-ready","title":"\ud83c\udf89 Step 12: You're Ready!","text":""},{"location":"phases/setup/#congratulations-youre-ready-for-chaos","title":"\ud83c\udf8a Congratulations! You're Ready for Chaos!","text":"<p>If all tests pass, you're ready to battle the Chaos Agent in every scenario!</p>"},{"location":"phases/setup/#next-steps","title":"\ud83d\ude80 Next Steps:","text":"<ol> <li>\u2705 Read the Workshop Overview</li> <li>\u2705 Start with Phase 1: Test Mayhem</li> <li>\u2705 Prepare to defeat chaos! \ud83d\udd25</li> </ol>"},{"location":"phases/setup/#troubleshooting","title":"\ud83c\udd98 Troubleshooting","text":""},{"location":"phases/setup/#common-issues-solutions","title":"Common Issues &amp; Solutions","text":""},{"location":"phases/setup/#docker-not-starting","title":"\ud83d\udc33 Docker not starting","text":"<p>Windows: - Make sure WSL 2 is enabled - Check Docker Desktop is running</p> <p>macOS: - Check Docker Desktop is running - Restart Docker Desktop if needed</p> <p>Linux:</p> <pre><code>sudo systemctl start docker\nsudo systemctl enable docker\n</code></pre>"},{"location":"phases/setup/#kubernetes-connection-issues","title":"\u2638\ufe0f Kubernetes connection issues","text":"<p>Minikube:</p> <pre><code>minikube start\n</code></pre> <p>Kind:</p> <pre><code>kind create cluster\n</code></pre> <p>Docker Desktop: - Enable Kubernetes in Docker Desktop settings</p>"},{"location":"phases/setup/#python-package-issues","title":"\ud83d\udc0d Python package issues","text":"<ul> <li>Make sure your virtual environment is activated</li> <li>Try: <code>pip install --upgrade pip setuptools wheel</code></li> <li>Check Python version: <code>python --version</code></li> </ul>"},{"location":"phases/setup/#permission-errors","title":"\ud83d\udd10 Permission errors","text":"<p>Windows: - Run as Administrator</p> <p>Linux/macOS: - Use <code>sudo</code> where needed - Check file permissions and ownership</p>"},{"location":"phases/setup/#still-stuck","title":"Still Stuck?","text":"<ol> <li>Check the Troubleshooting Guide</li> <li>Ask in the workshop Discord/Slack</li> <li>Open an issue on GitHub</li> </ol>"},{"location":"phases/setup/#quick-verification-checklist","title":"\ud83c\udfaf Quick Verification Checklist","text":""},{"location":"phases/setup/#final-verification","title":"Final Verification","text":"<p>Before the workshop starts, make sure you can run:</p>"},{"location":"phases/setup/#python-works","title":"\u2705 Python works","text":"<pre><code>python --version\n</code></pre>"},{"location":"phases/setup/#docker-works","title":"\u2705 Docker works","text":"<pre><code>docker run hello-world\n</code></pre>"},{"location":"phases/setup/#kubernetes-works","title":"\u2705 Kubernetes works","text":"<pre><code>kubectl version --client\n</code></pre>"},{"location":"phases/setup/#virtual-environment-is-active","title":"\u2705 Virtual environment is active","text":"<pre><code>echo $VIRTUAL_ENV  # Should show path to venv\n</code></pre>"},{"location":"phases/setup/#packages-are-installed","title":"\u2705 Packages are installed","text":"<pre><code>python -c \"import pytest, testcontainers, docker, kubernetes, fastapi, uvicorn; print('Ready!')\"\n</code></pre>"},{"location":"phases/setup/#nodejs-works-optional","title":"\u2705 Node.js works (optional)","text":"<pre><code>node --version\nnpm --version\n</code></pre>"},{"location":"phases/setup/#ready-message","title":"Ready Message","text":"<p>If all \u2705 pass, you're ready to create some chaos! \ud83e\udde8</p>"},{"location":"phases/setup/#workshop-phases-overview","title":"\ud83d\udcca Workshop Phases Overview","text":""},{"location":"phases/setup/#phase-1-testcontainers","title":"Phase 1: Testcontainers","text":"<ul> <li>Goal: Master reliable testing with containers</li> <li>Skills: Python testing, Docker integration, database testing</li> <li>Duration: 30 minutes</li> </ul>"},{"location":"phases/setup/#phase-2-jenkins","title":"Phase 2: Jenkins","text":"<ul> <li>Goal: Build chaos-resistant CI/CD pipelines</li> <li>Skills: Jenkins automation, pipeline scripting, error handling</li> <li>Duration: 45 minutes</li> </ul>"},{"location":"phases/setup/#phase-3-docker","title":"Phase 3: Docker","text":"<ul> <li>Goal: Containerize applications and handle Docker chaos</li> <li>Skills: Docker builds, multi-stage builds, image optimization</li> <li>Duration: 40 minutes</li> </ul>"},{"location":"phases/setup/#phase-4-kubernetes","title":"Phase 4: Kubernetes","text":"<ul> <li>Goal: Deploy to Kubernetes and survive chaos</li> <li>Skills: K8s deployments, auto-scaling, GitOps with ArgoCD</li> <li>Duration: 60 minutes</li> </ul>"},{"location":"phases/setup/#success-criteria","title":"\ud83c\udfaf Success Criteria","text":""},{"location":"phases/setup/#complete-setup-checklist","title":"\u2705 Complete Setup Checklist:","text":"<ul> <li>\u2705 Python 3.10+ installed and working</li> <li>\u2705 Docker Desktop/Engine installed and running</li> <li>\u2705 Kubernetes cluster accessible (local or cloud)</li> <li>\u2705 kubectl configured and working</li> <li>\u2705 Git installed and configured</li> <li>\u2705 Virtual environment created and activated</li> <li>\u2705 All Python packages installed</li> <li>\u2705 Node.js installed (for frontend demos)</li> <li>\u2705 ArgoCD CLI installed (for GitOps scenarios)</li> <li>\u2705 Argo Rollouts plugin installed (for advanced rollouts)</li> <li>\u2705 All verification tests passing</li> </ul>   **See you in the workshop! Let's defeat that Chaos Agent together! \ud83d\udd76\ufe0f\ud83d\udd25**"},{"location":"phases/testcontainers/","title":"\ud83e\uddea Testcontainers: Bulletproof Your Integration Tests (Database)","text":"<p>Welcome to Phase 1 of the CI/CD Chaos Workshop \u2014 where you'll transform flaky integration tests into production-grade, chaos-hardened pipelines using Testcontainers!</p>"},{"location":"phases/testcontainers/#what-youll-experience","title":"\ud83c\udfaf What You'll Experience","text":"<ul> <li>Real Database Testing: Spin up actual MySQL, PostgreSQL, MariaDB, MongoDB, and Redis containers for every test run</li> <li>Chaos Engineering: Experience intentional test failures, random delays, and container crashes to build resilience</li> <li>Production-Grade Patterns: Learn fixtures, isolation, cleanup, and reporting that work in real CI/CD pipelines</li> <li>Hands-On Mastery: Write, run, and debug tests against 5 different database technologies</li> </ul>"},{"location":"phases/testcontainers/#why-testcontainers-matter","title":"\ud83d\ude80 Why Testcontainers Matter","text":"<p>The Problem: Your tests work on your machine but fail in CI. Why? Because you're testing against different database versions, configurations, or even shared databases that other developers are using.</p> <p>The Solution: Testcontainers spins up fresh, isolated database containers for every test run. No more \"works on my machine\" \u2014 your tests run against the exact same environment every time.</p> <p>The Chaos Angle: What happens when your database crashes mid-test? What if the network is slow? Testcontainers lets you simulate these failures and prove your app survives them.</p>"},{"location":"phases/testcontainers/#hands-on-scenarios","title":"\ud83e\uddea Hands-On Scenarios","text":""},{"location":"phases/testcontainers/#1-mysql-the-foundation","title":"1. MySQL: The Foundation","text":"<p>What You'll Do: - Spin up MySQL 8.0 containers with proper authentication - Write 5 comprehensive test cases: version checks, CRUD operations, constraints, and cleanup - Experience chaos delays and random failures - Learn SQLAlchemy integration patterns</p> <p>Real Code You'll Write:</p> <pre><code>def test_mysql_version():\n    mysql, engine = get_mysql_engine()\n    with engine.connect() as conn:\n        result = conn.execute(text(\"SELECT VERSION()\"))\n        assert \"8.0\" in result.fetchone()[0]\n</code></pre> <p>Chaos Lessons: Version mismatches, connection failures, and credential chaos</p>"},{"location":"phases/testcontainers/#2-postgresql-the-modern-choice","title":"2. PostgreSQL: The Modern Choice","text":"<p>What You'll Do: - Use pytest fixtures for efficient container reuse - Test PostgreSQL-specific features like SERIAL primary keys - Implement proper transaction handling and rollbacks - Experience the power of test isolation with automatic table truncation</p> <p>Real Code You'll Write:</p> <pre><code>@pytest.fixture(scope=\"module\")\ndef pg_engine():\n    with PostgresContainer(\"postgres:15\") as postgres:\n        engine = create_engine(postgres.get_connection_url())\n        yield engine\n</code></pre> <p>Chaos Lessons: Connection pooling, transaction isolation, and constraint violations</p>"},{"location":"phases/testcontainers/#3-mariadb-the-compatible-alternative","title":"3. MariaDB: The Compatible Alternative","text":"<p>What You'll Do: - Test MariaDB as a MySQL drop-in replacement - Discover subtle SQL syntax differences - Handle character set and encoding challenges - Compare performance and behavior between MySQL and MariaDB</p> <p>Real Code You'll Write:</p> <pre><code>def test_mariadb_character_set():\n    with MariaDbContainer(\"mariadb:10.6\") as mariadb:\n        # Test UTF-8 support and MariaDB-specific features\n        conn.execute(text(\"INSERT INTO users (name) VALUES ('Jos\u00e9');\"))\n</code></pre> <p>Chaos Lessons: Vendor compatibility, character encoding, and migration challenges</p>"},{"location":"phases/testcontainers/#4-mongodb-document-database-mastery","title":"4. MongoDB: Document Database Mastery","text":"<p>What You'll Do: - Work with document-based data instead of relational tables - Test MongoDB-specific operations: insert, find, update, delete - Handle large documents and complex queries - Experience NoSQL testing patterns</p> <p>Real Code You'll Write:</p> <pre><code>def test_mongodb_document_operations():\n    with MongoDbContainer(\"mongo:6.0\") as mongo:\n        client = mongo.get_connection_client()\n        collection = client.test_db.users\n        result = collection.insert_one({\"name\": \"Alice\", \"age\": 30})\n        assert result.inserted_id is not None\n</code></pre> <p>Chaos Lessons: Document size limits, indexing failures, and connection drops</p>"},{"location":"phases/testcontainers/#5-redis-caching-under-pressure","title":"5. Redis: Caching Under Pressure","text":"<p>What You'll Do: - Test key-value operations and data structures - Implement TTL (Time To Live) and expiration testing - Handle memory pressure and connection limits - Experience caching-specific failure scenarios</p> <p>Real Code You'll Write:</p> <pre><code>def test_redis_key_expiration():\n    redis_client.setex(\"session\", 2, \"active\")\n    assert redis_client.get(\"session\") == b\"active\"\n    time.sleep(3)\n    assert redis_client.get(\"session\") is None\n</code></pre> <p>Chaos Lessons: Memory limits, connection pool exhaustion, and cache invalidation</p>"},{"location":"phases/testcontainers/#built-in-chaos-engineering","title":"\ud83c\udfad Built-In Chaos Engineering","text":"<p>Every test includes intentional chaos to build resilience:</p> <pre><code>def chaos_delay(max_seconds=3):\n    \"\"\"Introduce random delays to simulate real-world variability\"\"\"\n    delay = random.randint(0, max_seconds)\n    if delay &gt; 0:\n        print(f\"\ud83d\udca5 Chaos delay: sleeping {delay} seconds...\")\n        time.sleep(delay)\n</code></pre> <p>Chaos Scenarios You'll Experience: - Random Delays: Tests take unpredictable time, simulating network latency - Container Crashes: Databases stop mid-test to verify error handling - Resource Limits: Memory and CPU constraints to test graceful degradation - Connection Failures: Network interruptions to prove retry logic works</p>"},{"location":"phases/testcontainers/#production-patterns-youll-learn","title":"\ud83c\udfd7\ufe0f Production Patterns You'll Learn","text":""},{"location":"phases/testcontainers/#test-isolation","title":"Test Isolation","text":"<pre><code>@pytest.fixture(autouse=True)\ndef truncate_users_table(pg_engine):\n    \"\"\"Automatically clean up between tests\"\"\"\n    with pg_engine.connect() as conn:\n        conn.execute(text(\"TRUNCATE TABLE users;\"))\n</code></pre>"},{"location":"phases/testcontainers/#container-lifecycle-management","title":"Container Lifecycle Management","text":"<pre><code>def get_mysql_engine():\n    mysql = MySqlContainer(\"mysql:8.0\")\n    mysql.start()\n    try:\n        yield create_engine(mysql.get_connection_url())\n    finally:\n        mysql.stop()\n</code></pre>"},{"location":"phases/testcontainers/#comprehensive-error-handling","title":"Comprehensive Error Handling","text":"<pre><code>def test_primary_key_constraint():\n    with pytest.raises(sqlalchemy.exc.IntegrityError):\n        conn.execute(text(\"INSERT INTO users (id, name) VALUES (1, 'Duplicate');\"))\n</code></pre>"},{"location":"phases/testcontainers/#reporting-monitoring","title":"\ud83d\udcca Reporting &amp; Monitoring","text":""},{"location":"phases/testcontainers/#beautiful-html-reports","title":"Beautiful HTML Reports","text":"<pre><code>pytest testcontainers/ --html=reports/testcontainers-report.html --self-contained-html\n</code></pre>"},{"location":"phases/testcontainers/#coverage-analysis","title":"Coverage Analysis","text":"<pre><code>pytest testcontainers/ --cov=testcontainers --cov-report=html\n</code></pre>"},{"location":"phases/testcontainers/#real-time-container-monitoring","title":"Real-Time Container Monitoring","text":"<pre><code># Watch containers start and stop\ndocker ps\n\n# Inspect logs for debugging\ndocker logs &lt;container_id&gt;\n</code></pre>"},{"location":"phases/testcontainers/#how-to-run","title":"\ud83d\ude80 How to Run","text":""},{"location":"phases/testcontainers/#quick-start","title":"Quick Start","text":"<pre><code># Install dependencies\npip install testcontainers pytest sqlalchemy redis pymongo\n\n# Run all database tests\npytest testcontainers/ -v\n\n# Run specific database tests\npytest testcontainers/test_mysql_container.py -v\npytest testcontainers/test_postgres_container.py -v\npytest testcontainers/test_redis_container.py -v\n</code></pre>"},{"location":"phases/testcontainers/#expected-output","title":"Expected Output","text":"<pre><code>\u2728 \ud83d\ude80 Starting test: Check MySQL Version\n\ud83d\udca5 Chaos delay introduced... sleeping 2 seconds.\n\u2705 MySQL Version: 8.0.36\n\u2705 MySQL Version test passed!\n\n\u2728 \ud83d\ude80 Starting test: Insert and Query One Row\n\u2705 Successfully inserted and queried Alice!\n\u2705 Insert and Query test passed!\n</code></pre>"},{"location":"phases/testcontainers/#learning-outcomes","title":"\ud83c\udfaf Learning Outcomes","text":"<p>By the end of Phase 1, you'll be able to:</p> <p>\u2705 Write bulletproof database tests that work consistently across all environments \u2705 Handle real-world failures with proper error handling and retry logic \u2705 Use Testcontainers effectively for any database technology \u2705 Generate professional reports that stakeholders can understand \u2705 Debug container issues quickly and efficiently \u2705 Apply chaos engineering principles to make your tests more robust  </p>"},{"location":"phases/testcontainers/#the-chaos-agents-challenge","title":"\ud83c\udfad The Chaos Agent's Challenge","text":"<p>Chaos Agent: \"Let's just test against the shared dev database. What could go wrong?\"</p> <p>Your Response: \"Everything! Different developers, different data, different versions. Testcontainers gives us isolated, repeatable, production-like environments for every test run.\"</p>"},{"location":"phases/testcontainers/#next-steps","title":"\ud83c\udfc1 Next Steps","text":"<p>\u2705 Phase 1 Complete: You now have chaos-proof database tests! \u2705 Ready for Phase 2: Docker Mastery \u2014 where you'll build, analyze, and break real Docker images. \u2705 Chaos Agent Status: Defeated in database testing! \ud83d\udd76\ufe0f  </p> <p>Remember: Testcontainers are your shield against chaos. When production throws a curveball, your tests will be ready! \ud83d\ude80</p> <p>\ud83d\udca1 Pro Tip: The chaos delays and random failures in these tests aren't bugs \u2014 they're features! They're teaching you to write resilient code that handles real-world unpredictability.</p>"},{"location":"phases/testcontainers/#reference-httpsgithubcomvellankikotitestcontainers-db-message-brokers","title":"Reference: https://github.com/vellankikoti/testcontainers-db-message-brokers","text":""},{"location":"testcontainers/mariadb/","title":"MariaDB Container Testing","text":"<p>Why MariaDB?</p> <p>\u2705 MariaDB is a drop-in replacement for MySQL with open-source community support, making it perfect for containerized tests in CI/CD.</p>"},{"location":"testcontainers/mariadb/#test-cases-implemented","title":"\u2705 Test Cases Implemented","text":""},{"location":"testcontainers/mariadb/#test-case-1-check-mariadb-version","title":"\u2705 Test Case 1 \u2014 Check MariaDB Version","text":"<p>Verifies the container is running and accessible.</p> <pre><code>result = conn.execute(text(\"SELECT VERSION();\")).fetchone()\nassert \"MariaDB\" in result[0]\n</code></pre>"},{"location":"testcontainers/mariadb/#test-case-2-insert-and-query","title":"\u2705 Test Case 2 \u2014 Insert and Query","text":"<p>Tests simple INSERT and SELECT functionality.</p> <pre><code>conn.execute(text(\"INSERT INTO users (name) VALUES ('Alice');\"))\nresult = conn.execute(text(\"SELECT name FROM users;\")).fetchone()\nassert result[0] == \"Alice\"\n</code></pre>"},{"location":"testcontainers/mariadb/#test-case-3-insert-multiple-rows","title":"\u2705 Test Case 3 \u2014 Insert Multiple Rows","text":"<p>Inserts multiple rows and confirms row count.</p> <pre><code>conn.execute(text(\"INSERT INTO users (name) VALUES ('Bob'), ('Charlie');\"))\nresult = conn.execute(text(\"SELECT COUNT(*) FROM users;\")).fetchone()\nassert result[0] == 3\n</code></pre>"},{"location":"testcontainers/mariadb/#test-case-4-primary-key-constraint","title":"\u2705 Test Case 4 \u2014 Primary Key Constraint","text":"<p>Tests primary key uniqueness.</p> <pre><code>conn.execute(text(\"INSERT INTO users (id, name) VALUES (1, 'David');\"))\nwith pytest.raises(Exception):\n    conn.execute(text(\"INSERT INTO users (id, name) VALUES (1, 'Eve');\"))\n</code></pre>"},{"location":"testcontainers/mariadb/#test-case-5-truncate-table","title":"\u2705 Test Case 5 \u2014 Truncate Table","text":"<p>Clears data and verifies the table is empty.</p> <pre><code>conn.execute(text(\"TRUNCATE TABLE users;\"))\nresult = conn.execute(text(\"SELECT COUNT(*) FROM users;\")).fetchone()\nassert result[0] == 0\n</code></pre>"},{"location":"testcontainers/mariadb/#how-to-run-the-tests","title":"\u2705 How to Run the Tests","text":"<p>Run:</p> <pre><code>pytest -v testcontainers/test_mariadb_container.py\n</code></pre> <p>\u2705 Expected:</p> <pre><code>5 passed in X.XXs\n</code></pre>"},{"location":"testcontainers/mariadb/#useful-commands","title":"\u2705 Useful Commands","text":"<ul> <li>Check running containers:</li> </ul> <p><code>bash   docker ps</code></p> <ul> <li>Inspect logs for the MariaDB container:</li> </ul> <p><code>bash   docker logs &lt;container_id&gt;</code></p>"},{"location":"testcontainers/mariadb/#chaos-testing-scenarios","title":"\ud83e\uddea Chaos Testing Scenarios","text":""},{"location":"testcontainers/mariadb/#scenario-1-mysql-vs-mariadb-compatibility","title":"\u2705 Scenario 1: MySQL vs MariaDB Compatibility","text":"<pre><code>def test_mariadb_mysql_compatibility():\n    \"\"\"Test that our app works with both MySQL and MariaDB\"\"\"\n    with MariaDbContainer(\"mariadb:10.6\") as mariadb:\n        conn = create_connection(mariadb.get_connection_url())\n\n        # Test MariaDB-specific features\n        result = conn.execute(text(\"SELECT @@version_comment;\")).fetchone()\n        assert \"MariaDB\" in result[0]\n</code></pre>"},{"location":"testcontainers/mariadb/#scenario-2-character-set-issues","title":"\u2705 Scenario 2: Character Set Issues","text":"<pre><code>def test_mariadb_character_set():\n    \"\"\"Test that our app handles MariaDB character set differences\"\"\"\n    with MariaDbContainer(\"mariadb:10.6\") as mariadb:\n        conn = create_connection(mariadb.get_connection_url())\n\n        # Test UTF-8 support\n        conn.execute(text(\"INSERT INTO users (name) VALUES ('Jos\u00e9');\"))\n        result = conn.execute(text(\"SELECT name FROM users WHERE name = 'Jos\u00e9';\")).fetchone()\n        assert result[0] == \"Jos\u00e9\"\n</code></pre>"},{"location":"testcontainers/mariadb/#monitoring-reporting","title":"\ud83d\udcca Monitoring &amp; Reporting","text":""},{"location":"testcontainers/mariadb/#generate-html-report","title":"\u2705 Generate HTML Report","text":"<pre><code>pytest testcontainers/test_mariadb_container.py --html=reports/mariadb-test-report.html --self-contained-html\n</code></pre>"},{"location":"testcontainers/mariadb/#view-container-logs","title":"\u2705 View Container Logs","text":"<pre><code># Get container ID\ndocker ps | grep mariadb\n\n# View logs\ndocker logs &lt;container_id&gt;\n</code></pre> <p>Next: MySQL Testing | PostgreSQL Testing | MongoDB Testing | Redis Testing</p>"},{"location":"testcontainers/mongodb/","title":"MongoDB Container Testing","text":"<p>Why MongoDB?</p> <p>\u2705 Perfect for document-based data, flexible schema, and modern web applications. Great for chaos testing in CI/CD pipelines.</p>"},{"location":"testcontainers/mongodb/#test-cases-implemented","title":"\u2705 Test Cases Implemented","text":""},{"location":"testcontainers/mongodb/#test-case-1-check-mongodb-version","title":"\u2705 Test Case 1 \u2014 Check MongoDB Version","text":"<p>Verifies the container is running and accessible.</p> <pre><code>client = mongo.get_connection_client()\ndb = client.admin\nresult = db.command(\"serverStatus\")\nassert \"version\" in result\n</code></pre>"},{"location":"testcontainers/mongodb/#test-case-2-insert-and-query-document","title":"\u2705 Test Case 2 \u2014 Insert and Query Document","text":"<p>Tests basic document insertion and retrieval.</p> <pre><code>db = client.test_db\ncollection = db.users\nresult = collection.insert_one({\"name\": \"Alice\", \"age\": 30})\nassert result.inserted_id is not None\n\ndoc = collection.find_one({\"name\": \"Alice\"})\nassert doc[\"age\"] == 30\n</code></pre>"},{"location":"testcontainers/mongodb/#test-case-3-insert-multiple-documents","title":"\u2705 Test Case 3 \u2014 Insert Multiple Documents","text":"<p>Inserts multiple documents and confirms count.</p> <pre><code>collection = db.users\ndocs = [{\"name\": \"Bob\"}, {\"name\": \"Charlie\"}]\nresult = collection.insert_many(docs)\nassert len(result.inserted_ids) == 2\n\ncount = collection.count_documents({})\nassert count == 3\n</code></pre>"},{"location":"testcontainers/mongodb/#test-case-4-update-document","title":"\u2705 Test Case 4 \u2014 Update Document","text":"<p>Tests document update functionality.</p> <pre><code>collection = db.users\ncollection.update_one({\"name\": \"Alice\"}, {\"$set\": {\"age\": 31}})\ndoc = collection.find_one({\"name\": \"Alice\"})\nassert doc[\"age\"] == 31\n</code></pre>"},{"location":"testcontainers/mongodb/#test-case-5-delete-documents","title":"\u2705 Test Case 5 \u2014 Delete Documents","text":"<p>Removes documents and verifies deletion.</p> <pre><code>collection = db.users\ncollection.delete_many({})\ncount = collection.count_documents({})\nassert count == 0\n</code></pre>"},{"location":"testcontainers/mongodb/#how-to-run-the-tests","title":"\u2705 How to Run the Tests","text":"<p>Run:</p> <pre><code>pytest -v testcontainers/test_mongodb_container.py\n</code></pre> <p>\u2705 Expected:</p> <pre><code>5 passed in X.XXs\n</code></pre>"},{"location":"testcontainers/mongodb/#useful-commands","title":"\u2705 Useful Commands","text":"<ul> <li>Check running containers:</li> </ul> <p><code>bash   docker ps</code></p> <ul> <li>View MongoDB logs:</li> </ul> <p><code>bash   docker logs &lt;container_id&gt;</code></p>"},{"location":"testcontainers/mongodb/#chaos-testing-scenarios","title":"\ud83e\uddea Chaos Testing Scenarios","text":""},{"location":"testcontainers/mongodb/#scenario-1-connection-failures","title":"\u2705 Scenario 1: Connection Failures","text":"<pre><code>def test_mongodb_connection_failure():\n    \"\"\"Test that our app handles MongoDB connection failures gracefully\"\"\"\n    with MongoDbContainer(\"mongo:6.0\") as mongo:\n        # Simulate connection failure\n        mongo.get_docker_client().stop(mongo.get_container_id())\n\n        # Verify our app handles the failure\n        with pytest.raises(Exception):\n            mongo.get_connection_client()\n</code></pre>"},{"location":"testcontainers/mongodb/#scenario-2-large-document-handling","title":"\u2705 Scenario 2: Large Document Handling","text":"<pre><code>def test_mongodb_large_document():\n    \"\"\"Test that our app handles large documents in MongoDB\"\"\"\n    with MongoDbContainer(\"mongo:6.0\") as mongo:\n        client = mongo.get_connection_client()\n        db = client.test_db\n        collection = db.large_docs\n\n        # Create large document\n        large_doc = {\"data\": \"x\" * 10000, \"id\": 1}\n\n        # Insert and verify\n        result = collection.insert_one(large_doc)\n        assert result.inserted_id is not None\n\n        # Retrieve and verify\n        doc = collection.find_one({\"id\": 1})\n        assert len(doc[\"data\"]) == 10000\n</code></pre>"},{"location":"testcontainers/mongodb/#monitoring-reporting","title":"\ud83d\udcca Monitoring &amp; Reporting","text":""},{"location":"testcontainers/mongodb/#generate-html-report","title":"\u2705 Generate HTML Report","text":"<pre><code>pytest testcontainers/test_mongodb_container.py --html=reports/mongodb-test-report.html --self-contained-html\n</code></pre>"},{"location":"testcontainers/mongodb/#view-container-logs","title":"\u2705 View Container Logs","text":"<pre><code># Get container ID\ndocker ps | grep mongo\n\n# View logs\ndocker logs &lt;container_id&gt;\n</code></pre> <p>Next: MySQL Testing | PostgreSQL Testing | MariaDB Testing | Redis Testing</p>"},{"location":"testcontainers/mysql/","title":"\ud83d\udc2c MySQL Container TestingMaster MySQL Testing with Testcontainers","text":"<p>Build bulletproof MySQL integration tests that survive real-world chaos</p> 5 test cases 2 chaos scenarios 100% coverage"},{"location":"testcontainers/mysql/#why-mysql","title":"\ud83c\udfaf Why MySQL?","text":"\ud83d\ude80 Popular &amp; Fast <p>Extremely popular in web applications, fast to spin up in containers</p> \ud83e\uddea Perfect for Chaos <p>Great candidate for chaos testing in CI/CD pipelines</p> \ud83d\udd27 Easy Integration <p>Simple setup with Testcontainers and comprehensive testing</p>"},{"location":"testcontainers/mysql/#test-cases-implemented","title":"\u2705 Test Cases Implemented","text":"Test Case 1 \u2014 Check MySQL Version \u2705 Passed <p>Runs a query to ensure MySQL is running and accessible.</p> Python <pre><code>result = conn.execute(text(\"SELECT VERSION();\")).fetchone()\nassert \"MySQL\" in result[0] or \"MariaDB\" in result[0]</code></pre> Test Case 2 \u2014 Insert and Query \u2705 Passed <p>Inserts a single record and retrieves it.</p> Python <pre><code>conn.execute(text(\"INSERT INTO users (name) VALUES ('Alice');\"))\nresult = conn.execute(text(\"SELECT name FROM users;\")).fetchone()\nassert result[0] == \"Alice\"</code></pre> Test Case 3 \u2014 Insert Multiple Rows \u2705 Passed <p>Adds multiple rows and verifies the total count.</p> Python <pre><code>conn.execute(text(\"INSERT INTO users (name) VALUES ('Bob'), ('Charlie');\"))\nresult = conn.execute(text(\"SELECT COUNT(*) FROM users;\")).fetchone()\nassert result[0] == 3</code></pre> Test Case 4 \u2014 Primary Key Constraint \u2705 Passed <p>Verifies the primary key prevents duplicate entries.</p> Python <pre><code>conn.execute(text(\"INSERT INTO users (id, name) VALUES (1, 'David');\"))\nwith pytest.raises(Exception):\n    conn.execute(text(\"INSERT INTO users (id, name) VALUES (1, 'Eve');\"))</code></pre> Test Case 5 \u2014 Truncate Table \u2705 Passed <p>Clears the table and confirms it's empty.</p> Python <pre><code>conn.execute(text(\"TRUNCATE TABLE users;\"))\nresult = conn.execute(text(\"SELECT COUNT(*) FROM users;\")).fetchone()\nassert result[0] == 0</code></pre>"},{"location":"testcontainers/mysql/#how-to-run-the-tests","title":"\ud83d\ude80 How to Run the Tests","text":"Quick Start Terminal <pre><code>pytest -v testcontainers/test_mysql_container.py</code></pre> \u2705 Expected Output: <pre><code>5 passed in X.XXs</code></pre> Useful Commands See running containers: <pre><code>docker ps</code></pre> Check MySQL logs: <pre><code>docker logs &lt;container_id&gt;</code></pre>"},{"location":"testcontainers/mysql/#chaos-testing-scenarios","title":"\ud83e\uddea Chaos Testing ScenariosReal-World Failure Simulation","text":"<p>Test your application's resilience against common MySQL failures</p> Scenario 1: Connection Failures Connection Error <p>Test that your app handles MySQL connection failures gracefully</p> Python <pre><code>def test_mysql_connection_failure():\n    \"\"\"Test that our app handles MySQL connection failures gracefully\"\"\"\n    with MySqlContainer(\"mysql:8.0\") as mysql:\n        # Simulate connection failure\n        mysql.get_docker_client().stop(mysql.get_container_id())\n\n        # Verify our app handles the failure\n        with pytest.raises(ConnectionError):\n            create_connection(mysql.get_connection_url())</code></pre> Scenario 2: Slow Queries Performance Issue <p>Test that your app handles slow MySQL queries within timeouts</p> Python <pre><code>def test_mysql_slow_query_handling():\n    \"\"\"Test that our app handles slow MySQL queries\"\"\"\n    with MySqlContainer(\"mysql:8.0\") as mysql:\n        conn = create_connection(mysql.get_connection_url())\n\n        # Simulate slow query\n        import time\n        start_time = time.time()\n\n        # Execute a potentially slow query\n        conn.execute(text(\"SELECT SLEEP(2)\"))\n\n        # Verify it completes within reasonable time\n        assert time.time() - start_time &lt; 5.0</code></pre>"},{"location":"testcontainers/mysql/#monitoring-reporting","title":"\ud83d\udcca Monitoring &amp; ReportingGenerate Beautiful Reports","text":"<p>Create comprehensive HTML reports for stakeholders</p> \ud83d\udcca Generate HTML Report Terminal <pre><code>pytest testcontainers/test_mysql_container.py \\\n  --html=reports/mysql-test-report.html \\\n  --self-contained-html</code></pre> <p>Creates a beautiful HTML report with test results and metrics</p> \ud83d\udccb View Container Logs Terminal <pre><code># Get container ID\ndocker ps | grep mysql\n\n# View logs\ndocker logs &lt;container_id&gt;</code></pre> <p>Monitor container behavior and debug issues</p>"},{"location":"testcontainers/mysql/#related-testing","title":"\ud83d\udd17 Related Testing\ud83d\udc18 PostgreSQL Testing\ud83d\uddc4\ufe0f MariaDB Testing\ud83c\udf43 MongoDB Testing\ud83d\udd34 Redis Testing","text":"Explore Other Database Testing <p>Master testing across different database technologies</p> <p>Test against PostgreSQL databases with advanced features</p> Learn PostgreSQL \u2192 <p>Test MariaDB compatibility and character sets</p> Learn MariaDB \u2192 <p>Test document operations and large datasets</p> Learn MongoDB \u2192 <p>Test caching operations and memory pressure</p> Learn Redis \u2192 <p>Ready to test other databases? Choose your next challenge! \ud83d\ude80</p>"},{"location":"testcontainers/postgres/","title":"PostgreSQL Container Testing","text":"<p>Why PostgreSQL?</p> <p>\u2705 It's robust, widely used in production, and perfect for chaos testing in CI/CD pipelines.</p>"},{"location":"testcontainers/postgres/#test-cases-implemented","title":"\u2705 Test Cases Implemented","text":""},{"location":"testcontainers/postgres/#test-case-1-check-postgresql-version","title":"\u2705 Test Case 1 \u2014 Check PostgreSQL Version","text":"<p>Runs a basic query to confirm the DB is alive.</p> <pre><code>result = conn.execute(text(\"SELECT version();\")).fetchone()\nassert \"PostgreSQL\" in result[0]\n</code></pre>"},{"location":"testcontainers/postgres/#test-case-2-insert-and-query","title":"\u2705 Test Case 2 \u2014 Insert and Query","text":"<p>Inserts a single record and verifies retrieval.</p> <pre><code>conn.execute(text(\"INSERT INTO users (name) VALUES ('Alice');\"))\nresult = conn.execute(text(\"SELECT name FROM users;\")).fetchone()\nassert result[0] == \"Alice\"\n</code></pre>"},{"location":"testcontainers/postgres/#test-case-3-insert-multiple-rows","title":"\u2705 Test Case 3 \u2014 Insert Multiple Rows","text":"<p>Inserts multiple records and checks row count.</p> <pre><code>conn.execute(text(\"INSERT INTO users (name) VALUES ('Bob'), ('Charlie');\"))\nresult = conn.execute(text(\"SELECT COUNT(*) FROM users;\")).fetchone()\nassert result[0] == 3\n</code></pre>"},{"location":"testcontainers/postgres/#test-case-4-primary-key-constraint","title":"\u2705 Test Case 4 \u2014 Primary Key Constraint","text":"<p>Verifies that primary key constraints work properly.</p> <pre><code>conn.execute(text(\"INSERT INTO users (id, name) VALUES (1, 'David');\"))\nwith pytest.raises(Exception):\n    conn.execute(text(\"INSERT INTO users (id, name) VALUES (1, 'Eve');\"))\n</code></pre>"},{"location":"testcontainers/postgres/#test-case-5-truncate-table","title":"\u2705 Test Case 5 \u2014 Truncate Table","text":"<p>Clears the table and ensures it's empty.</p> <pre><code>conn.execute(text(\"TRUNCATE users;\"))\nresult = conn.execute(text(\"SELECT COUNT(*) FROM users;\")).fetchone()\nassert result[0] == 0\n</code></pre>"},{"location":"testcontainers/postgres/#how-to-run-the-tests","title":"\u2705 How to Run the Tests","text":"<p>Run:</p> <pre><code>pytest -v testcontainers/test_postgres_container.py\n</code></pre> <p>\u2705 Expected:</p> <pre><code>5 passed in X.XXs\n</code></pre>"},{"location":"testcontainers/postgres/#useful-commands","title":"\u2705 Useful Commands","text":"<ul> <li>Check running containers:</li> </ul> <p><code>bash   docker ps</code></p> <ul> <li>View logs for the Postgres container:</li> </ul> <p><code>bash   docker logs &lt;container_id&gt;</code></p>"},{"location":"testcontainers/postgres/#chaos-testing-scenarios","title":"\ud83e\uddea Chaos Testing Scenarios","text":""},{"location":"testcontainers/postgres/#scenario-1-connection-failures","title":"\u2705 Scenario 1: Connection Failures","text":"<pre><code>def test_postgres_connection_failure():\n    \"\"\"Test that our app handles PostgreSQL connection failures gracefully\"\"\"\n    with PostgresContainer(\"postgres:15\") as postgres:\n        # Simulate connection failure\n        postgres.get_docker_client().stop(postgres.get_container_id())\n\n        # Verify our app handles the failure\n        with pytest.raises(ConnectionError):\n            create_connection(postgres.get_connection_url())\n</code></pre>"},{"location":"testcontainers/postgres/#scenario-2-transaction-rollbacks","title":"\u2705 Scenario 2: Transaction Rollbacks","text":"<pre><code>def test_postgres_transaction_rollback():\n    \"\"\"Test that our app handles PostgreSQL transaction rollbacks\"\"\"\n    with PostgresContainer(\"postgres:15\") as postgres:\n        conn = create_connection(postgres.get_connection_url())\n\n        # Start transaction\n        trans = conn.begin()\n\n        try:\n            conn.execute(text(\"INSERT INTO users (name) VALUES ('Test');\"))\n            # Simulate error\n            conn.execute(text(\"INSERT INTO users (id) VALUES (NULL);\"))\n            trans.commit()\n        except Exception:\n            trans.rollback()\n\n        # Verify rollback worked\n        result = conn.execute(text(\"SELECT COUNT(*) FROM users;\")).fetchone()\n        assert result[0] == 0\n</code></pre>"},{"location":"testcontainers/postgres/#monitoring-reporting","title":"\ud83d\udcca Monitoring &amp; Reporting","text":""},{"location":"testcontainers/postgres/#generate-html-report","title":"\u2705 Generate HTML Report","text":"<pre><code>pytest testcontainers/test_postgres_container.py --html=reports/postgres-test-report.html --self-contained-html\n</code></pre>"},{"location":"testcontainers/postgres/#view-container-logs","title":"\u2705 View Container Logs","text":"<pre><code># Get container ID\ndocker ps | grep postgres\n\n# View logs\ndocker logs &lt;container_id&gt;\n</code></pre> <p>Next: MySQL Testing | MariaDB Testing | MongoDB Testing | Redis Testing</p>"},{"location":"testcontainers/redis/","title":"Redis Container Testing","text":"<p>Why Redis?</p> <p>\u2705 Essential for caching, sessions, and real-time data. Perfect for chaos testing in CI/CD pipelines.</p>"},{"location":"testcontainers/redis/#test-cases-implemented","title":"\u2705 Test Cases Implemented","text":""},{"location":"testcontainers/redis/#test-case-1-check-redis-version","title":"\u2705 Test Case 1 \u2014 Check Redis Version","text":"<p>Verifies the container is running and accessible.</p> <pre><code>client = redis.get_client()\ninfo = client.info(\"server\")\nassert \"redis_version\" in info\n</code></pre>"},{"location":"testcontainers/redis/#test-case-2-set-and-get","title":"\u2705 Test Case 2 \u2014 Set and Get","text":"<p>Tests basic key-value operations.</p> <pre><code>client = redis.get_client()\nclient.set(\"name\", \"Alice\")\nvalue = client.get(\"name\")\nassert value == b\"Alice\"\n</code></pre>"},{"location":"testcontainers/redis/#test-case-3-multiple-operations","title":"\u2705 Test Case 3 \u2014 Multiple Operations","text":"<p>Tests multiple Redis operations.</p> <pre><code>client = redis.get_client()\nclient.set(\"counter\", 0)\nclient.incr(\"counter\")\nclient.incr(\"counter\")\nvalue = client.get(\"counter\")\nassert value == b\"2\"\n</code></pre>"},{"location":"testcontainers/redis/#test-case-4-hash-operations","title":"\u2705 Test Case 4 \u2014 Hash Operations","text":"<p>Tests Redis hash data structure.</p> <pre><code>client = redis.get_client()\nclient.hset(\"user:1\", \"name\", \"Bob\")\nclient.hset(\"user:1\", \"age\", \"25\")\nname = client.hget(\"user:1\", \"name\")\nage = client.hget(\"user:1\", \"age\")\nassert name == b\"Bob\"\nassert age == b\"25\"\n</code></pre>"},{"location":"testcontainers/redis/#test-case-5-clean-up","title":"\u2705 Test Case 5 \u2014 Clean Up","text":"<p>Removes all keys and verifies cleanup.</p> <pre><code>client = redis.get_client()\nclient.flushdb()\nkeys = client.keys(\"*\")\nassert len(keys) == 0\n</code></pre>"},{"location":"testcontainers/redis/#how-to-run-the-tests","title":"\u2705 How to Run the Tests","text":"<p>Run:</p> <pre><code>pytest -v testcontainers/test_redis_container.py\n</code></pre> <p>\u2705 Expected:</p> <pre><code>5 passed in X.XXs\n</code></pre>"},{"location":"testcontainers/redis/#useful-commands","title":"\u2705 Useful Commands","text":"<ul> <li>Check running containers:</li> </ul> <p><code>bash   docker ps</code></p> <ul> <li>View Redis logs:</li> </ul> <p><code>bash   docker logs &lt;container_id&gt;</code></p>"},{"location":"testcontainers/redis/#chaos-testing-scenarios","title":"\ud83e\uddea Chaos Testing Scenarios","text":""},{"location":"testcontainers/redis/#scenario-1-connection-failures","title":"\u2705 Scenario 1: Connection Failures","text":"<pre><code>def test_redis_connection_failure():\n    \"\"\"Test that our app handles Redis connection failures gracefully\"\"\"\n    with RedisContainer(\"redis:7-alpine\") as redis:\n        # Simulate connection failure\n        redis.get_docker_client().stop(redis.get_container_id())\n\n        # Verify our app handles the failure\n        with pytest.raises(Exception):\n            redis.get_client()\n</code></pre>"},{"location":"testcontainers/redis/#scenario-2-memory-pressure","title":"\u2705 Scenario 2: Memory Pressure","text":"<pre><code>def test_redis_memory_pressure():\n    \"\"\"Test that our app handles Redis memory constraints\"\"\"\n    with RedisContainer(\"redis:7-alpine\") as redis:\n        client = redis.get_client()\n\n        # Set memory limit\n        client.config_set(\"maxmemory\", \"10mb\")\n        client.config_set(\"maxmemory-policy\", \"allkeys-lru\")\n\n        # Try to insert large dataset\n        try:\n            for i in range(1000):\n                client.set(f\"key{i}\", \"x\" * 1000)\n        except Exception as e:\n            # Handle memory constraint gracefully\n            assert \"memory\" in str(e).lower() or \"OOM\" in str(e)\n</code></pre>"},{"location":"testcontainers/redis/#monitoring-reporting","title":"\ud83d\udcca Monitoring &amp; Reporting","text":""},{"location":"testcontainers/redis/#generate-html-report","title":"\u2705 Generate HTML Report","text":"<pre><code>pytest testcontainers/test_redis_container.py --html=reports/redis-test-report.html --self-contained-html\n</code></pre>"},{"location":"testcontainers/redis/#view-container-logs","title":"\u2705 View Container Logs","text":"<pre><code># Get container ID\ndocker ps | grep redis\n\n# View logs\ndocker logs &lt;container_id&gt;\n</code></pre> <p>Next: MySQL Testing | PostgreSQL Testing | MariaDB Testing | MongoDB Testing</p> <p>```</p>"}]}