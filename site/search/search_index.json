{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\udc19 CI/CD Chaos Workshop","text":"<p>Welcome to the CI/CD Chaos Workshop \u2014 a unique journey where we don't just build software, we break it, fix it, and make it better than ever.</p> <p>In this workshop, you'll: \u2705 Build real apps in Python \u2705 Containerize them with Docker \u2705 Test them dynamically with Testcontainers \u2705 Automate deployments with Jenkins &amp; Kubernetes \u2705 Learn chaos engineering techniques for CI/CD pipelines \u2705 Generate interactive reports &amp; visualizations</p> <p>\u2026and leave with skills your future self will thank you for!</p>"},{"location":"#workshop-phases","title":"\ud83d\ude80 Workshop Phases","text":"<p>Below is your roadmap through chaos:</p>"},{"location":"#setup-prerequisites","title":"\ud83d\udcbb Setup &amp; Prerequisites","text":"<p>\ud83d\udc49 See: - Setup Guide</p> <p>Covers: \u2705 Installing Python &amp; Docker \u2705 Virtual environments \u2705 Local tools for testing and chaos</p>"},{"location":"#dynamic-database-testing","title":"\ud83e\uddea Dynamic Database Testing","text":"<p>Phase: Testcontainers</p> <p>\ud83d\udc49 See: - MySQL Testing Docs - MariaDB Testing Docs - Postgres Testing Docs - MongoDB Testing Docs - Redis Testing Docs</p> <p>You'll: \u2705 Spin up real databases in Docker \u2705 Write Python tests against live DBs \u2705 Generate HTML test reports \u2705 Visualize container startup/shutdown with Testcontainers Desktop \u2705 Practice chaos scenarios like container crashes and delays</p>"},{"location":"#docker-mastery-multi-version-apps","title":"\ud83d\udc33 Docker Mastery &amp; Multi-Version Apps","text":"<p>\ud83d\udc49 See: - Docker Phase</p> <p>Key takeaways: \u2705 Multi-stage Docker builds \u2705 Python image best practices \u2705 Deploy multiple versions of your app \u2705 Compare image sizes &amp; layers \u2705 Generate Docker analysis reports \u2705 Introduce chaos in builds</p>"},{"location":"#jenkins-pipeline-chaos","title":"\ud83e\udd16 Jenkins Pipeline Chaos","text":"<p>\ud83d\udc49 See: - Jenkins Phase - Scenario 01: Docker Build - Scenario 02: Testcontainers - Scenario 03: HTML Reports - Scenario 04: Manage Secrets - Scenario 05: Deploy to EKS</p> <p>Key takeaways: \u2705 Building Jenkins pipelines for:   - Docker builds   - Testcontainers tests   - Automated report publishing</p> <p>\u2705 Chaos ideas: - Randomly fail builds - Slow steps to simulate network lag - Break Docker layers intentionally</p>"},{"location":"#kubernetes-chaos-scalability","title":"\u2638\ufe0f Kubernetes Chaos &amp; Scalability","text":"<p>\ud83d\udc49 See: - Kubernetes Phase</p> <p>Key takeaways: \u2705 Deploying our apps to Kubernetes \u2705 Chaos experiments with:   - killing pods   - random delays   - pod resource limits \u2705 Using tools like:   - K9s   - Chaos Mesh   - Grafana dashboards for live insights</p>"},{"location":"#certificate-of-chaos","title":"\ud83c\udf93 Certificate of Chaos","text":"<p>Once you complete all phases, you'll: \u2705 Receive a custom PDF Certificate \u2705 Have live demos you can show future employers \u2705 Feel confident in: - Python DevOps - Docker mastery - Chaos engineering - Dynamic testing</p> <p>\ud83d\udc49 Certificate Info</p>"},{"location":"#why-this-workshop-exists","title":"\ud83e\udded Why This Workshop Exists","text":"<p>Most workshops teach:</p> <p>\"Here's how to build a perfect pipeline.\"</p> <p>But real life looks like this: - Servers crash - DBs fail - Docker images bloat - Networks hang - Tests mysteriously fail</p> <p>This workshop prepares you for the real world. We deliberately cause chaos so you'll know how to handle it\u2014and look like a hero!</p>"},{"location":"#lets-create-some-chaos","title":"Let's Create Some Chaos. \ud83d\udd25","text":"<p>\u2192 Start with: - Setup Guide - Then dive into:   - TestContainers   - Docker</p> <p>\u2026and prepare for chaos you'll never forget!</p>"},{"location":"jenkins/scenario_01_docker_build/","title":"\ud83d\udc33 Scenario 01: Docker Build Chaos","text":""},{"location":"jenkins/scenario_01_docker_build/#overview","title":"Overview","text":"<p>This scenario teaches you how to build, tag, and run Python Docker images in Jenkins, simulating real-world CI/CD challenges and sabotage.</p>"},{"location":"jenkins/scenario_01_docker_build/#directory-structure","title":"\ud83d\udcc1 Directory Structure","text":"<pre><code>Jenkins/jenkins_scenarios/scenario_01_docker_build/\n\u251c\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 Jenkinsfile\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 requirements.txt\n</code></pre>"},{"location":"jenkins/scenario_01_docker_build/#how-to-set-up-the-pipeline-in-jenkins-ui","title":"\u2705 How to Set Up the Pipeline in Jenkins UI","text":"<ol> <li>Open Jenkins in your browser (usually at http://localhost:8080).</li> <li>Click \"New Item\".</li> <li>Enter a name (e.g., <code>scenario_01_docker_build</code>), select Pipeline, and click OK.</li> <li>In the pipeline config:</li> <li>Under Pipeline script, select Pipeline script from SCM.</li> <li>Set SCM to Git and enter your repository URL.</li> <li>Set Script Path to <code>Jenkins/jenkins_scenarios/scenario_01_docker_build/Jenkinsfile</code>.</li> <li>Click Save.</li> </ol>"},{"location":"jenkins/scenario_01_docker_build/#how-to-run-the-pipeline","title":"\u2705 How to Run the Pipeline","text":"<ol> <li>Click \"Build with Parameters\".</li> <li>Set the <code>APP_VERSION</code> parameter (1\u20135) to choose which app version to build.</li> <li>Click Build.</li> <li>Watch the console output for build, run, and test steps.</li> <li>Check for success or failure messages.</li> </ol>"},{"location":"jenkins/scenario_01_docker_build/#what-the-pipeline-does","title":"\u2705 What the Pipeline Does","text":"<ul> <li>Cleans up any containers running on port 3000</li> <li>Builds the Docker image for the selected app version</li> <li>Runs the container and exposes port 3000</li> <li>Tests the HTTP response from the app</li> <li>Cleans up the container after the test</li> </ul>"},{"location":"jenkins/scenario_01_docker_build/#chaos-testing-scenarios","title":"\ud83e\uddea Chaos Testing Scenarios","text":""},{"location":"jenkins/scenario_01_docker_build/#scenario-1-docker-build-failures","title":"\u2705 Scenario 1: Docker Build Failures","text":"<pre><code>// Simulate Docker build failures\nstage('Build Docker Image') {\n    steps {\n        script {\n            // Randomly fail builds to test resilience\n            if (Math.random() &lt; 0.1) {\n                error \"Simulated Docker build failure\"\n            }\n\n            sh \"docker build -t chaos-app:${APP_VERSION} .\"\n        }\n    }\n}\n</code></pre>"},{"location":"jenkins/scenario_01_docker_build/#scenario-2-container-startup-delays","title":"\u2705 Scenario 2: Container Startup Delays","text":"<pre><code>// Simulate slow container startup\nstage('Run Container') {\n    steps {\n        script {\n            sh \"docker run -d -p 3000:3000 --name chaos-app chaos-app:${APP_VERSION}\"\n\n            // Add artificial delay\n            sleep 10\n\n            // Test if app responds\n            sh \"curl -f http://localhost:3000/health || exit 1\"\n        }\n    }\n}\n</code></pre>"},{"location":"jenkins/scenario_01_docker_build/#troubleshooting","title":"\u2705 Troubleshooting","text":"<ul> <li>Docker build fails:</li> <li>Ensure Docker is running and the Docker socket is mounted in Jenkins.</li> <li>Check for typos in the <code>APP_VERSION</code> parameter.</li> <li>App does not respond:</li> <li>Check the container logs in Jenkins output.</li> <li>Make sure the app version exists in the repo.</li> <li>Permission errors:</li> <li>Make sure Jenkins has permission to run Docker commands (mount <code>/var/run/docker.sock</code>).</li> </ul>"},{"location":"jenkins/scenario_01_docker_build/#useful-commands","title":"\u2705 Useful Commands","text":"<ul> <li>See running containers:   <code>bash   docker ps</code></li> <li>Check logs for a container:   <code>bash   docker logs &lt;container_id&gt;</code></li> <li>Remove a container:   <code>bash   docker rm -f &lt;container_id&gt;</code></li> </ul>"},{"location":"jenkins/scenario_01_docker_build/#monitoring-reporting","title":"\ud83d\udcca Monitoring &amp; Reporting","text":""},{"location":"jenkins/scenario_01_docker_build/#pipeline-metrics","title":"\u2705 Pipeline Metrics","text":"<ul> <li>Build success rate</li> <li>Average build time</li> <li>Docker image size trends</li> <li>Container startup time</li> </ul>"},{"location":"jenkins/scenario_01_docker_build/#chaos-metrics","title":"\u2705 Chaos Metrics","text":"<ul> <li>Number of simulated failures</li> <li>Recovery time from failures</li> <li>System resilience score</li> </ul> <p>Next: Scenario 02: Testcontainers | Scenario 03: HTML Reports | Scenario 04: Manage Secrets | Scenario 05: Deploy to EKS</p> <p>This scenario helps you master Docker builds in Jenkins and prepares you for more advanced CI/CD chaos! \ud83d\udd25 </p>"},{"location":"jenkins/scenario_02_testcontainers/","title":"\ud83e\uddea Scenario 02: Testcontainers Chaos","text":""},{"location":"jenkins/scenario_02_testcontainers/#overview","title":"Overview","text":"<p>This scenario demonstrates how to use Testcontainers in Jenkins to run real database integration tests in isolated Docker containers.</p>"},{"location":"jenkins/scenario_02_testcontainers/#directory-structure","title":"\ud83d\udcc1 Directory Structure","text":"<pre><code>Jenkins/jenkins_scenarios/scenario_02_testcontainers/\n\u251c\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 Jenkinsfile\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 requirements.txt\n\u2514\u2500\u2500 tests/\n    \u251c\u2500\u2500 test_postgres_pass.py\n    \u251c\u2500\u2500 test_postgres_fail.py\n    \u251c\u2500\u2500 test_redis_pass.py\n    \u2514\u2500\u2500 test_redis_fail.py\n</code></pre>"},{"location":"jenkins/scenario_02_testcontainers/#how-to-set-up-the-pipeline-in-jenkins-ui","title":"\u2705 How to Set Up the Pipeline in Jenkins UI","text":"<ol> <li>Open Jenkins in your browser.</li> <li>Click \"New Item\".</li> <li>Enter a name (e.g., <code>scenario_02_testcontainers</code>), select Pipeline, and click OK.</li> <li>In the pipeline config:</li> <li>Under Pipeline script, select Pipeline script from SCM.</li> <li>Set SCM to Git and enter your repository URL.</li> <li>Set Script Path to <code>Jenkins/jenkins_scenarios/scenario_02_testcontainers/Jenkinsfile</code>.</li> <li>Click Save.</li> </ol>"},{"location":"jenkins/scenario_02_testcontainers/#how-to-run-the-pipeline","title":"\u2705 How to Run the Pipeline","text":"<ol> <li>Click \"Build with Parameters\".</li> <li>Set the <code>TEST_MODE</code> parameter to <code>pass</code> (for passing tests) or <code>fail</code> (for chaos/failing tests).</li> <li>Click Build.</li> <li>Watch the console output for test execution and results.</li> <li>Check for success or failure messages.</li> </ol>"},{"location":"jenkins/scenario_02_testcontainers/#what-the-pipeline-does","title":"\u2705 What the Pipeline Does","text":"<ul> <li>Builds a Docker image with all dependencies</li> <li>Runs Testcontainers-based integration tests for Postgres and Redis</li> <li>Supports both passing and intentionally failing test modes</li> <li>Cleans up containers after tests</li> </ul>"},{"location":"jenkins/scenario_02_testcontainers/#chaos-testing-scenarios","title":"\ud83e\uddea Chaos Testing Scenarios","text":""},{"location":"jenkins/scenario_02_testcontainers/#scenario-1-database-connection-failures","title":"\u2705 Scenario 1: Database Connection Failures","text":"<pre><code>def test_postgres_connection_failure():\n    \"\"\"Simulate PostgreSQL connection failures in CI/CD\"\"\"\n    with PostgresContainer(\"postgres:15\") as postgres:\n        # Simulate network partition\n        postgres.get_docker_client().pause(postgres.get_container_id())\n\n        # Verify our app handles the failure gracefully\n        with pytest.raises(ConnectionError):\n            create_connection(postgres.get_connection_url())\n</code></pre>"},{"location":"jenkins/scenario_02_testcontainers/#scenario-2-slow-database-queries","title":"\u2705 Scenario 2: Slow Database Queries","text":"<pre><code>def test_redis_slow_operations():\n    \"\"\"Simulate slow Redis operations in CI/CD\"\"\"\n    with RedisContainer(\"redis:7-alpine\") as redis:\n        client = redis.get_client()\n\n        # Simulate slow operation\n        import time\n        start_time = time.time()\n\n        # Perform operation\n        client.set(\"test\", \"value\")\n        client.get(\"test\")\n\n        # Verify it completes within reasonable time\n        assert time.time() - start_time &lt; 5.0\n</code></pre>"},{"location":"jenkins/scenario_02_testcontainers/#scenario-3-resource-constraints","title":"\u2705 Scenario 3: Resource Constraints","text":"<pre><code>def test_memory_constrained_database():\n    \"\"\"Test database behavior under memory constraints\"\"\"\n    with PostgresContainer(\"postgres:15\") as postgres:\n        # Set memory limit\n        postgres.with_memory_limit(\"50m\")\n\n        conn = create_connection(postgres.get_connection_url())\n\n        # Try to insert large dataset\n        try:\n            for i in range(1000):\n                conn.execute(text(f\"INSERT INTO test_table VALUES ({i}, 'data');\"))\n        except Exception as e:\n            # Handle memory constraint gracefully\n            assert \"memory\" in str(e).lower() or \"resource\" in str(e).lower()\n</code></pre>"},{"location":"jenkins/scenario_02_testcontainers/#troubleshooting","title":"\u2705 Troubleshooting","text":"<ul> <li>Tests fail to start:</li> <li>Ensure Docker is running and accessible from Jenkins.</li> <li>Check that the Docker socket is mounted in Jenkins.</li> <li>Database containers not starting:</li> <li>Check for port conflicts or resource limits on the Jenkins agent.</li> <li>Permission errors:</li> <li>Make sure Jenkins has permission to run Docker commands.</li> <li>Test mode confusion:</li> <li>Double-check the <code>TEST_MODE</code> parameter value (<code>pass</code> or <code>fail</code>).</li> </ul>"},{"location":"jenkins/scenario_02_testcontainers/#useful-commands","title":"\u2705 Useful Commands","text":"<ul> <li>See running containers:   <code>bash   docker ps</code></li> <li>Check logs for a container:   <code>bash   docker logs &lt;container_id&gt;</code></li> <li>Remove a container:   <code>bash   docker rm -f &lt;container_id&gt;</code></li> </ul>"},{"location":"jenkins/scenario_02_testcontainers/#monitoring-reporting","title":"\ud83d\udcca Monitoring &amp; Reporting","text":""},{"location":"jenkins/scenario_02_testcontainers/#test-metrics","title":"\u2705 Test Metrics","text":"<ul> <li>Test execution time</li> <li>Container startup time</li> <li>Database connection success rate</li> <li>Test pass/fail ratio</li> </ul>"},{"location":"jenkins/scenario_02_testcontainers/#chaos-metrics","title":"\u2705 Chaos Metrics","text":"<ul> <li>Number of simulated failures</li> <li>Recovery time from database failures</li> <li>System resilience under stress</li> </ul> <p>Next: Scenario 01: Docker Build | Scenario 03: HTML Reports | Scenario 04: Manage Secrets | Scenario 05: Deploy to EKS</p> <p>This scenario helps you master integration testing with real services in Jenkins using Testcontainers! \ud83d\udd25 </p>"},{"location":"jenkins/scenario_03_html_reports/","title":"\ud83d\udcca Scenario 03: HTML Reports Chaos","text":""},{"location":"jenkins/scenario_03_html_reports/#overview","title":"Overview","text":"<p>This scenario teaches you how to generate, archive, and view beautiful HTML test reports in Jenkins, making your CI/CD results visually clear and enterprise-ready.</p>"},{"location":"jenkins/scenario_03_html_reports/#directory-structure","title":"\ud83d\udcc1 Directory Structure","text":"<pre><code>Jenkins/jenkins_scenarios/scenario_03_html_reports/\n\u251c\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 Jenkinsfile\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 report_generator.py\n\u251c\u2500\u2500 requirements.txt\n\u2514\u2500\u2500 tests/\n    \u251c\u2500\u2500 test_config_validation_pass.py\n    \u251c\u2500\u2500 test_config_validation_fail.py\n    \u251c\u2500\u2500 test_api_health_pass.py\n    \u251c\u2500\u2500 test_api_health_fail.py\n    \u251c\u2500\u2500 test_postgres_pass.py\n    \u251c\u2500\u2500 test_postgres_fail.py\n    \u251c\u2500\u2500 test_redis_pass.py\n    \u251c\u2500\u2500 test_redis_fail.py\n    \u251c\u2500\u2500 test_secret_scan_pass.py\n    \u2514\u2500\u2500 test_secret_scan_fail.py\n</code></pre>"},{"location":"jenkins/scenario_03_html_reports/#how-to-set-up-the-pipeline-in-jenkins-ui","title":"\u2705 How to Set Up the Pipeline in Jenkins UI","text":"<ol> <li>Open Jenkins in your browser.</li> <li>Click \"New Item\".</li> <li>Enter a name (e.g., <code>scenario_03_html_reports</code>), select Pipeline, and click OK.</li> <li>In the pipeline config:</li> <li>Under Pipeline script, select Pipeline script from SCM.</li> <li>Set SCM to Git and enter your repository URL.</li> <li>Set Script Path to <code>Jenkins/jenkins_scenarios/scenario_03_html_reports/Jenkinsfile</code>.</li> <li>Click Save.</li> </ol>"},{"location":"jenkins/scenario_03_html_reports/#how-to-run-the-pipeline","title":"\u2705 How to Run the Pipeline","text":"<ol> <li>Click \"Build with Parameters\" (if parameters are defined).</li> <li>Click Build.</li> <li>Watch the console output for test execution and report generation.</li> <li>Download/view HTML reports from Jenkins artifacts after the build completes.</li> </ol>"},{"location":"jenkins/scenario_03_html_reports/#what-the-pipeline-does","title":"\u2705 What the Pipeline Does","text":"<ul> <li>Builds a Docker image with all dependencies</li> <li>Runs a suite of Python tests (config validation, API health, DB, Redis, secrets)</li> <li>Generates HTML and JSON reports for each test</li> <li>Archives reports as Jenkins build artifacts</li> </ul>"},{"location":"jenkins/scenario_03_html_reports/#chaos-testing-scenarios","title":"\ud83e\uddea Chaos Testing Scenarios","text":""},{"location":"jenkins/scenario_03_html_reports/#scenario-1-report-generation-failures","title":"\u2705 Scenario 1: Report Generation Failures","text":"<pre><code>def test_report_generation_failure():\n    \"\"\"Simulate HTML report generation failures\"\"\"\n    try:\n        # Simulate disk space issues\n        if os.path.exists(\"/tmp/disk_full\"):\n            raise OSError(\"No space left on device\")\n\n        # Generate report\n        generate_html_report(test_results)\n\n    except Exception as e:\n        # Fallback to simple text report\n        generate_text_report(test_results)\n        assert \"text\" in str(e).lower() or \"space\" in str(e).lower()\n</code></pre>"},{"location":"jenkins/scenario_03_html_reports/#scenario-2-slow-report-generation","title":"\u2705 Scenario 2: Slow Report Generation","text":"<pre><code>def test_slow_report_generation():\n    \"\"\"Test report generation under load\"\"\"\n    import time\n    start_time = time.time()\n\n    # Generate large report\n    large_dataset = [{\"test\": f\"test_{i}\", \"result\": \"pass\"} for i in range(10000)]\n    generate_html_report(large_dataset)\n\n    # Verify it completes within reasonable time\n    assert time.time() - start_time &lt; 30.0\n</code></pre>"},{"location":"jenkins/scenario_03_html_reports/#scenario-3-corrupted-report-data","title":"\u2705 Scenario 3: Corrupted Report Data","text":"<pre><code>def test_corrupted_report_data():\n    \"\"\"Test handling of corrupted test data\"\"\"\n    corrupted_data = [\n        {\"test\": \"valid_test\", \"result\": \"pass\"},\n        {\"test\": \"corrupted_test\", \"result\": None},  # Corrupted\n        {\"test\": \"another_test\", \"result\": \"fail\"}\n    ]\n\n    # Should handle corrupted data gracefully\n    report = generate_html_report(corrupted_data)\n    assert \"corrupted_test\" in report\n    assert \"error\" in report.lower()\n</code></pre>"},{"location":"jenkins/scenario_03_html_reports/#troubleshooting","title":"\u2705 Troubleshooting","text":"<ul> <li>Reports not found:</li> <li>Check the archive path in the Jenkinsfile matches the reports output directory.</li> <li>Ensure the tests generate reports in the expected location.</li> <li>Build fails:</li> <li>Check for missing dependencies in <code>requirements.txt</code>.</li> <li>Review the Docker build logs for errors.</li> <li>HTML not rendering:</li> <li>Download the HTML report and open it in your browser.</li> </ul>"},{"location":"jenkins/scenario_03_html_reports/#useful-commands","title":"\u2705 Useful Commands","text":"<ul> <li>See running containers:   <code>bash   docker ps</code></li> <li>Check logs for a container:   <code>bash   docker logs &lt;container_id&gt;</code></li> <li>Remove a container:   <code>bash   docker rm -f &lt;container_id&gt;</code></li> </ul>"},{"location":"jenkins/scenario_03_html_reports/#monitoring-reporting","title":"\ud83d\udcca Monitoring &amp; Reporting","text":""},{"location":"jenkins/scenario_03_html_reports/#report-metrics","title":"\u2705 Report Metrics","text":"<ul> <li>Report generation time</li> <li>Report file size</li> <li>Number of tests reported</li> <li>Report accessibility score</li> </ul>"},{"location":"jenkins/scenario_03_html_reports/#chaos-metrics","title":"\u2705 Chaos Metrics","text":"<ul> <li>Report generation failure rate</li> <li>Recovery time from report failures</li> <li>Data corruption detection rate</li> </ul> <p>Next: Scenario 01: Docker Build | Scenario 02: Testcontainers | Scenario 04: Manage Secrets | Scenario 05: Deploy to EKS</p> <p>This scenario helps you master enterprise-grade reporting in Jenkins, making your CI/CD results clear and actionable! \ud83d\udd25 </p>"},{"location":"jenkins/scenario_04_manage_secrets/","title":"\ud83d\udd10 Scenario 04: Manage Secrets","text":""},{"location":"jenkins/scenario_04_manage_secrets/#overview","title":"Overview","text":"<p>This scenario teaches you how to detect, scan, and report on secret leaks in your codebase using Gitleaks, all integrated into a Jenkins pipeline. You'll learn to handle both clean and intentionally leaky code, and generate beautiful HTML/JSON reports.</p>"},{"location":"jenkins/scenario_04_manage_secrets/#directory-structure","title":"\ud83d\udcc1 Directory Structure","text":"<pre><code>Jenkins/jenkins_scenarios/scenario_04_manage_secrets/\n\u251c\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 Jenkinsfile\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 requirements.txt\n\u251c\u2500\u2500 report_templates/\n\u251c\u2500\u2500 tests/\n\u2502   \u251c\u2500\u2500 run_tests.py\n\u2502   \u251c\u2500\u2500 test_secret_scan_pass.py\n\u2502   \u2514\u2500\u2500 test_secret_scan_fail.py\n</code></pre>"},{"location":"jenkins/scenario_04_manage_secrets/#how-to-set-up-the-pipeline-in-jenkins-ui","title":"\u2705 How to Set Up the Pipeline in Jenkins UI","text":"<ol> <li>Open Jenkins in your browser.</li> <li>Click \"New Item\".</li> <li>Enter a name (e.g., <code>scenario_04_manage_secrets</code>), select Pipeline, and click OK.</li> <li>In the pipeline config:</li> <li>Under Pipeline script, select Pipeline script from SCM.</li> <li>Set SCM to Git and enter your repository URL.</li> <li>Set Script Path to <code>Jenkins/jenkins_scenarios/scenario_04_manage_secrets/Jenkinsfile</code>.</li> <li>Click Save.</li> </ol>"},{"location":"jenkins/scenario_04_manage_secrets/#how-to-run-the-pipeline","title":"\u2705 How to Run the Pipeline","text":"<ol> <li>Click \"Build with Parameters\".</li> <li>Set the <code>RUN_SCENARIO_4</code> parameter to enable/disable the scenario.</li> <li>Set the <code>SCENARIO_4_PASS</code> parameter to <code>true</code> (clean scan) or <code>false</code> (leaky scan).</li> <li>Click Build.</li> <li>Download/view HTML and JSON reports from Jenkins artifacts after the build completes.</li> </ol>"},{"location":"jenkins/scenario_04_manage_secrets/#what-the-pipeline-does","title":"\u2705 What the Pipeline Does","text":"<ul> <li>Builds a Docker image with Gitleaks and all dependencies</li> <li>Runs secret scan tests in PASS (clean) or FAIL (leaky) mode</li> <li>Generates HTML and JSON reports for each scan</li> <li>Archives reports as Jenkins build artifacts</li> </ul>"},{"location":"jenkins/scenario_04_manage_secrets/#chaos-testing-scenarios","title":"\ud83e\uddea Chaos Testing Scenarios","text":""},{"location":"jenkins/scenario_04_manage_secrets/#scenario-1-secret-detection-failures","title":"\u2705 Scenario 1: Secret Detection Failures","text":"<pre><code>def test_secret_detection_failure():\n    \"\"\"Simulate secret detection tool failures\"\"\"\n    try:\n        # Simulate Gitleaks failure\n        if os.path.exists(\"/tmp/gitleaks_failure\"):\n            raise Exception(\"Gitleaks process killed\")\n\n        # Run secret scan\n        results = run_gitleaks_scan()\n\n    except Exception as e:\n        # Fallback to manual scan\n        results = run_manual_secret_scan()\n        assert \"manual\" in str(e).lower() or \"fallback\" in str(e).lower()\n</code></pre>"},{"location":"jenkins/scenario_04_manage_secrets/#scenario-2-false-positive-detection","title":"\u2705 Scenario 2: False Positive Detection","text":"<pre><code>def test_false_positive_handling():\n    \"\"\"Test handling of false positive secret detections\"\"\"\n    # Simulate false positive\n    false_positive_secret = \"AKIAIOSFODNN7EXAMPLE\"  # Fake AWS key\n\n    # Should be detected but marked as false positive\n    results = scan_for_secrets([false_positive_secret])\n\n    assert len(results) &gt; 0\n    assert results[0][\"confidence\"] == \"low\"\n    assert results[0][\"status\"] == \"false_positive\"\n</code></pre>"},{"location":"jenkins/scenario_04_manage_secrets/#scenario-3-secret-rotation-simulation","title":"\u2705 Scenario 3: Secret Rotation Simulation","text":"<pre><code>def test_secret_rotation():\n    \"\"\"Test secret rotation in CI/CD pipeline\"\"\"\n    old_secret = \"old_api_key_12345\"\n    new_secret = \"new_api_key_67890\"\n\n    # Simulate secret rotation\n    rotate_secret(old_secret, new_secret)\n\n    # Verify old secret is invalidated\n    assert not is_secret_valid(old_secret)\n    assert is_secret_valid(new_secret)\n</code></pre>"},{"location":"jenkins/scenario_04_manage_secrets/#troubleshooting","title":"\u2705 Troubleshooting","text":"<ul> <li>Gitleaks not found:</li> <li>Ensure the Dockerfile installs Gitleaks correctly (check build logs).</li> <li>No reports generated:</li> <li>Check the test output and ensure reports are written to the <code>reports/</code> directory.</li> <li>Build fails:</li> <li>Check for missing dependencies in <code>requirements.txt</code>.</li> <li>Review the Docker build logs for errors.</li> <li>HTML not rendering:</li> <li>Download the HTML report and open it in your browser.</li> </ul>"},{"location":"jenkins/scenario_04_manage_secrets/#useful-commands","title":"\u2705 Useful Commands","text":"<ul> <li>See running containers:   <code>bash   docker ps</code></li> <li>Check logs for a container:   <code>bash   docker logs &lt;container_id&gt;</code></li> <li>Remove a container:   <code>bash   docker rm -f &lt;container_id&gt;</code></li> </ul>"},{"location":"jenkins/scenario_04_manage_secrets/#monitoring-reporting","title":"\ud83d\udcca Monitoring &amp; Reporting","text":""},{"location":"jenkins/scenario_04_manage_secrets/#security-metrics","title":"\u2705 Security Metrics","text":"<ul> <li>Number of secrets detected</li> <li>False positive rate</li> <li>Secret rotation frequency</li> <li>Compliance score</li> </ul>"},{"location":"jenkins/scenario_04_manage_secrets/#chaos-metrics","title":"\u2705 Chaos Metrics","text":"<ul> <li>Secret detection failure rate</li> <li>Recovery time from security failures</li> <li>False positive handling accuracy</li> </ul> <p>Next: Scenario 01: Docker Build | Scenario 02: Testcontainers | Scenario 03: HTML Reports | Scenario 05: Deploy to EKS</p> <p>This scenario helps you master secret management and reporting in Jenkins, making your pipelines secure and audit-ready! \ud83d\udd25 </p>"},{"location":"jenkins/scenario_05_deploy_eks/","title":"\u2638\ufe0f Scenario 05: Deploy to AWS EKS","text":""},{"location":"jenkins/scenario_05_deploy_eks/#overview","title":"Overview","text":"<p>This scenario teaches you how to deploy applications to AWS EKS using Jenkins, including both successful and intentionally failing deployments. You'll learn to validate manifests, monitor rollouts, and troubleshoot Kubernetes chaos.</p>"},{"location":"jenkins/scenario_05_deploy_eks/#directory-structure","title":"\ud83d\udcc1 Directory Structure","text":"<pre><code>Jenkins/jenkins_scenarios/scenario_05_deploy_eks/\n\u251c\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 Jenkinsfile\n\u251c\u2500\u2500 JenkinsfileAuth\n\u251c\u2500\u2500 Jenkins-Setup.md\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 requirements.txt\n\u2514\u2500\u2500 tests/\n    \u2514\u2500\u2500 deploy/\n        \u251c\u2500\u2500 deployment-pass.yaml\n        \u251c\u2500\u2500 deployment-fail.yaml\n        \u251c\u2500\u2500 service.yaml\n        \u2514\u2500\u2500 configmap.yaml\n</code></pre>"},{"location":"jenkins/scenario_05_deploy_eks/#how-to-set-up-the-pipeline-in-jenkins-ui","title":"\u2705 How to Set Up the Pipeline in Jenkins UI","text":"<ol> <li>Open Jenkins in your browser.</li> <li>Click \"New Item\".</li> <li>Enter a name (e.g., <code>scenario_05_deploy_eks</code>), select Pipeline, and click OK.</li> <li>In the pipeline config:</li> <li>Under Pipeline script, select Pipeline script from SCM.</li> <li>Set SCM to Git and enter your repository URL.</li> <li>Set Script Path to <code>Jenkins/jenkins_scenarios/scenario_05_deploy_eks/Jenkinsfile</code>.</li> <li>Click Save.</li> </ol>"},{"location":"jenkins/scenario_05_deploy_eks/#how-to-run-the-pipeline","title":"\u2705 How to Run the Pipeline","text":"<ol> <li>Click \"Build with Parameters\".</li> <li>Set the following parameters as needed:</li> <li><code>RUN_SCENARIO_5</code>: Enable/disable scenario</li> <li><code>SCENARIO_5_PASS</code>: Run successful deployment test</li> <li><code>SCENARIO_5_FAIL</code>: Run failure simulation test</li> <li><code>CLUSTER_NAME</code>: EKS cluster name</li> <li><code>AWS_REGION</code>: AWS region</li> <li><code>CLEANUP_AFTER_TESTS</code>: Clean up resources after tests</li> <li>Click Build.</li> <li>Watch the console output for deployment, monitoring, and results.</li> <li>Download/view reports from Jenkins artifacts after the build completes.</li> </ol>"},{"location":"jenkins/scenario_05_deploy_eks/#what-the-pipeline-does","title":"\u2705 What the Pipeline Does","text":"<ul> <li>Builds a Docker image with all dependencies</li> <li>Sets up AWS and Kubernetes access</li> <li>Validates Kubernetes manifests</li> <li>Deploys to EKS (both PASS and FAIL scenarios)</li> <li>Monitors rollout and pod status</li> <li>Optionally cleans up resources after tests</li> <li>Archives reports as Jenkins build artifacts</li> </ul>"},{"location":"jenkins/scenario_05_deploy_eks/#chaos-testing-scenarios","title":"\ud83e\uddea Chaos Testing Scenarios","text":""},{"location":"jenkins/scenario_05_deploy_eks/#scenario-1-deployment-failures","title":"\u2705 Scenario 1: Deployment Failures","text":"<pre><code># deployment-fail.yaml - Intentionally broken deployment\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: chaos-app-fail\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: chaos-app\n  template:\n    metadata:\n      labels:\n        app: chaos-app\n    spec:\n      containers:\n      - name: chaos-app\n        image: chaos-app:latest\n        resources:\n          requests:\n            memory: \"1Gi\"  # Too much memory request\n            cpu: \"1000m\"   # Too much CPU request\n        ports:\n        - containerPort: 3000\n</code></pre>"},{"location":"jenkins/scenario_05_deploy_eks/#scenario-2-pod-eviction-simulation","title":"\u2705 Scenario 2: Pod Eviction Simulation","text":"<pre><code>def test_pod_eviction():\n    \"\"\"Simulate pod eviction in EKS\"\"\"\n    # Deploy application\n    kubectl_apply(\"deployment-pass.yaml\")\n\n    # Simulate node pressure\n    kubectl_drain_node(\"node-1\", \"--force\", \"--ignore-daemonsets\")\n\n    # Verify pods reschedule\n    pods = kubectl_get_pods(\"--field-selector=spec.nodeName=node-1\")\n    assert len(pods) == 0\n</code></pre>"},{"location":"jenkins/scenario_05_deploy_eks/#scenario-3-service-discovery-failures","title":"\u2705 Scenario 3: Service Discovery Failures","text":"<pre><code>def test_service_discovery_failure():\n    \"\"\"Test service discovery under chaos\"\"\"\n    # Deploy service\n    kubectl_apply(\"service.yaml\")\n\n    # Simulate DNS failure\n    kubectl_patch_service(\"chaos-app-service\", \n                         '{\"spec\":{\"clusterIP\":\"10.0.0.999\"}}')\n\n    # Verify service is unreachable\n    with pytest.raises(Exception):\n        kubectl_exec(\"chaos-app-pod\", \"curl\", \"chaos-app-service:3000\")\n</code></pre>"},{"location":"jenkins/scenario_05_deploy_eks/#troubleshooting","title":"\u2705 Troubleshooting","text":"<ul> <li>Cannot connect to EKS:</li> <li>Check kubeconfig and AWS credentials.</li> <li>Ensure your cluster is running and accessible.</li> <li>YAML validation fails:</li> <li>Check for syntax errors in your manifest files in <code>tests/deploy/</code>.</li> <li>Pods stuck or failing:</li> <li>Use Jenkins logs to inspect rollout status and pod events.</li> <li>Build fails:</li> <li>Check for missing dependencies in <code>requirements.txt</code>.</li> <li>Review the Docker build logs for errors.</li> <li>No reports generated:</li> <li>Check the Jenkins workspace and ensure reports are written to the correct directory.</li> </ul>"},{"location":"jenkins/scenario_05_deploy_eks/#useful-commands","title":"\u2705 Useful Commands","text":"<ul> <li>See running pods and services:   <code>bash   kubectl get pods   kubectl get services</code></li> <li>Check rollout status:   <code>bash   kubectl rollout status deployment/&lt;deployment-name&gt;</code></li> <li>View events for troubleshooting:   <code>bash   kubectl get events --sort-by=.metadata.creationTimestamp</code></li> </ul>"},{"location":"jenkins/scenario_05_deploy_eks/#monitoring-reporting","title":"\ud83d\udcca Monitoring &amp; Reporting","text":""},{"location":"jenkins/scenario_05_deploy_eks/#deployment-metrics","title":"\u2705 Deployment Metrics","text":"<ul> <li>Deployment success rate</li> <li>Rollout time</li> <li>Pod startup time</li> <li>Resource utilization</li> </ul>"},{"location":"jenkins/scenario_05_deploy_eks/#chaos-metrics","title":"\u2705 Chaos Metrics","text":"<ul> <li>Number of deployment failures</li> <li>Recovery time from failures</li> <li>Service discovery reliability</li> <li>Node failure resilience</li> </ul> <p>Next: Scenario 01: Docker Build | Scenario 02: Testcontainers | Scenario 03: HTML Reports | Scenario 04: Manage Secrets</p> <p>This scenario helps you master Kubernetes deployments in Jenkins, preparing you for real-world cloud CI/CD challenges! \ud83d\udd25 </p>"},{"location":"phases/docker/","title":"\ud83d\udc33 Phase 2 \u2013 Docker Mastery","text":"<p>Welcome to Phase 2 of the CI/CD Chaos Workshop \u2014 the stage where we dive deep into Docker, learn how to build Python apps properly, and create chaos-worthy Docker images for production!</p> <p>This phase demonstrates:</p> <p>\u2705 Multi-stage builds \u2705 Docker image size comparisons \u2705 Production vs. dev Dockerfiles \u2705 Deploying multiple versions of your app \u2705 Generating Docker analysis reports</p> <p>\ud83c\udfaf Goal: Show how tiny changes in Dockerfiles affect: - Build times - Image sizes - Security - Performance</p>"},{"location":"phases/docker/#what-were-building","title":"\ud83d\ude80 What We're Building","text":"<p>We're developing a FastAPI Python app:</p> <ul> <li>5 different versions</li> <li>Each with new features, animations, or visuals</li> <li>Deployed via Docker</li> <li>Automatically analyzed for:<ul> <li>image size</li> <li>layer count</li> <li>base image details</li> </ul> </li> </ul> <p>Chaos Agent says: \"Let's bloat those images!\" Our mission: keep images lean and secure.</p>"},{"location":"phases/docker/#how-to-deploy-versions","title":"\u2728 How to Deploy Versions","text":"<p>Instead of manually switching files and building containers, we've automated everything!</p> <p>Run:</p> <pre><code>python Docker/workshop_tools/deploy_version.py 3\n</code></pre> <p>\u2705 This:</p> <ul> <li>Copies the correct <code>main_vX.py</code> to <code>main.py</code></li> <li>Builds your Docker image</li> <li>Stops/removes any container running on port 3000</li> <li>Runs the new version</li> <li>Generates a beautiful HTML Docker report under:</li> </ul> <pre><code>reports/version_3/docker_report.html\n</code></pre>"},{"location":"phases/docker/#docker-analysis-reports","title":"\ud83d\udcca Docker Analysis Reports","text":"<p>Every deploy automatically runs:</p> <pre><code>python Docker/workshop_tools/generate_docker_report.py 3\n</code></pre> <p>This analyzes:</p> <p>\u2705 Image size (MB) \u2705 Number of layers \u2705 Base image used \u2705 Recommendations for optimization</p> <p>It creates a report like:</p> <p>Why it matters: This makes Docker transparent for developers and helps avoid bloat.</p>"},{"location":"phases/docker/#demo-scenarios","title":"\ud83d\udc0d Demo Scenarios","text":"<p>During the workshop, we'll:</p> <p>\u2705 Deploy version 1 \u2192 tiny image \u2705 Deploy version 2 \u2192 adds emojis \u2192 image grows \u2705 Deploy version 3 \u2192 multi-stage build \u2192 image shrinks \u2705 Deploy version 4 \u2192 adds background workers \u2192 image grows \u2705 Deploy version 5 \u2192 chaos animations \u2192 biggest image</p> <p>We'll learn how to:</p> <ul> <li>Avoid large images</li> <li>Use <code>.dockerignore</code> effectively</li> <li>Minimize layers</li> <li>Prefer multi-stage builds</li> <li>Separate dev vs prod images</li> </ul> <p>Chaos Agent's trap: </p> <p>\"Add one more pip install\u2026 what's the harm?\"</p> <p>We'll prove why that's dangerous.</p>"},{"location":"phases/docker/#why-multi-stage-builds-matter","title":"\ud83e\udd39 Why Multi-Stage Builds Matter","text":"<p>Without multi-stage:</p> <ul> <li>Images ~400MB or more</li> <li>Contains unnecessary build tools</li> <li>Slower deployments</li> </ul> <p>With multi-stage:</p> <ul> <li>Images ~100MB or less</li> <li>Production only includes:<ul> <li>compiled Python code</li> <li>minimal runtime packages</li> </ul> </li> <li>Fewer attack surfaces</li> </ul> <p>Example Dockerfile:</p> <pre><code># First stage\nFROM python:3.12-slim AS builder\nWORKDIR /app\nCOPY requirements.txt .\nRUN pip install --no-cache-dir --prefix=/install -r requirements.txt\n\n# Second stage\nFROM python:3.12-slim\nWORKDIR /app\nCOPY --from=builder /install /usr/local\nCOPY ./app ./app\nCMD [\"uvicorn\", \"app.main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"3000\"]\n</code></pre> <p>Best Practice: Keep the runtime image as slim as possible.</p>"},{"location":"phases/docker/#tips-for-workshop-demos","title":"\ud83d\udca1 Tips for Workshop Demos","text":"<p>\u2705 Show Docker image size differences:</p> <pre><code>docker images\n</code></pre> <p>\u2705 Check layer digests:</p> <pre><code>docker inspect ci-cd-chaos-app:v3\n</code></pre> <p>\u2705 Show Docker build history:</p> <pre><code>docker history ci-cd-chaos-app:v3\n</code></pre> <p>\u2705 Explain why small images deploy faster.</p> <p>\u2705 Highlight how multi-stage prevents secrets from leaking into final images.</p> <p>Chaos Agent: </p> <p>\"Let's leave secrets in the image. No one will find them\u2026\"</p> <p>We'll prove how scanning tools and image inspection can expose secrets.</p>"},{"location":"phases/docker/#chaos-engineering-with-docker","title":"\ud83d\udd25 Chaos Engineering with Docker","text":"<p>Optional chaos ideas:</p> <ul> <li>Randomly build incorrect versions</li> <li>Introduce slow builds to show Docker caching</li> <li>Simulate Docker build errors</li> <li>Show how CI/CD detects Docker issues early</li> </ul> <p>Mission: Prove that pipelines protect you from Docker chaos.</p>"},{"location":"phases/docker/#run-it-all-together","title":"\u2705 Run It All Together","text":"<p>To deploy version 5 and see the full chaos experience:</p> <pre><code>python Docker/workshop_tools/deploy_version.py --version 5\n</code></pre> <p>Then check:</p> <pre><code># View the running app\ncurl http://localhost:3000\n\n# Check the Docker report\nopen reports/version_5/docker_report.html\n</code></pre>"},{"location":"phases/docker/#chaos-testing-scenarios","title":"\ud83e\uddea Chaos Testing Scenarios","text":""},{"location":"phases/docker/#scenario-1-docker-build-failures","title":"\u2705 Scenario 1: Docker Build Failures","text":"<pre><code># Simulate Docker build failures\ndocker build --no-cache -t chaos-app:broken .\n# Expected: Build fails due to missing dependencies\n</code></pre>"},{"location":"phases/docker/#scenario-2-image-size-explosion","title":"\u2705 Scenario 2: Image Size Explosion","text":"<pre><code># Compare image sizes\ndocker images chaos-app --format \"table {{.Tag}}\\t{{.Size}}\"\n# Expected: Version 5 should be significantly larger than Version 1\n</code></pre>"},{"location":"phases/docker/#scenario-3-security-vulnerabilities","title":"\u2705 Scenario 3: Security Vulnerabilities","text":"<pre><code># Scan for vulnerabilities\ndocker run --rm -v /var/run/docker.sock:/var/run/docker.sock \\\n  aquasec/trivy image chaos-app:v1\n# Expected: Find potential security issues\n</code></pre>"},{"location":"phases/docker/#monitoring-reporting","title":"\ud83d\udcca Monitoring &amp; Reporting","text":""},{"location":"phases/docker/#docker-metrics","title":"\u2705 Docker Metrics","text":"<ul> <li>Image build time</li> <li>Image size trends</li> <li>Layer count analysis</li> <li>Security vulnerability count</li> </ul>"},{"location":"phases/docker/#chaos-metrics","title":"\u2705 Chaos Metrics","text":"<ul> <li>Build failure rate</li> <li>Image size explosion rate</li> <li>Security issue detection rate</li> </ul>"},{"location":"phases/docker/#next-steps","title":"\ud83c\udfaf Next Steps","text":"<p>\u2705 Phase 2 Complete: You now have Docker mastery! \u2705 Ready for Phase 3: Jenkins Pipeline Chaos \u2705 Chaos Agent Status: Defeated in Docker optimization! \ud83d\udd76\ufe0f</p> <p>Remember: Docker is your first line of defense against deployment chaos. Keep images lean, secure, and fast! \ud83d\udd25</p>"},{"location":"phases/jenkins/","title":"\ud83d\udd27 Phase 3 \u2013 Pipeline Showdown (Jenkins)","text":"<p>Welcome to Phase 3 of the CI/CD Chaos Workshop!</p> <p>This is where we turn chaos into control by building a production-grade Jenkins pipeline that:</p> <p>\u2705 Builds Docker images \u2705 Runs Testcontainers tests \u2705 Archives HTML reports \u2705 Deploys safely to AWS EKS \u2705 Handles secrets securely</p> <p>Mission: \"Chaos Agent sabotaged our pipelines. Let's rebuild stronger!\"</p>"},{"location":"phases/jenkins/#running-jenkins-with-docker","title":"\ud83d\udc33 Running Jenkins with Docker","text":"<p>We'll run Jenkins inside Docker.</p> <p>Start Jenkins:</p> <pre><code>docker run -d \\\n  -p 8080:8080 \\\n  -v jenkins_home:/var/jenkins_home \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  jenkins/jenkins:lts\n</code></pre> <p>\u2705 Best Practices:</p> <ul> <li>Mount the Docker socket</li> <li>Prefer using Docker agents for builds rather than the Jenkins master node</li> </ul>"},{"location":"phases/jenkins/#scenario-1-building-docker-images-in-jenkins","title":"\ud83d\ude80 Scenario 1 \u2013 Building Docker Images in Jenkins","text":""},{"location":"phases/jenkins/#why-it-matters","title":"\u2705 Why It Matters","text":"<p>Building Docker images in Jenkins ensures consistent environments and reliable builds for all deployments.</p> <p>Chaos Event: \"Docker build fails with 'Cannot connect to the Docker daemon!'\"</p>"},{"location":"phases/jenkins/#what-well-do","title":"\u2705 What We'll Do","text":"<p>\u2705 Build Python Docker images \u2705 Learn multi-stage Docker builds \u2705 Understand Docker socket mounting in Jenkins-in-Docker</p>"},{"location":"phases/jenkins/#how-to-fix-it","title":"\u2705 How to Fix It","text":"<p>\u2705 Mount the Docker socket into Jenkins \u2705 Install Docker plugin in Jenkins \u2705 Prefer Docker agents for builds</p>"},{"location":"phases/jenkins/#pipeline-snippet","title":"\u2705 Pipeline Snippet","text":"<pre><code>stage('Build Docker Image') {\n    steps {\n        script {\n            dockerImage = docker.build(\"ci-cd-chaos-app:v${params.APP_VERSION}\")\n        }\n    }\n}\n</code></pre>"},{"location":"phases/jenkins/#best-practices","title":"\u2705 Best Practices","text":"<p>\u2705 Keep images minimal \u2705 Always tag images with unique versions \u2705 Don't run Docker builds on Jenkins master node</p>"},{"location":"phases/jenkins/#what-could-go-wrong","title":"\u2705 What Could Go Wrong?","text":"<ul> <li>Docker socket permission issues  </li> <li>Image tags overwritten accidentally  </li> <li>Disk space filling up on Jenkins nodes</li> </ul>"},{"location":"phases/jenkins/#scenario-2-running-testcontainers-tests","title":"\ud83d\ude80 Scenario 2 \u2013 Running Testcontainers Tests","text":""},{"location":"phases/jenkins/#why-it-matters_1","title":"\u2705 Why It Matters","text":"<p>Testcontainers enables true integration testing by spinning up real databases and services in containers.</p> <p>Chaos Event: \"Testcontainers can't connect to Docker. Tests fail.\"</p>"},{"location":"phases/jenkins/#what-well-do_1","title":"\u2705 What We'll Do","text":"<p>\u2705 Run pytest Testcontainers tests \u2705 Learn how to ensure Docker connectivity for tests</p>"},{"location":"phases/jenkins/#how-to-fix-it_1","title":"\u2705 How to Fix It","text":"<p>\u2705 Use Docker-enabled Jenkins agents \u2705 Check Docker socket permissions</p>"},{"location":"phases/jenkins/#pipeline-snippet_1","title":"\u2705 Pipeline Snippet","text":"<pre><code>stage('Run Testcontainers Tests') {\n    steps {\n        sh 'pytest tests/'\n    }\n}\n</code></pre>"},{"location":"phases/jenkins/#best-practices_1","title":"\u2705 Best Practices","text":"<p>\u2705 Always clean up containers after tests \u2705 Use minimal images for speed \u2705 Avoid running on shared network ports</p>"},{"location":"phases/jenkins/#what-could-go-wrong_1","title":"\u2705 What Could Go Wrong?","text":"<ul> <li>Docker API errors  </li> <li>Port collisions between test containers  </li> <li>Resource starvation on Jenkins agents</li> </ul>"},{"location":"phases/jenkins/#scenario-3-archiving-html-reports","title":"\ud83d\ude80 Scenario 3 \u2013 Archiving HTML Reports","text":""},{"location":"phases/jenkins/#why-it-matters_2","title":"\u2705 Why It Matters","text":"<p>HTML reports help teams visually inspect results and keep a paper trail for compliance or troubleshooting.</p> <p>Chaos Event: \"Reports not found. Pipeline fails.\"</p>"},{"location":"phases/jenkins/#what-well-do_2","title":"\u2705 What We'll Do","text":"<p>\u2705 Archive Docker analysis HTML reports from Phase 2 \u2705 Display reports in Jenkins UI</p>"},{"location":"phases/jenkins/#how-to-fix-it_2","title":"\u2705 How to Fix It","text":"<p>\u2705 Check archive paths \u2705 Validate workspace usage</p>"},{"location":"phases/jenkins/#pipeline-snippet_2","title":"\u2705 Pipeline Snippet","text":"<pre><code>stage('Publish Reports') {\n    steps {\n        archiveArtifacts artifacts: 'reports/**', fingerprint: true\n    }\n}\n</code></pre>"},{"location":"phases/jenkins/#best-practices_2","title":"\u2705 Best Practices","text":"<p>\u2705 Keep report paths consistent \u2705 Fingerprint reports for traceability \u2705 Use retention policies for old artifacts</p>"},{"location":"phases/jenkins/#what-could-go-wrong_2","title":"\u2705 What Could Go Wrong?","text":"<ul> <li>Wrong file paths  </li> <li>Workspace wiped by cleanup plugins</li> </ul>"},{"location":"phases/jenkins/#scenario-4-managing-secrets-for-aws","title":"\ud83d\ude80 Scenario 4 \u2013 Managing Secrets for AWS","text":""},{"location":"phases/jenkins/#why-it-matters_3","title":"\u2705 Why It Matters","text":"<p>CI/CD pipelines must handle secrets safely to avoid catastrophic data leaks.</p> <p>Chaos Event: \"Secrets printed in Jenkins logs!\"</p>"},{"location":"phases/jenkins/#what-well-do_3","title":"\u2705 What We'll Do","text":"<p>\u2705 Use Jenkins credentials for AWS access \u2705 Scan for secrets in code \u2705 Generate security reports</p>"},{"location":"phases/jenkins/#how-to-fix-it_3","title":"\u2705 How to Fix It","text":"<p>\u2705 Store secrets in Jenkins credentials \u2705 Use secret scanning tools \u2705 Never log sensitive data</p>"},{"location":"phases/jenkins/#pipeline-snippet_3","title":"\u2705 Pipeline Snippet","text":"<pre><code>stage('Deploy to AWS') {\n    steps {\n        withCredentials([string(credentialsId: 'aws-access-key', variable: 'AWS_ACCESS_KEY_ID')]) {\n            sh 'aws eks update-kubeconfig --name my-cluster'\n        }\n    }\n}\n</code></pre>"},{"location":"phases/jenkins/#best-practices_3","title":"\u2705 Best Practices","text":"<p>\u2705 Use Jenkins credentials store \u2705 Rotate secrets regularly \u2705 Scan for hardcoded secrets</p>"},{"location":"phases/jenkins/#what-could-go-wrong_3","title":"\u2705 What Could Go Wrong?","text":"<ul> <li>Secrets in logs  </li> <li>Hardcoded credentials  </li> <li>Expired AWS tokens</li> </ul>"},{"location":"phases/jenkins/#scenario-5-deploying-to-aws-eks","title":"\ud83d\ude80 Scenario 5 \u2013 Deploying to AWS EKS","text":""},{"location":"phases/jenkins/#why-it-matters_4","title":"\u2705 Why It Matters","text":"<p>Kubernetes deployments need proper validation and rollback capabilities.</p> <p>Chaos Event: \"Deployment stuck in pending. Pods won't start!\"</p>"},{"location":"phases/jenkins/#what-well-do_4","title":"\u2705 What We'll Do","text":"<p>\u2705 Deploy Python apps to EKS \u2705 Monitor rollout status \u2705 Handle deployment failures</p>"},{"location":"phases/jenkins/#how-to-fix-it_4","title":"\u2705 How to Fix It","text":"<p>\u2705 Validate YAML manifests \u2705 Check resource limits \u2705 Monitor pod events</p>"},{"location":"phases/jenkins/#pipeline-snippet_4","title":"\u2705 Pipeline Snippet","text":"<pre><code>stage('Deploy to EKS') {\n    steps {\n        sh 'kubectl apply -f k8s/'\n        sh 'kubectl rollout status deployment/chaos-app'\n    }\n}\n</code></pre>"},{"location":"phases/jenkins/#best-practices_4","title":"\u2705 Best Practices","text":"<p>\u2705 Always validate manifests \u2705 Use health checks \u2705 Have rollback procedures</p>"},{"location":"phases/jenkins/#what-could-go-wrong_4","title":"\u2705 What Could Go Wrong?","text":"<ul> <li>Invalid YAML syntax  </li> <li>Resource constraints  </li> <li>Network connectivity issues</li> </ul>"},{"location":"phases/jenkins/#chaos-testing-scenarios","title":"\ud83e\uddea Chaos Testing Scenarios","text":""},{"location":"phases/jenkins/#scenario-1-pipeline-failures","title":"\u2705 Scenario 1: Pipeline Failures","text":"<pre><code>// Simulate pipeline failures\nstage('Chaos Test') {\n    steps {\n        script {\n            // Randomly fail builds\n            if (Math.random() &lt; 0.2) {\n                error \"Simulated pipeline failure\"\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"phases/jenkins/#scenario-2-slow-builds","title":"\u2705 Scenario 2: Slow Builds","text":"<pre><code>// Simulate slow builds\nstage('Slow Build') {\n    steps {\n        script {\n            // Add artificial delay\n            sleep 30\n\n            // Continue with build\n            sh 'docker build -t chaos-app .'\n        }\n    }\n}\n</code></pre>"},{"location":"phases/jenkins/#scenario-3-resource-exhaustion","title":"\u2705 Scenario 3: Resource Exhaustion","text":"<pre><code>// Simulate resource issues\nstage('Resource Test') {\n    steps {\n        script {\n            // Try to use excessive resources\n            sh 'docker run --memory=10g chaos-app'\n        }\n    }\n}\n</code></pre>"},{"location":"phases/jenkins/#monitoring-reporting","title":"\ud83d\udcca Monitoring &amp; Reporting","text":""},{"location":"phases/jenkins/#pipeline-metrics","title":"\u2705 Pipeline Metrics","text":"<ul> <li>Build success rate</li> <li>Average build time</li> <li>Test execution time</li> <li>Deployment success rate</li> </ul>"},{"location":"phases/jenkins/#chaos-metrics","title":"\u2705 Chaos Metrics","text":"<ul> <li>Number of simulated failures</li> <li>Recovery time from failures</li> <li>System resilience score</li> </ul>"},{"location":"phases/jenkins/#next-steps","title":"\ud83c\udfaf Next Steps","text":"<p>\u2705 Phase 3 Complete: You now have Jenkins pipeline mastery! \u2705 Ready for Phase 4: Kubernetes Chaos &amp; Scalability \u2705 Chaos Agent Status: Defeated in pipeline automation! \ud83d\udd76\ufe0f</p> <p>Remember: Jenkins pipelines are your automation backbone. When chaos strikes, your pipeline will be your shield! \ud83d\udd25</p>"},{"location":"phases/k8s/","title":"\u2638\ufe0f Phase 4 \u2013 Kubernetes Chaos &amp; Scalability","text":"<p>Welcome to Phase 4 of the CI/CD Chaos Workshop \u2014 where we deploy our Python apps to Kubernetes and learn to handle real-world chaos in production!</p> <p>This phase covers:</p> <p>\u2705 Kubernetes deployments \u2705 Auto-scaling with HPA \u2705 Chaos engineering experiments \u2705 Monitoring and observability \u2705 Blue-green deployments</p> <p>\ud83c\udfaf Goal: Prove our apps survive chaos in Kubernetes \u2014 pods crashing, nodes failing, networks partitioning.</p>"},{"location":"phases/k8s/#what-were-building","title":"\ud83d\ude80 What We're Building","text":"<p>We're deploying our FastAPI Python app to Kubernetes with:</p> <ul> <li>Auto-scaling based on CPU/memory usage</li> <li>Health checks and readiness probes</li> <li>Chaos experiments to test resilience</li> <li>Monitoring with Prometheus and Grafana</li> <li>Blue-green deployments for zero-downtime updates</li> </ul> <p>Chaos Agent says: \"Let's crash some pods and see what happens!\" Our mission: Build apps that survive anything.</p>"},{"location":"phases/k8s/#kubernetes-setup","title":"\u2638\ufe0f Kubernetes Setup","text":""},{"location":"phases/k8s/#local-development","title":"\u2705 Local Development","text":"<p>For local testing, use one of these options:</p> <p>Option 1: Docker Desktop Kubernetes</p> <pre><code># Enable Kubernetes in Docker Desktop\n# Settings \u2192 Kubernetes \u2192 Enable Kubernetes\nkubectl cluster-info\n</code></pre> <p>Option 2: Minikube</p> <pre><code># Start Minikube\nminikube start\nkubectl cluster-info\n</code></pre> <p>Option 3: Kind</p> <pre><code># Create Kind cluster\nkind create cluster --name chaos-workshop\nkubectl cluster-info\n</code></pre>"},{"location":"phases/k8s/#scenario-1-basic-deployment","title":"\ud83d\ude80 Scenario 1 \u2013 Basic Deployment","text":""},{"location":"phases/k8s/#why-it-matters","title":"\u2705 Why It Matters","text":"<p>Kubernetes deployments need proper health checks and resource limits to survive chaos.</p> <p>Chaos Event: \"Pods keep crashing and restarting!\"</p>"},{"location":"phases/k8s/#what-well-do","title":"\u2705 What We'll Do","text":"<p>\u2705 Deploy our FastAPI app to Kubernetes \u2705 Add health checks and readiness probes \u2705 Set resource limits and requests \u2705 Monitor pod status</p>"},{"location":"phases/k8s/#deployment-yaml","title":"\u2705 Deployment YAML","text":"<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: chaos-app\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: chaos-app\n  template:\n    metadata:\n      labels:\n        app: chaos-app\n    spec:\n      containers:\n      - name: chaos-app\n        image: chaos-app:latest\n        ports:\n        - containerPort: 3000\n        resources:\n          requests:\n            memory: \"64Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"128Mi\"\n            cpu: \"500m\"\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 3000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /ready\n            port: 3000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n</code></pre>"},{"location":"phases/k8s/#service-yaml","title":"\u2705 Service YAML","text":"<pre><code>apiVersion: v1\nkind: Service\nmetadata:\n  name: chaos-app-service\nspec:\n  selector:\n    app: chaos-app\n  ports:\n  - port: 80\n    targetPort: 3000\n  type: LoadBalancer\n</code></pre>"},{"location":"phases/k8s/#scenario-2-auto-scaling","title":"\ud83d\ude80 Scenario 2 \u2013 Auto-Scaling","text":""},{"location":"phases/k8s/#why-it-matters_1","title":"\u2705 Why It Matters","text":"<p>Auto-scaling ensures your app handles traffic spikes and recovers from failures.</p> <p>Chaos Event: \"Traffic spike! Pods can't handle the load!\"</p>"},{"location":"phases/k8s/#what-well-do_1","title":"\u2705 What We'll Do","text":"<p>\u2705 Create HorizontalPodAutoscaler (HPA) \u2705 Test scaling under load \u2705 Monitor scaling behavior</p>"},{"location":"phases/k8s/#hpa-yaml","title":"\u2705 HPA YAML","text":"<pre><code>apiVersion: autoscaling/v2\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: chaos-app-hpa\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: chaos-app\n  minReplicas: 2\n  maxReplicas: 10\n  metrics:\n  - type: Resource\n    resource:\n      name: cpu\n      target:\n        type: Utilization\n        averageUtilization: 70\n  - type: Resource\n    resource:\n      name: memory\n      target:\n        type: Utilization\n        averageUtilization: 80\n</code></pre>"},{"location":"phases/k8s/#scenario-3-chaos-engineering","title":"\ud83d\ude80 Scenario 3 \u2013 Chaos Engineering","text":""},{"location":"phases/k8s/#why-it-matters_2","title":"\u2705 Why It Matters","text":"<p>Chaos engineering proves your app's resilience by intentionally causing failures.</p> <p>Chaos Event: \"Let's kill some pods and see what happens!\"</p>"},{"location":"phases/k8s/#what-well-do_2","title":"\u2705 What We'll Do","text":"<p>\u2705 Kill random pods \u2705 Simulate node failures \u2705 Test network partitions \u2705 Monitor recovery time</p>"},{"location":"phases/k8s/#chaos-experiments","title":"\u2705 Chaos Experiments","text":"<pre><code>def test_pod_kill_chaos():\n    \"\"\"Kill random pods and verify recovery\"\"\"\n    # Get all pods\n    pods = kubectl_get_pods(\"--selector=app=chaos-app\")\n\n    # Kill a random pod\n    random_pod = random.choice(pods)\n    kubectl_delete_pod(random_pod)\n\n    # Wait for new pod to be ready\n    time.sleep(30)\n\n    # Verify service is still responding\n    response = requests.get(\"http://localhost/health\")\n    assert response.status_code == 200\n</code></pre>"},{"location":"phases/k8s/#scenario-4-blue-green-deployment","title":"\ud83d\ude80 Scenario 4 \u2013 Blue-Green Deployment","text":""},{"location":"phases/k8s/#why-it-matters_3","title":"\u2705 Why It Matters","text":"<p>Blue-green deployments enable zero-downtime updates and instant rollbacks.</p> <p>Chaos Event: \"Deployment failed! Users are seeing errors!\"</p>"},{"location":"phases/k8s/#what-well-do_3","title":"\u2705 What We'll Do","text":"<p>\u2705 Deploy new version alongside old \u2705 Switch traffic gradually \u2705 Rollback instantly if needed</p>"},{"location":"phases/k8s/#blue-green-strategy","title":"\u2705 Blue-Green Strategy","text":"<pre><code># Blue deployment (current)\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: chaos-app-blue\nspec:\n  replicas: 3\n  template:\n    metadata:\n      labels:\n        app: chaos-app\n        version: blue\n    spec:\n      containers:\n      - name: chaos-app\n        image: chaos-app:v1\n        ports:\n        - containerPort: 3000\n\n# Green deployment (new)\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: chaos-app-green\nspec:\n  replicas: 0  # Start with 0 replicas\n  template:\n    metadata:\n      labels:\n        app: chaos-app\n        version: green\n    spec:\n      containers:\n      - name: chaos-app\n        image: chaos-app:v2\n        ports:\n        - containerPort: 3000\n</code></pre>"},{"location":"phases/k8s/#chaos-testing-scenarios","title":"\ud83e\uddea Chaos Testing Scenarios","text":""},{"location":"phases/k8s/#scenario-1-pod-crash-chaos","title":"\u2705 Scenario 1: Pod Crash Chaos","text":"<pre><code># Kill random pods\nkubectl get pods --selector=app=chaos-app -o name | xargs -I {} kubectl delete {}\n\n# Verify auto-recovery\nkubectl get pods --selector=app=chaos-app\n</code></pre>"},{"location":"phases/k8s/#scenario-2-node-failure-simulation","title":"\u2705 Scenario 2: Node Failure Simulation","text":"<pre><code># Drain a node (simulate node failure)\nkubectl drain node-1 --force --ignore-daemonsets\n\n# Verify pods reschedule\nkubectl get pods --all-namespaces -o wide\n</code></pre>"},{"location":"phases/k8s/#scenario-3-resource-exhaustion","title":"\u2705 Scenario 3: Resource Exhaustion","text":"<pre><code># Create resource pressure\nkubectl run stress-test --image=busybox --requests=cpu=1000m,memory=1Gi --limits=cpu=2000m,memory=2Gi --command -- stress --cpu 4 --vm 2 --vm-bytes 1G\n</code></pre>"},{"location":"phases/k8s/#monitoring-observability","title":"\ud83d\udcca Monitoring &amp; Observability","text":""},{"location":"phases/k8s/#metrics-to-track","title":"\u2705 Metrics to Track","text":"<ul> <li>Pod health: Ready/NotReady ratio</li> <li>Scaling: HPA current/target replicas</li> <li>Performance: Response time, throughput</li> <li>Resources: CPU/memory utilization</li> </ul>"},{"location":"phases/k8s/#monitoring-setup","title":"\u2705 Monitoring Setup","text":"<pre><code># Prometheus ServiceMonitor\napiVersion: monitoring.coreos.com/v1\nkind: ServiceMonitor\nmetadata:\n  name: chaos-app-monitor\nspec:\n  selector:\n    matchLabels:\n      app: chaos-app\n  endpoints:\n  - port: metrics\n    interval: 30s\n</code></pre>"},{"location":"phases/k8s/#next-steps","title":"\ud83c\udfaf Next Steps","text":"<p>\u2705 Phase 4 Complete: You now have Kubernetes mastery! \u2705 Ready for Phase 5: Final Victory Deploy \u2705 Chaos Agent Status: Defeated in Kubernetes resilience! \ud83d\udd76\ufe0f</p>"},{"location":"phases/k8s/#monitoring-reporting","title":"\ud83d\udcca Monitoring &amp; Reporting","text":""},{"location":"phases/k8s/#kubernetes-metrics","title":"\u2705 Kubernetes Metrics","text":"<ul> <li>Deployment success rate</li> <li>Pod restart count</li> <li>Auto-scaling events</li> <li>Resource utilization</li> </ul>"},{"location":"phases/k8s/#chaos-metrics","title":"\u2705 Chaos Metrics","text":"<ul> <li>Recovery time from pod failures</li> <li>Service availability during chaos</li> <li>Auto-scaling effectiveness</li> </ul> <p>Remember: Kubernetes is your fortress against chaos. When pods crash, nodes fail, or networks partition, your app should keep running! \ud83d\udd25</p>"},{"location":"phases/setup/","title":"\ud83d\udee0\ufe0f Workshop Setup Guide","text":"<p>Welcome to the CI/CD Chaos Workshop setup! This guide will get you ready to battle the Chaos Agent \ud83d\udd76\ufe0f by setting up all the tools you need.</p> <p>\u23f1\ufe0f Setup Time: 15-20 minutes \ud83c\udfaf Goal: Get everything working so you can focus on defeating chaos!</p>"},{"location":"phases/setup/#prerequisites-checklist","title":"\ud83d\udccb Prerequisites Checklist","text":"<p>Before we start, make sure you have: - \u2705 A computer with at least 8GB RAM - \u2705 Internet connection - \u2705 Administrator access (for some installations) - \u2705 At least 10GB free disk space</p>"},{"location":"phases/setup/#step-1-install-python-310","title":"\ud83d\udc0d Step 1: Install Python 3.10+","text":""},{"location":"phases/setup/#for-windows","title":"For Windows:","text":"<ol> <li>Download Python:</li> <li>Go to python.org/downloads</li> <li>Download Python 3.10 or higher</li> <li> <p>Important: Check \"Add Python to PATH\" during installation</p> </li> <li> <p>Verify Installation: <code>bash    python --version    # Should show: Python 3.10.x or higher</code></p> </li> </ol>"},{"location":"phases/setup/#for-macos","title":"For macOS:","text":"<ol> <li>Using Homebrew (Recommended):    ```bash    # Install Homebrew first if you don't have it    /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"</li> </ol> <p># Install Python    brew install python@3.10    ```</p> <ol> <li>Or download from python.org:</li> <li>Visit python.org/downloads</li> <li>Download the macOS installer</li> <li> <p>Run the installer</p> </li> <li> <p>Verify Installation: <code>bash    python3 --version    # Should show: Python 3.10.x or higher</code></p> </li> </ol>"},{"location":"phases/setup/#for-linux-ubuntudebian","title":"For Linux (Ubuntu/Debian):","text":"<pre><code># Update package list\nsudo apt update\n\n# Install Python 3.10\nsudo apt install python3.10 python3.10-venv python3-pip\n\n# Verify installation\npython3.10 --version\n</code></pre>"},{"location":"phases/setup/#step-2-install-docker-desktop","title":"\ud83d\udc33 Step 2: Install Docker Desktop","text":""},{"location":"phases/setup/#for-windows_1","title":"For Windows:","text":"<ol> <li>Download Docker Desktop:</li> <li>Go to docker.com/products/docker-desktop</li> <li>Download Docker Desktop for Windows</li> <li>Run the installer</li> <li> <p>Important: Enable WSL 2 if prompted</p> </li> <li> <p>Start Docker Desktop:</p> </li> <li>Launch Docker Desktop from Start Menu</li> <li> <p>Wait for the whale icon to stop animating (Docker is ready)</p> </li> <li> <p>Verify Installation: <code>bash    docker --version    docker run hello-world</code></p> </li> </ol>"},{"location":"phases/setup/#for-macos_1","title":"For macOS:","text":"<ol> <li>Download Docker Desktop:</li> <li>Go to docker.com/products/docker-desktop</li> <li>Download Docker Desktop for Mac</li> <li>Drag Docker to Applications folder</li> <li> <p>Launch Docker Desktop</p> </li> <li> <p>Verify Installation: <code>bash    docker --version    docker run hello-world</code></p> </li> </ol>"},{"location":"phases/setup/#for-linux","title":"For Linux:","text":"<pre><code># Install Docker using convenience script\ncurl -fsSL https://get.docker.com -o get-docker.sh\nsudo sh get-docker.sh\n\n# Add your user to docker group (log out and back in)\nsudo usermod -aG docker $USER\n\n# Start Docker service\nsudo systemctl start docker\nsudo systemctl enable docker\n\n# Verify installation\ndocker --version\ndocker run hello-world\n</code></pre>"},{"location":"phases/setup/#step-3-choose-your-kubernetes-cluster","title":"\u2638\ufe0f Step 3: Choose Your Kubernetes Cluster","text":"<p>You have 3 options for running Kubernetes locally. Choose ONE that works best for you:</p>"},{"location":"phases/setup/#option-a-docker-desktop-kubernetes-easiest","title":"Option A: Docker Desktop Kubernetes (Easiest)","text":"<p>If you installed Docker Desktop above, you already have this option!</p> <ol> <li>Enable Kubernetes in Docker Desktop:</li> <li>Open Docker Desktop</li> <li>Go to Settings \u2192 Kubernetes</li> <li>Check \"Enable Kubernetes\"</li> <li> <p>Click \"Apply &amp; Restart\"</p> </li> <li> <p>Verify Installation: <code>bash    kubectl version --client    kubectl cluster-info</code></p> </li> </ol>"},{"location":"phases/setup/#option-b-minikube-most-popular","title":"Option B: Minikube (Most Popular)","text":"<ol> <li>Install Minikube:</li> </ol> <p>Windows:    ```bash    # Using Chocolatey    choco install minikube</p> <p># Or download manually from: https://minikube.sigs.k8s.io/docs/start/    ```</p> <p>macOS: <code>bash    # Using Homebrew    brew install minikube</code></p> <p>Linux: <code>bash    # Download and install    curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64    sudo install minikube-linux-amd64 /usr/local/bin/minikube</code></p> <ol> <li> <p>Start Minikube: <code>bash    minikube start</code></p> </li> <li> <p>Verify Installation: <code>bash    kubectl version --client    minikube status</code></p> </li> </ol>"},{"location":"phases/setup/#option-c-kind-kubernetes-in-docker","title":"Option C: Kind (Kubernetes in Docker)","text":"<ol> <li>Install Kind:</li> </ol> <p>Windows: <code>bash    # Using Chocolatey    choco install kind</code></p> <p>macOS: <code>bash    # Using Homebrew    brew install kind</code></p> <p>Linux: <code>bash    # Download and install    curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64    chmod +x ./kind    sudo mv ./kind /usr/local/bin/kind</code></p> <ol> <li> <p>Create a Kind Cluster: <code>bash    kind create cluster --name chaos-workshop</code></p> </li> <li> <p>Verify Installation: <code>bash    kubectl version --client    kind get clusters</code></p> </li> </ol>"},{"location":"phases/setup/#step-4-install-kubectl-kubernetes-cli","title":"\ud83c\udfaf Step 4: Install kubectl (Kubernetes CLI)","text":"<p>If you don't have kubectl yet:</p>"},{"location":"phases/setup/#windows","title":"Windows:","text":"<pre><code># Using Chocolatey\nchoco install kubernetes-cli\n\n# Or download from: https://kubernetes.io/docs/tasks/tools/install-kubectl/\n</code></pre>"},{"location":"phases/setup/#macos","title":"macOS:","text":"<pre><code># Using Homebrew\nbrew install kubectl\n\n# Or using curl\ncurl -LO \"https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/darwin/amd64/kubectl\"\nchmod +x ./kubectl\nsudo mv ./kubectl /usr/local/bin/kubectl\n</code></pre>"},{"location":"phases/setup/#linux","title":"Linux:","text":"<pre><code># Download kubectl\ncurl -LO \"https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl\"\nchmod +x kubectl\nsudo mv kubectl /usr/local/bin/\n</code></pre> <p>Verify kubectl:</p> <pre><code>kubectl version --client\n</code></pre>"},{"location":"phases/setup/#step-5-clone-workshop-repository","title":"\ud83d\udce6 Step 5: Clone Workshop Repository","text":"<ol> <li>Install Git (if not already installed):</li> </ol> <p>Windows: Download from git-scm.com</p> <p>macOS: <code>bash    brew install git</code></p> <p>Linux: <code>bash    sudo apt install git  # Ubuntu/Debian    sudo yum install git  # CentOS/RHEL</code></p> <ol> <li>Clone the workshop repo: <code>bash    git clone https://github.com/vellankikoti/ci-cd-chaos-workshop.git    cd ci-cd-chaos-workshop</code></li> </ol>"},{"location":"phases/setup/#step-6-set-up-python-virtual-environment","title":"\ud83d\udc0d Step 6: Set Up Python Virtual Environment","text":"<ol> <li>Create a virtual environment:    ```bash    # Windows    python -m venv venv</li> </ol> <p># macOS/Linux    python3 -m venv venv    ```</p> <ol> <li>Activate the virtual environment:</li> </ol> <p>Windows: <code>bash    venv\\Scripts\\activate</code></p> <p>macOS/Linux: <code>bash    source venv/bin/activate</code></p> <ol> <li>Verify activation: <code>bash    # You should see (venv) at the start of your prompt    which python  # macOS/Linux    where python  # Windows</code></li> </ol>"},{"location":"phases/setup/#step-7-install-required-packages","title":"\ud83d\udcda Step 7: Install Required Packages","text":"<ol> <li> <p>Upgrade pip: <code>bash    pip install --upgrade pip</code></p> </li> <li> <p>Install workshop dependencies: <code>bash    pip install -r requirements.txt</code></p> </li> <li> <p>Install additional packages for the workshop: <code>bash    pip install docker    pip install kubernetes    pip install jenkins    pip install jinja2    pip install weasyprint    pip install mkdocs    pip install mkdocs-material</code></p> </li> <li> <p>Verify installations: <code>bash    python -c \"import pytest, testcontainers, docker, kubernetes, fastapi, uvicorn; print('\u2705 All packages installed successfully!')\"</code></p> </li> </ol>"},{"location":"phases/setup/#step-8-test-your-setup","title":"\ud83e\uddea Step 8: Test Your Setup","text":"<p>Run these commands to verify everything works:</p> <ol> <li> <p>Test Python: <code>bash    python --version</code></p> </li> <li> <p>Test Docker: <code>bash    docker run hello-world</code></p> </li> <li> <p>Test Kubernetes: <code>bash    kubectl version --client    kubectl cluster-info</code></p> </li> <li> <p>Test Testcontainers:    ```bash    python -c \"    from testcontainers.core.container import DockerContainer    from testcontainers.core.waiting_utils import wait_for_logs</p> </li> </ol> <p># Test Redis container    with DockerContainer('redis:alpine') as redis:        redis.with_exposed_ports(6379)        redis.start()        print('\u2705 Testcontainers working!')    \"    ```</p>"},{"location":"phases/setup/#step-9-youre-ready","title":"\ud83c\udf89 Step 9: You're Ready!","text":"<p>If all tests pass, you're ready to battle the Chaos Agent! \ud83d\udd76\ufe0f</p> <p>Next steps: 1. \u2705 Read the Workshop Overview 2. \u2705 Start with Phase 1: Test Mayhem 3. \u2705 Prepare to defeat chaos! \ud83d\udd25</p>"},{"location":"phases/setup/#troubleshooting","title":"\ud83c\udd98 Troubleshooting","text":""},{"location":"phases/setup/#common-issues","title":"Common Issues:","text":"<p>Docker not starting: - Windows: Make sure WSL 2 is enabled - macOS: Check Docker Desktop is running - Linux: Run <code>sudo systemctl start docker</code></p> <p>Kubernetes connection issues: - Minikube: Run <code>minikube start</code> - Kind: Run <code>kind create cluster</code> - Docker Desktop: Enable Kubernetes in settings</p> <p>Python package issues: - Make sure your virtual environment is activated - Try: <code>pip install --upgrade pip setuptools wheel</code></p> <p>Permission errors: - Windows: Run as Administrator - Linux/macOS: Use <code>sudo</code> where needed</p>"},{"location":"phases/setup/#still-stuck","title":"Still Stuck?","text":"<ol> <li>Check the Troubleshooting Guide</li> <li>Ask in the workshop Discord/Slack</li> <li>Open an issue on GitHub</li> </ol>"},{"location":"phases/setup/#quick-verification-checklist","title":"\ud83c\udfaf Quick Verification Checklist","text":"<p>Before the workshop starts, make sure you can run:</p> <pre><code># \u2705 Python works\npython --version\n\n# \u2705 Docker works  \ndocker run hello-world\n\n# \u2705 Kubernetes works\nkubectl version --client\n\n# \u2705 Virtual environment is active\necho $VIRTUAL_ENV  # Should show path to venv\n\n# \u2705 Packages are installed\npython -c \"import pytest, testcontainers, docker, kubernetes, fastapi, uvicorn; print('Ready!')\"\n</code></pre> <p>If all \u2705 pass, you're ready to create some chaos! \ud83e\udde8</p> <p>See you in the workshop! Let's defeat that Chaos Agent together! \ud83d\udd76\ufe0f\ud83d\udd25</p>"},{"location":"phases/testcontainers/","title":"\ud83e\uddea Phase 1 \u2013 TestContainers","text":"<p>Welcome to Phase 1 of the CI/CD Chaos Workshop \u2014 the place where we build truly reliable tests using TestContainers!</p> <p>This phase covers:</p> <p>\u2705 Database container testing \u2705 Isolated, repeatable environments \u2705 Automatic teardown between tests \u2705 Fast feedback for developers \u2705 Beautiful reporting for stakeholders</p> <p>\ud83c\udfaf Goal: Prove our tests survive chaos \u2014 no matter what the environment.</p>"},{"location":"phases/testcontainers/#why-testcontainers","title":"\u2705 Why TestContainers?","text":"<p>TestContainers lets us:</p> <ul> <li>Launch real databases in Docker</li> <li>Run them alongside our Python tests</li> <li>Avoid flaky tests that depend on external services</li> <li>Guarantee identical test environments everywhere</li> </ul> <p>Chaos Agent: </p> <p>\"Let's run tests against production. What's the worst that could happen?\"</p> <p>We'll prove why that's a bad idea.</p>"},{"location":"phases/testcontainers/#database-testing-scenarios","title":"\ud83d\ude80 Database Testing Scenarios","text":"<p>Below are production-grade testing scenarios you'll implement.</p> <p>Each follows the same pattern:</p> <ul> <li>Start a container (PostgreSQL, MySQL, etc.)</li> <li>Run tests in Python using pytest</li> <li>Tear down automatically</li> <li>Analyze logs and results</li> </ul> <p>These scenarios are your first defense against chaos.</p>"},{"location":"phases/testcontainers/#scenario-1-postgresql-testcontainer","title":"\ud83d\ude80 Scenario 1 \u2013 PostgreSQL TestContainer","text":""},{"location":"phases/testcontainers/#why-it-matters","title":"\u2705 Why It Matters","text":"<p>PostgreSQL is a common backend for modern apps. Reliable tests ensure migrations and queries work safely.</p> <p>Chaos Event: \"My dev machine has PostgreSQL 14. Production has PostgreSQL 15!\"</p>"},{"location":"phases/testcontainers/#what-well-do","title":"\u2705 What We'll Do","text":"<p>\u2705 Spin up a PostgreSQL container \u2705 Connect with SQLAlchemy \u2705 Run migrations and tests</p>"},{"location":"phases/testcontainers/#how-to-fix-it","title":"\u2705 How to Fix It","text":"<p>\u2705 Always test against the same Postgres version as production.</p>"},{"location":"phases/testcontainers/#test-snippet","title":"\u2705 Test Snippet","text":"<pre><code>from testcontainers.postgres import PostgresContainer\n\ndef test_postgres_container():\n    with PostgresContainer(\"postgres:15\") as postgres:\n        conn_url = postgres.get_connection_url()\n        # Connect with SQLAlchemy or psycopg2 and run tests\n        assert conn_url.startswith(\"postgresql://\")\n</code></pre>"},{"location":"phases/testcontainers/#best-practices","title":"\u2705 Best Practices","text":"<p>\u2705 Always specify Postgres version \u2705 Truncate tables between tests \u2705 Never test against a shared local instance</p>"},{"location":"phases/testcontainers/#what-could-go-wrong","title":"\u2705 What Could Go Wrong?","text":"<ul> <li>Connection refused errors  </li> <li>Port conflicts if containers not cleaned up  </li> <li>Version mismatch between local and prod</li> </ul>"},{"location":"phases/testcontainers/#scenario-2-mysql-testcontainer","title":"\ud83d\ude80 Scenario 2 \u2013 MySQL TestContainer","text":""},{"location":"phases/testcontainers/#why-it-matters_1","title":"\u2705 Why It Matters","text":"<p>MySQL powers tons of legacy apps and new workloads.</p> <p>Chaos Event: \"MySQL crashes tests because dev machine has wrong credentials.\"</p>"},{"location":"phases/testcontainers/#what-well-do_1","title":"\u2705 What We'll Do","text":"<p>\u2705 Spin up MySQL container \u2705 Run pytest database tests</p>"},{"location":"phases/testcontainers/#how-to-fix-it_1","title":"\u2705 How to Fix It","text":"<p>\u2705 Use environment variables for credentials.</p>"},{"location":"phases/testcontainers/#test-snippet_1","title":"\u2705 Test Snippet","text":"<pre><code>from testcontainers.mysql import MySqlContainer\n\ndef test_mysql_container():\n    with MySqlContainer(\"mysql:8.0\") as mysql:\n        url = mysql.get_connection_url()\n        # Connect with SQLAlchemy or pymysql and run tests\n        assert \"mysql\" in url\n</code></pre>"},{"location":"phases/testcontainers/#best-practices_1","title":"\u2705 Best Practices","text":"<p>\u2705 Never hardcode passwords \u2705 Use transactions to isolate tests \u2705 Clean up containers after tests</p>"},{"location":"phases/testcontainers/#what-could-go-wrong_1","title":"\u2705 What Could Go Wrong?","text":"<ul> <li>Slow container startup times  </li> <li>Wrong ports exposed  </li> <li>Credential errors</li> </ul>"},{"location":"phases/testcontainers/#scenario-3-mariadb-testcontainer","title":"\ud83d\ude80 Scenario 3 \u2013 MariaDB TestContainer","text":""},{"location":"phases/testcontainers/#why-it-matters_2","title":"\u2705 Why It Matters","text":"<p>MariaDB is popular for cost-effective apps and easy MySQL migrations.</p> <p>Chaos Event: \"Code works on MySQL, fails on MariaDB!\"</p>"},{"location":"phases/testcontainers/#what-well-do_2","title":"\u2705 What We'll Do","text":"<p>\u2705 Launch MariaDB container \u2705 Run pytest integration tests</p>"},{"location":"phases/testcontainers/#how-to-fix-it_2","title":"\u2705 How to Fix It","text":"<p>\u2705 Test MariaDB-specific SQL syntax differences.</p>"},{"location":"phases/testcontainers/#test-snippet_2","title":"\u2705 Test Snippet","text":"<pre><code>from testcontainers.mariadb import MariaDbContainer\n\ndef test_mariadb_container():\n    with MariaDbContainer(\"mariadb:10.6\") as mariadb:\n        url = mariadb.get_connection_url()\n        assert \"mariadb\" in url\n</code></pre>"},{"location":"phases/testcontainers/#best-practices_2","title":"\u2705 Best Practices","text":"<p>\u2705 Test MySQL and MariaDB separately \u2705 Avoid vendor-specific SQL unless necessary \u2705 Watch out for default charset differences</p>"},{"location":"phases/testcontainers/#what-could-go-wrong_2","title":"\u2705 What Could Go Wrong?","text":"<ul> <li>SQL syntax differences between MySQL and MariaDB  </li> <li>Character set encoding issues  </li> <li>Performance differences in complex queries</li> </ul>"},{"location":"phases/testcontainers/#scenario-4-mongodb-testcontainer","title":"\ud83d\ude80 Scenario 4 \u2013 MongoDB TestContainer","text":""},{"location":"phases/testcontainers/#why-it-matters_3","title":"\u2705 Why It Matters","text":"<p>MongoDB is perfect for document-based data and modern web apps.</p> <p>Chaos Event: \"MongoDB connection fails because dev machine has different auth setup!\"</p>"},{"location":"phases/testcontainers/#what-well-do_3","title":"\u2705 What We'll Do","text":"<p>\u2705 Launch MongoDB container \u2705 Test document operations \u2705 Verify indexing and queries</p>"},{"location":"phases/testcontainers/#how-to-fix-it_3","title":"\u2705 How to Fix It","text":"<p>\u2705 Use containerized MongoDB for consistent testing.</p>"},{"location":"phases/testcontainers/#test-snippet_3","title":"\u2705 Test Snippet","text":"<pre><code>from testcontainers.mongodb import MongoDbContainer\n\ndef test_mongodb_container():\n    with MongoDbContainer(\"mongo:6.0\") as mongo:\n        client = mongo.get_connection_client()\n        db = client.test_db\n        collection = db.test_collection\n\n        # Insert and query documents\n        result = collection.insert_one({\"name\": \"test\"})\n        assert result.inserted_id is not None\n</code></pre>"},{"location":"phases/testcontainers/#best-practices_3","title":"\u2705 Best Practices","text":"<p>\u2705 Use transactions for data consistency \u2705 Clean up collections between tests \u2705 Test both read and write operations</p>"},{"location":"phases/testcontainers/#what-could-go-wrong_3","title":"\u2705 What Could Go Wrong?","text":"<ul> <li>Authentication issues  </li> <li>Network connectivity problems  </li> <li>Version compatibility issues</li> </ul>"},{"location":"phases/testcontainers/#scenario-5-redis-testcontainer","title":"\ud83d\ude80 Scenario 5 \u2013 Redis TestContainer","text":""},{"location":"phases/testcontainers/#why-it-matters_4","title":"\u2705 Why It Matters","text":"<p>Redis is essential for caching, sessions, and real-time data.</p> <p>Chaos Event: \"Redis connection fails in CI but works locally!\"</p>"},{"location":"phases/testcontainers/#what-well-do_4","title":"\u2705 What We'll Do","text":"<p>\u2705 Launch Redis container \u2705 Test caching operations \u2705 Verify pub/sub functionality</p>"},{"location":"phases/testcontainers/#how-to-fix-it_4","title":"\u2705 How to Fix It","text":"<p>\u2705 Use containerized Redis for consistent testing.</p>"},{"location":"phases/testcontainers/#test-snippet_4","title":"\u2705 Test Snippet","text":"<pre><code>from testcontainers.redis import RedisContainer\n\ndef test_redis_container():\n    with RedisContainer(\"redis:7-alpine\") as redis:\n        client = redis.get_client()\n\n        # Test basic operations\n        client.set(\"key\", \"value\")\n        assert client.get(\"key\") == b\"value\"\n</code></pre>"},{"location":"phases/testcontainers/#best-practices_4","title":"\u2705 Best Practices","text":"<p>\u2705 Flush database between tests \u2705 Test both string and hash operations \u2705 Verify connection pooling</p>"},{"location":"phases/testcontainers/#what-could-go-wrong_4","title":"\u2705 What Could Go Wrong?","text":"<ul> <li>Memory issues with large datasets  </li> <li>Connection pool exhaustion  </li> <li>Network timeouts</li> </ul>"},{"location":"phases/testcontainers/#running-your-tests","title":"\ud83c\udfaf Running Your Tests","text":""},{"location":"phases/testcontainers/#quick-start","title":"\u2705 Quick Start","text":"<pre><code># Install dependencies\npip install testcontainers pytest\n\n# Run all database tests\npytest testcontainers/ -v\n\n# Run specific database tests\npytest testcontainers/test_mysql_container.py -v\npytest testcontainers/test_postgres_container.py -v\n</code></pre>"},{"location":"phases/testcontainers/#expected-output","title":"\u2705 Expected Output","text":"<pre><code>testcontainers/test_mysql_container.py::test_mysql_version PASSED\ntestcontainers/test_mysql_container.py::test_mysql_insert_query PASSED\ntestcontainers/test_mysql_container.py::test_mysql_multiple_rows PASSED\ntestcontainers/test_mysql_container.py::test_mysql_primary_key PASSED\ntestcontainers/test_mysql_container.py::test_mysql_truncate PASSED\n</code></pre>"},{"location":"phases/testcontainers/#chaos-testing-scenarios","title":"\ud83e\uddea Chaos Testing Scenarios","text":""},{"location":"phases/testcontainers/#scenario-1-container-crashes","title":"\u2705 Scenario 1: Container Crashes","text":"<pre><code>def test_container_crash_recovery():\n    \"\"\"Test that our app handles container crashes gracefully\"\"\"\n    with PostgresContainer(\"postgres:15\") as postgres:\n        # Start container\n        conn = create_connection(postgres.get_connection_url())\n\n        # Simulate container crash\n        postgres.get_docker_client().stop(postgres.get_container_id())\n\n        # Verify our app handles the crash\n        with pytest.raises(ConnectionError):\n            conn.execute(\"SELECT 1\")\n</code></pre>"},{"location":"phases/testcontainers/#scenario-2-network-delays","title":"\u2705 Scenario 2: Network Delays","text":"<pre><code>def test_network_delay_handling():\n    \"\"\"Test that our app handles network delays\"\"\"\n    with RedisContainer(\"redis:7-alpine\") as redis:\n        # Simulate network delay\n        import time\n        start_time = time.time()\n\n        client = redis.get_client()\n        client.set(\"test\", \"value\")\n\n        # Verify operation completes within reasonable time\n        assert time.time() - start_time &lt; 5.0\n</code></pre>"},{"location":"phases/testcontainers/#scenario-3-resource-limits","title":"\u2705 Scenario 3: Resource Limits","text":"<pre><code>def test_memory_limit_handling():\n    \"\"\"Test that our app handles memory constraints\"\"\"\n    with MongoDbContainer(\"mongo:6.0\") as mongo:\n        # Set memory limit\n        mongo.with_memory_limit(\"100m\")\n\n        # Try to insert large dataset\n        client = mongo.get_connection_client()\n        db = client.test_db\n        collection = db.test_collection\n\n        # This should work or fail gracefully\n        try:\n            collection.insert_many([{\"data\": \"x\" * 1000} for _ in range(1000)])\n        except Exception as e:\n            # Handle memory constraint gracefully\n            assert \"memory\" in str(e).lower() or \"resource\" in str(e).lower()\n</code></pre>"},{"location":"phases/testcontainers/#monitoring-reporting","title":"\ud83d\udcca Monitoring &amp; Reporting","text":""},{"location":"phases/testcontainers/#html-reports","title":"\u2705 HTML Reports","text":"<pre><code># Generate HTML test reports\npytest testcontainers/ --html=reports/testcontainers-report.html --self-contained-html\n</code></pre>"},{"location":"phases/testcontainers/#coverage-reports","title":"\u2705 Coverage Reports","text":"<pre><code># Install coverage\npip install pytest-cov\n\n# Run with coverage\npytest testcontainers/ --cov=testcontainers --cov-report=html\n</code></pre>"},{"location":"phases/testcontainers/#next-steps","title":"\ud83c\udfaf Next Steps","text":"<p>\u2705 Phase 1 Complete: You now have bulletproof database tests! \u2705 Ready for Phase 2: Docker Mastery \u2705 Chaos Agent Status: Defeated in database testing! \ud83d\udd76\ufe0f</p> <p>Remember: TestContainers make your tests as reliable as production. When chaos strikes, your tests will be your first line of defense! \ud83d\udd25</p>"},{"location":"testcontainers/mariadb/","title":"MariaDB Container Testing","text":"<p>Why MariaDB?</p> <p>\u2705 MariaDB is a drop-in replacement for MySQL with open-source community support, making it perfect for containerized tests in CI/CD.</p>"},{"location":"testcontainers/mariadb/#test-cases-implemented","title":"\u2705 Test Cases Implemented","text":""},{"location":"testcontainers/mariadb/#test-case-1-check-mariadb-version","title":"\u2705 Test Case 1 \u2014 Check MariaDB Version","text":"<p>Verifies the container is running and accessible.</p> <pre><code>result = conn.execute(text(\"SELECT VERSION();\")).fetchone()\nassert \"MariaDB\" in result[0]\n</code></pre>"},{"location":"testcontainers/mariadb/#test-case-2-insert-and-query","title":"\u2705 Test Case 2 \u2014 Insert and Query","text":"<p>Tests simple INSERT and SELECT functionality.</p> <pre><code>conn.execute(text(\"INSERT INTO users (name) VALUES ('Alice');\"))\nresult = conn.execute(text(\"SELECT name FROM users;\")).fetchone()\nassert result[0] == \"Alice\"\n</code></pre>"},{"location":"testcontainers/mariadb/#test-case-3-insert-multiple-rows","title":"\u2705 Test Case 3 \u2014 Insert Multiple Rows","text":"<p>Inserts multiple rows and confirms row count.</p> <pre><code>conn.execute(text(\"INSERT INTO users (name) VALUES ('Bob'), ('Charlie');\"))\nresult = conn.execute(text(\"SELECT COUNT(*) FROM users;\")).fetchone()\nassert result[0] == 3\n</code></pre>"},{"location":"testcontainers/mariadb/#test-case-4-primary-key-constraint","title":"\u2705 Test Case 4 \u2014 Primary Key Constraint","text":"<p>Tests primary key uniqueness.</p> <pre><code>conn.execute(text(\"INSERT INTO users (id, name) VALUES (1, 'David');\"))\nwith pytest.raises(Exception):\n    conn.execute(text(\"INSERT INTO users (id, name) VALUES (1, 'Eve');\"))\n</code></pre>"},{"location":"testcontainers/mariadb/#test-case-5-truncate-table","title":"\u2705 Test Case 5 \u2014 Truncate Table","text":"<p>Clears data and verifies the table is empty.</p> <pre><code>conn.execute(text(\"TRUNCATE TABLE users;\"))\nresult = conn.execute(text(\"SELECT COUNT(*) FROM users;\")).fetchone()\nassert result[0] == 0\n</code></pre>"},{"location":"testcontainers/mariadb/#how-to-run-the-tests","title":"\u2705 How to Run the Tests","text":"<p>Run:</p> <pre><code>pytest -v testcontainers/test_mariadb_container.py\n</code></pre> <p>\u2705 Expected:</p> <pre><code>5 passed in X.XXs\n</code></pre>"},{"location":"testcontainers/mariadb/#useful-commands","title":"\u2705 Useful Commands","text":"<ul> <li>Check running containers:</li> </ul> <p><code>bash   docker ps</code></p> <ul> <li>Inspect logs for the MariaDB container:</li> </ul> <p><code>bash   docker logs &lt;container_id&gt;</code></p>"},{"location":"testcontainers/mariadb/#chaos-testing-scenarios","title":"\ud83e\uddea Chaos Testing Scenarios","text":""},{"location":"testcontainers/mariadb/#scenario-1-mysql-vs-mariadb-compatibility","title":"\u2705 Scenario 1: MySQL vs MariaDB Compatibility","text":"<pre><code>def test_mariadb_mysql_compatibility():\n    \"\"\"Test that our app works with both MySQL and MariaDB\"\"\"\n    with MariaDbContainer(\"mariadb:10.6\") as mariadb:\n        conn = create_connection(mariadb.get_connection_url())\n\n        # Test MariaDB-specific features\n        result = conn.execute(text(\"SELECT @@version_comment;\")).fetchone()\n        assert \"MariaDB\" in result[0]\n</code></pre>"},{"location":"testcontainers/mariadb/#scenario-2-character-set-issues","title":"\u2705 Scenario 2: Character Set Issues","text":"<pre><code>def test_mariadb_character_set():\n    \"\"\"Test that our app handles MariaDB character set differences\"\"\"\n    with MariaDbContainer(\"mariadb:10.6\") as mariadb:\n        conn = create_connection(mariadb.get_connection_url())\n\n        # Test UTF-8 support\n        conn.execute(text(\"INSERT INTO users (name) VALUES ('Jos\u00e9');\"))\n        result = conn.execute(text(\"SELECT name FROM users WHERE name = 'Jos\u00e9';\")).fetchone()\n        assert result[0] == \"Jos\u00e9\"\n</code></pre>"},{"location":"testcontainers/mariadb/#monitoring-reporting","title":"\ud83d\udcca Monitoring &amp; Reporting","text":""},{"location":"testcontainers/mariadb/#generate-html-report","title":"\u2705 Generate HTML Report","text":"<pre><code>pytest testcontainers/test_mariadb_container.py --html=reports/mariadb-test-report.html --self-contained-html\n</code></pre>"},{"location":"testcontainers/mariadb/#view-container-logs","title":"\u2705 View Container Logs","text":"<pre><code># Get container ID\ndocker ps | grep mariadb\n\n# View logs\ndocker logs &lt;container_id&gt;\n</code></pre> <p>Next: MySQL Testing | PostgreSQL Testing | MongoDB Testing | Redis Testing</p>"},{"location":"testcontainers/mongodb/","title":"MongoDB Container Testing","text":"<p>Why MongoDB?</p> <p>\u2705 Perfect for document-based data, flexible schema, and modern web applications. Great for chaos testing in CI/CD pipelines.</p>"},{"location":"testcontainers/mongodb/#test-cases-implemented","title":"\u2705 Test Cases Implemented","text":""},{"location":"testcontainers/mongodb/#test-case-1-check-mongodb-version","title":"\u2705 Test Case 1 \u2014 Check MongoDB Version","text":"<p>Verifies the container is running and accessible.</p> <pre><code>client = mongo.get_connection_client()\ndb = client.admin\nresult = db.command(\"serverStatus\")\nassert \"version\" in result\n</code></pre>"},{"location":"testcontainers/mongodb/#test-case-2-insert-and-query-document","title":"\u2705 Test Case 2 \u2014 Insert and Query Document","text":"<p>Tests basic document insertion and retrieval.</p> <pre><code>db = client.test_db\ncollection = db.users\nresult = collection.insert_one({\"name\": \"Alice\", \"age\": 30})\nassert result.inserted_id is not None\n\ndoc = collection.find_one({\"name\": \"Alice\"})\nassert doc[\"age\"] == 30\n</code></pre>"},{"location":"testcontainers/mongodb/#test-case-3-insert-multiple-documents","title":"\u2705 Test Case 3 \u2014 Insert Multiple Documents","text":"<p>Inserts multiple documents and confirms count.</p> <pre><code>collection = db.users\ndocs = [{\"name\": \"Bob\"}, {\"name\": \"Charlie\"}]\nresult = collection.insert_many(docs)\nassert len(result.inserted_ids) == 2\n\ncount = collection.count_documents({})\nassert count == 3\n</code></pre>"},{"location":"testcontainers/mongodb/#test-case-4-update-document","title":"\u2705 Test Case 4 \u2014 Update Document","text":"<p>Tests document update functionality.</p> <pre><code>collection = db.users\ncollection.update_one({\"name\": \"Alice\"}, {\"$set\": {\"age\": 31}})\ndoc = collection.find_one({\"name\": \"Alice\"})\nassert doc[\"age\"] == 31\n</code></pre>"},{"location":"testcontainers/mongodb/#test-case-5-delete-documents","title":"\u2705 Test Case 5 \u2014 Delete Documents","text":"<p>Removes documents and verifies deletion.</p> <pre><code>collection = db.users\ncollection.delete_many({})\ncount = collection.count_documents({})\nassert count == 0\n</code></pre>"},{"location":"testcontainers/mongodb/#how-to-run-the-tests","title":"\u2705 How to Run the Tests","text":"<p>Run:</p> <pre><code>pytest -v testcontainers/test_mongodb_container.py\n</code></pre> <p>\u2705 Expected:</p> <pre><code>5 passed in X.XXs\n</code></pre>"},{"location":"testcontainers/mongodb/#useful-commands","title":"\u2705 Useful Commands","text":"<ul> <li>Check running containers:</li> </ul> <p><code>bash   docker ps</code></p> <ul> <li>View MongoDB logs:</li> </ul> <p><code>bash   docker logs &lt;container_id&gt;</code></p>"},{"location":"testcontainers/mongodb/#chaos-testing-scenarios","title":"\ud83e\uddea Chaos Testing Scenarios","text":""},{"location":"testcontainers/mongodb/#scenario-1-connection-failures","title":"\u2705 Scenario 1: Connection Failures","text":"<pre><code>def test_mongodb_connection_failure():\n    \"\"\"Test that our app handles MongoDB connection failures gracefully\"\"\"\n    with MongoDbContainer(\"mongo:6.0\") as mongo:\n        # Simulate connection failure\n        mongo.get_docker_client().stop(mongo.get_container_id())\n\n        # Verify our app handles the failure\n        with pytest.raises(Exception):\n            mongo.get_connection_client()\n</code></pre>"},{"location":"testcontainers/mongodb/#scenario-2-large-document-handling","title":"\u2705 Scenario 2: Large Document Handling","text":"<pre><code>def test_mongodb_large_document():\n    \"\"\"Test that our app handles large documents in MongoDB\"\"\"\n    with MongoDbContainer(\"mongo:6.0\") as mongo:\n        client = mongo.get_connection_client()\n        db = client.test_db\n        collection = db.large_docs\n\n        # Create large document\n        large_doc = {\"data\": \"x\" * 10000, \"id\": 1}\n\n        # Insert and verify\n        result = collection.insert_one(large_doc)\n        assert result.inserted_id is not None\n\n        # Retrieve and verify\n        doc = collection.find_one({\"id\": 1})\n        assert len(doc[\"data\"]) == 10000\n</code></pre>"},{"location":"testcontainers/mongodb/#monitoring-reporting","title":"\ud83d\udcca Monitoring &amp; Reporting","text":""},{"location":"testcontainers/mongodb/#generate-html-report","title":"\u2705 Generate HTML Report","text":"<pre><code>pytest testcontainers/test_mongodb_container.py --html=reports/mongodb-test-report.html --self-contained-html\n</code></pre>"},{"location":"testcontainers/mongodb/#view-container-logs","title":"\u2705 View Container Logs","text":"<pre><code># Get container ID\ndocker ps | grep mongo\n\n# View logs\ndocker logs &lt;container_id&gt;\n</code></pre> <p>Next: MySQL Testing | PostgreSQL Testing | MariaDB Testing | Redis Testing</p>"},{"location":"testcontainers/mysql/","title":"MySQL Container Testing","text":"<p>Why MySQL?</p> <p>\u2705 Extremely popular in web apps, fast to spin up in containers, and a great candidate for chaos testing in CI/CD.</p>"},{"location":"testcontainers/mysql/#test-cases-implemented","title":"\u2705 Test Cases Implemented","text":""},{"location":"testcontainers/mysql/#test-case-1-check-mysql-version","title":"\u2705 Test Case 1 \u2014 Check MySQL Version","text":"<p>Runs a query to ensure MySQL is running and accessible.</p> <pre><code>result = conn.execute(text(\"SELECT VERSION();\")).fetchone()\nassert \"MySQL\" in result[0] or \"MariaDB\" in result[0]\n</code></pre>"},{"location":"testcontainers/mysql/#test-case-2-insert-and-query","title":"\u2705 Test Case 2 \u2014 Insert and Query","text":"<p>Inserts a single record and retrieves it.</p> <pre><code>conn.execute(text(\"INSERT INTO users (name) VALUES ('Alice');\"))\nresult = conn.execute(text(\"SELECT name FROM users;\")).fetchone()\nassert result[0] == \"Alice\"\n</code></pre>"},{"location":"testcontainers/mysql/#test-case-3-insert-multiple-rows","title":"\u2705 Test Case 3 \u2014 Insert Multiple Rows","text":"<p>Adds multiple rows and verifies the total count.</p> <pre><code>conn.execute(text(\"INSERT INTO users (name) VALUES ('Bob'), ('Charlie');\"))\nresult = conn.execute(text(\"SELECT COUNT(*) FROM users;\")).fetchone()\nassert result[0] == 3\n</code></pre>"},{"location":"testcontainers/mysql/#test-case-4-primary-key-constraint","title":"\u2705 Test Case 4 \u2014 Primary Key Constraint","text":"<p>Verifies the primary key prevents duplicate entries.</p> <pre><code>conn.execute(text(\"INSERT INTO users (id, name) VALUES (1, 'David');\"))\nwith pytest.raises(Exception):\n    conn.execute(text(\"INSERT INTO users (id, name) VALUES (1, 'Eve');\"))\n</code></pre>"},{"location":"testcontainers/mysql/#test-case-5-truncate-table","title":"\u2705 Test Case 5 \u2014 Truncate Table","text":"<p>Clears the table and confirms it's empty.</p> <pre><code>conn.execute(text(\"TRUNCATE TABLE users;\"))\nresult = conn.execute(text(\"SELECT COUNT(*) FROM users;\")).fetchone()\nassert result[0] == 0\n</code></pre>"},{"location":"testcontainers/mysql/#how-to-run-the-tests","title":"\u2705 How to Run the Tests","text":"<p>Run:</p> <pre><code>pytest -v testcontainers/test_mysql_container.py\n</code></pre> <p>\u2705 Expected:</p> <pre><code>5 passed in X.XXs\n</code></pre>"},{"location":"testcontainers/mysql/#useful-commands","title":"\u2705 Useful Commands","text":"<ul> <li>See running containers:</li> </ul> <p><code>bash   docker ps</code></p> <ul> <li>Check MySQL logs:</li> </ul> <p><code>bash   docker logs &lt;container_id&gt;</code></p>"},{"location":"testcontainers/mysql/#chaos-testing-scenarios","title":"\ud83e\uddea Chaos Testing Scenarios","text":""},{"location":"testcontainers/mysql/#scenario-1-connection-failures","title":"\u2705 Scenario 1: Connection Failures","text":"<pre><code>def test_mysql_connection_failure():\n    \"\"\"Test that our app handles MySQL connection failures gracefully\"\"\"\n    with MySqlContainer(\"mysql:8.0\") as mysql:\n        # Simulate connection failure\n        mysql.get_docker_client().stop(mysql.get_container_id())\n\n        # Verify our app handles the failure\n        with pytest.raises(ConnectionError):\n            create_connection(mysql.get_connection_url())\n</code></pre>"},{"location":"testcontainers/mysql/#scenario-2-slow-queries","title":"\u2705 Scenario 2: Slow Queries","text":"<pre><code>def test_mysql_slow_query_handling():\n    \"\"\"Test that our app handles slow MySQL queries\"\"\"\n    with MySqlContainer(\"mysql:8.0\") as mysql:\n        conn = create_connection(mysql.get_connection_url())\n\n        # Simulate slow query\n        import time\n        start_time = time.time()\n\n        # Execute a potentially slow query\n        conn.execute(text(\"SELECT SLEEP(2)\"))\n\n        # Verify it completes within reasonable time\n        assert time.time() - start_time &lt; 5.0\n</code></pre>"},{"location":"testcontainers/mysql/#monitoring-reporting","title":"\ud83d\udcca Monitoring &amp; Reporting","text":""},{"location":"testcontainers/mysql/#generate-html-report","title":"\u2705 Generate HTML Report","text":"<pre><code>pytest testcontainers/test_mysql_container.py --html=reports/mysql-test-report.html --self-contained-html\n</code></pre>"},{"location":"testcontainers/mysql/#view-container-logs","title":"\u2705 View Container Logs","text":"<pre><code># Get container ID\ndocker ps | grep mysql\n\n# View logs\ndocker logs &lt;container_id&gt;\n</code></pre> <p>Next: PostgreSQL Testing | MariaDB Testing | MongoDB Testing | Redis Testing</p>"},{"location":"testcontainers/postgres/","title":"PostgreSQL Container Testing","text":"<p>Why PostgreSQL?</p> <p>\u2705 It's robust, widely used in production, and perfect for chaos testing in CI/CD pipelines.</p>"},{"location":"testcontainers/postgres/#test-cases-implemented","title":"\u2705 Test Cases Implemented","text":""},{"location":"testcontainers/postgres/#test-case-1-check-postgresql-version","title":"\u2705 Test Case 1 \u2014 Check PostgreSQL Version","text":"<p>Runs a basic query to confirm the DB is alive.</p> <pre><code>result = conn.execute(text(\"SELECT version();\")).fetchone()\nassert \"PostgreSQL\" in result[0]\n</code></pre>"},{"location":"testcontainers/postgres/#test-case-2-insert-and-query","title":"\u2705 Test Case 2 \u2014 Insert and Query","text":"<p>Inserts a single record and verifies retrieval.</p> <pre><code>conn.execute(text(\"INSERT INTO users (name) VALUES ('Alice');\"))\nresult = conn.execute(text(\"SELECT name FROM users;\")).fetchone()\nassert result[0] == \"Alice\"\n</code></pre>"},{"location":"testcontainers/postgres/#test-case-3-insert-multiple-rows","title":"\u2705 Test Case 3 \u2014 Insert Multiple Rows","text":"<p>Inserts multiple records and checks row count.</p> <pre><code>conn.execute(text(\"INSERT INTO users (name) VALUES ('Bob'), ('Charlie');\"))\nresult = conn.execute(text(\"SELECT COUNT(*) FROM users;\")).fetchone()\nassert result[0] == 3\n</code></pre>"},{"location":"testcontainers/postgres/#test-case-4-primary-key-constraint","title":"\u2705 Test Case 4 \u2014 Primary Key Constraint","text":"<p>Verifies that primary key constraints work properly.</p> <pre><code>conn.execute(text(\"INSERT INTO users (id, name) VALUES (1, 'David');\"))\nwith pytest.raises(Exception):\n    conn.execute(text(\"INSERT INTO users (id, name) VALUES (1, 'Eve');\"))\n</code></pre>"},{"location":"testcontainers/postgres/#test-case-5-truncate-table","title":"\u2705 Test Case 5 \u2014 Truncate Table","text":"<p>Clears the table and ensures it's empty.</p> <pre><code>conn.execute(text(\"TRUNCATE users;\"))\nresult = conn.execute(text(\"SELECT COUNT(*) FROM users;\")).fetchone()\nassert result[0] == 0\n</code></pre>"},{"location":"testcontainers/postgres/#how-to-run-the-tests","title":"\u2705 How to Run the Tests","text":"<p>Run:</p> <pre><code>pytest -v testcontainers/test_postgres_container.py\n</code></pre> <p>\u2705 Expected:</p> <pre><code>5 passed in X.XXs\n</code></pre>"},{"location":"testcontainers/postgres/#useful-commands","title":"\u2705 Useful Commands","text":"<ul> <li>Check running containers:</li> </ul> <p><code>bash   docker ps</code></p> <ul> <li>View logs for the Postgres container:</li> </ul> <p><code>bash   docker logs &lt;container_id&gt;</code></p>"},{"location":"testcontainers/postgres/#chaos-testing-scenarios","title":"\ud83e\uddea Chaos Testing Scenarios","text":""},{"location":"testcontainers/postgres/#scenario-1-connection-failures","title":"\u2705 Scenario 1: Connection Failures","text":"<pre><code>def test_postgres_connection_failure():\n    \"\"\"Test that our app handles PostgreSQL connection failures gracefully\"\"\"\n    with PostgresContainer(\"postgres:15\") as postgres:\n        # Simulate connection failure\n        postgres.get_docker_client().stop(postgres.get_container_id())\n\n        # Verify our app handles the failure\n        with pytest.raises(ConnectionError):\n            create_connection(postgres.get_connection_url())\n</code></pre>"},{"location":"testcontainers/postgres/#scenario-2-transaction-rollbacks","title":"\u2705 Scenario 2: Transaction Rollbacks","text":"<pre><code>def test_postgres_transaction_rollback():\n    \"\"\"Test that our app handles PostgreSQL transaction rollbacks\"\"\"\n    with PostgresContainer(\"postgres:15\") as postgres:\n        conn = create_connection(postgres.get_connection_url())\n\n        # Start transaction\n        trans = conn.begin()\n\n        try:\n            conn.execute(text(\"INSERT INTO users (name) VALUES ('Test');\"))\n            # Simulate error\n            conn.execute(text(\"INSERT INTO users (id) VALUES (NULL);\"))\n            trans.commit()\n        except Exception:\n            trans.rollback()\n\n        # Verify rollback worked\n        result = conn.execute(text(\"SELECT COUNT(*) FROM users;\")).fetchone()\n        assert result[0] == 0\n</code></pre>"},{"location":"testcontainers/postgres/#monitoring-reporting","title":"\ud83d\udcca Monitoring &amp; Reporting","text":""},{"location":"testcontainers/postgres/#generate-html-report","title":"\u2705 Generate HTML Report","text":"<pre><code>pytest testcontainers/test_postgres_container.py --html=reports/postgres-test-report.html --self-contained-html\n</code></pre>"},{"location":"testcontainers/postgres/#view-container-logs","title":"\u2705 View Container Logs","text":"<pre><code># Get container ID\ndocker ps | grep postgres\n\n# View logs\ndocker logs &lt;container_id&gt;\n</code></pre> <p>Next: MySQL Testing | MariaDB Testing | MongoDB Testing | Redis Testing</p>"},{"location":"testcontainers/redis/","title":"Redis Container Testing","text":"<p>Why Redis?</p> <p>\u2705 Essential for caching, sessions, and real-time data. Perfect for chaos testing in CI/CD pipelines.</p>"},{"location":"testcontainers/redis/#test-cases-implemented","title":"\u2705 Test Cases Implemented","text":""},{"location":"testcontainers/redis/#test-case-1-check-redis-version","title":"\u2705 Test Case 1 \u2014 Check Redis Version","text":"<p>Verifies the container is running and accessible.</p> <pre><code>client = redis.get_client()\ninfo = client.info(\"server\")\nassert \"redis_version\" in info\n</code></pre>"},{"location":"testcontainers/redis/#test-case-2-set-and-get","title":"\u2705 Test Case 2 \u2014 Set and Get","text":"<p>Tests basic key-value operations.</p> <pre><code>client = redis.get_client()\nclient.set(\"name\", \"Alice\")\nvalue = client.get(\"name\")\nassert value == b\"Alice\"\n</code></pre>"},{"location":"testcontainers/redis/#test-case-3-multiple-operations","title":"\u2705 Test Case 3 \u2014 Multiple Operations","text":"<p>Tests multiple Redis operations.</p> <pre><code>client = redis.get_client()\nclient.set(\"counter\", 0)\nclient.incr(\"counter\")\nclient.incr(\"counter\")\nvalue = client.get(\"counter\")\nassert value == b\"2\"\n</code></pre>"},{"location":"testcontainers/redis/#test-case-4-hash-operations","title":"\u2705 Test Case 4 \u2014 Hash Operations","text":"<p>Tests Redis hash data structure.</p> <pre><code>client = redis.get_client()\nclient.hset(\"user:1\", \"name\", \"Bob\")\nclient.hset(\"user:1\", \"age\", \"25\")\nname = client.hget(\"user:1\", \"name\")\nage = client.hget(\"user:1\", \"age\")\nassert name == b\"Bob\"\nassert age == b\"25\"\n</code></pre>"},{"location":"testcontainers/redis/#test-case-5-clean-up","title":"\u2705 Test Case 5 \u2014 Clean Up","text":"<p>Removes all keys and verifies cleanup.</p> <pre><code>client = redis.get_client()\nclient.flushdb()\nkeys = client.keys(\"*\")\nassert len(keys) == 0\n</code></pre>"},{"location":"testcontainers/redis/#how-to-run-the-tests","title":"\u2705 How to Run the Tests","text":"<p>Run:</p> <pre><code>pytest -v testcontainers/test_redis_container.py\n</code></pre> <p>\u2705 Expected:</p> <pre><code>5 passed in X.XXs\n</code></pre>"},{"location":"testcontainers/redis/#useful-commands","title":"\u2705 Useful Commands","text":"<ul> <li>Check running containers:</li> </ul> <p><code>bash   docker ps</code></p> <ul> <li>View Redis logs:</li> </ul> <p><code>bash   docker logs &lt;container_id&gt;</code></p>"},{"location":"testcontainers/redis/#chaos-testing-scenarios","title":"\ud83e\uddea Chaos Testing Scenarios","text":""},{"location":"testcontainers/redis/#scenario-1-connection-failures","title":"\u2705 Scenario 1: Connection Failures","text":"<pre><code>def test_redis_connection_failure():\n    \"\"\"Test that our app handles Redis connection failures gracefully\"\"\"\n    with RedisContainer(\"redis:7-alpine\") as redis:\n        # Simulate connection failure\n        redis.get_docker_client().stop(redis.get_container_id())\n\n        # Verify our app handles the failure\n        with pytest.raises(Exception):\n            redis.get_client()\n</code></pre>"},{"location":"testcontainers/redis/#scenario-2-memory-pressure","title":"\u2705 Scenario 2: Memory Pressure","text":"<pre><code>def test_redis_memory_pressure():\n    \"\"\"Test that our app handles Redis memory constraints\"\"\"\n    with RedisContainer(\"redis:7-alpine\") as redis:\n        client = redis.get_client()\n\n        # Set memory limit\n        client.config_set(\"maxmemory\", \"10mb\")\n        client.config_set(\"maxmemory-policy\", \"allkeys-lru\")\n\n        # Try to insert large dataset\n        try:\n            for i in range(1000):\n                client.set(f\"key{i}\", \"x\" * 1000)\n        except Exception as e:\n            # Handle memory constraint gracefully\n            assert \"memory\" in str(e).lower() or \"OOM\" in str(e)\n</code></pre>"},{"location":"testcontainers/redis/#monitoring-reporting","title":"\ud83d\udcca Monitoring &amp; Reporting","text":""},{"location":"testcontainers/redis/#generate-html-report","title":"\u2705 Generate HTML Report","text":"<pre><code>pytest testcontainers/test_redis_container.py --html=reports/redis-test-report.html --self-contained-html\n</code></pre>"},{"location":"testcontainers/redis/#view-container-logs","title":"\u2705 View Container Logs","text":"<pre><code># Get container ID\ndocker ps | grep redis\n\n# View logs\ndocker logs &lt;container_id&gt;\n</code></pre> <p>Next: MySQL Testing | PostgreSQL Testing | MariaDB Testing | MongoDB Testing</p> <p>```</p>"}]}