AWSTemplateFormatVersion: '2010-09-09'
Description: >
  CloudFormation template to provision a production-ready, affordable EKS cluster
  with networking, IAM roles, and outputs required for further automation.

Parameters:
  ClusterName:
    Type: String
    Default: demo-eks-cluster
    Description: The name of the EKS Cluster

  ClusterVersion:
    Type: String
    Default: "1.29"
    Description: EKS Kubernetes version

  NodeInstanceType:
    Type: String
    Default: t3.small
    AllowedValues:
      - t3.small
      - t3.medium
    Description: EC2 instance type for worker nodes

  NodeDesiredCapacity:
    Type: Number
    Default: 3
    Description: Desired number of nodes in worker group

  NodeMaxSize:
    Type: Number
    Default: 3
    Description: Maximum number of nodes in worker group

  NodeMinSize:
    Type: Number
    Default: 3
    Description: Minimum number of nodes in worker group

  VpcCidr:
    Type: String
    Default: 10.0.0.0/16
    Description: CIDR block for VPC

Resources:

  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-vpc"

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-public-subnet-1"

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-public-subnet-2"

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # Security group for nodes
  NodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for EKS worker nodes
      VpcId: !Ref VPC

  # IAM Role for EKS Cluster
  EKSClusterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy

  # EKS Cluster
  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref ClusterName
      Version: !Ref ClusterVersion
      RoleArn: !GetAtt EKSClusterRole.Arn
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref NodeSecurityGroup
        SubnetIds:
          - !Ref PublicSubnet1
          - !Ref PublicSubnet2
        EndpointPublicAccess: true

  # NodeGroup Role
  NodeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy

  # NodeGroup
  NodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref ClusterName
      NodeRole: !GetAtt NodeInstanceRole.Arn
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      ScalingConfig:
        DesiredSize: !Ref NodeDesiredCapacity
        MinSize: !Ref NodeMinSize
        MaxSize: !Ref NodeMaxSize
      AmiType: AL2_x86_64
      InstanceTypes:
        - !Ref NodeInstanceType

Outputs:
  ClusterName:
    Description: EKS Cluster Name
    Value: !Ref ClusterName

  ClusterArn:
    Description: ARN of the EKS Cluster
    Value: !GetAtt EKSCluster.Arn

  ClusterEndpoint:
    Description: API Server Endpoint
    Value: !GetAtt EKSCluster.Endpoint

  OIDCIssuer:
    Description: OIDC Issuer URL for the Cluster
    Value: !GetAtt EKSCluster.Identity.Oidc.Issuer

  NodeGroupName:
    Description: Node Group Name
    Value: !Ref NodeGroup

  VpcId:
    Description: VPC ID
    Value: !Ref VPC

  PublicSubnet1:
    Description: Public Subnet 1
    Value: !Ref PublicSubnet1

  PublicSubnet2:
    Description: Public Subnet 2
    Value: !Ref PublicSubnet2

  NodeSecurityGroupId:
    Description: Security Group for worker nodes
    Value: !Ref NodeSecurityGroup

  EKSClusterRoleArn:
    Description: IAM Role ARN for the EKS Cluster
    Value: !GetAtt EKSClusterRole.Arn

  NodeInstanceRoleArn:
    Description: IAM Role ARN for worker nodes
    Value: !GetAtt NodeInstanceRole.Arn
