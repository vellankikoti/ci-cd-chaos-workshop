AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Enterprise-grade CloudFormation template to provision an affordable EKS cluster (v1.30+)
  with full networking (public & private subnets, IGW, NAT gateways), IAM roles,
  managed node group, control-plane logging, and built-in EKS addons.

Parameters:
  ClusterName:
    Type: String
    Default: demo-eks-cluster
    Description: Name of the EKS cluster
  ClusterVersion:
    Type: String
    Default: "1.30"
    Description: Kubernetes version for the EKS control plane
  NodeInstanceType:
    Type: String
    Default: t3.small
    AllowedValues:
      - t3.small
      - t3.medium
    Description: EC2 instance type for worker nodes
  NodeDesiredCapacity:
    Type: Number
    Default: 3
    Description: Desired number of nodes in the managed node group
  NodeMinSize:
    Type: Number
    Default: 3
    Description: Minimum number of nodes in the managed node group
  NodeMaxSize:
    Type: Number
    Default: 3
    Description: Maximum number of nodes in the managed node group
  VpcCidr:
    Type: String
    Default: 10.0.0.0/16
    Description: CIDR block for the VPC

Resources:

  ### VPC and Networking ####
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-vpc"

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Public Subnets (2 AZs)
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-public-1"

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-public-2"

  # Private Subnets (2 AZs)
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.101.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-private-1"

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.102.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-private-2"

  # Public Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicDefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # NAT Gateways for private subnets
  NatEIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEIP1.AllocationId
      SubnetId: !Ref PublicSubnet1

  NatEIP2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEIP2.AllocationId
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateSubnet1RouteAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  ### Security Group for Worker Nodes ###
  NodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EKS worker node security group
      VpcId: !Ref VPC

  ### IAM Roles ###
  EKSClusterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: eks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy

  NodeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy

  ### EKS Cluster ###
  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref ClusterName
      Version: !Ref ClusterVersion
      RoleArn: !GetAtt EKSClusterRole.Arn
      ResourcesVpcConfig:
        SubnetIds:
          - !Ref PublicSubnet1
          - !Ref PublicSubnet2
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds:
          - !Ref NodeSecurityGroup
        EndpointPublicAccess: true
        EndpointPrivateAccess: false
      Logging:
        ClusterLogging:
          EnabledTypes:
            - Type: api
            - Type: audit
            - Type: authenticator
            - Type: controllerManager
            - Type: scheduler

  ### Managed Node Group ###
  NodeGroup:
    Type: AWS::EKS::Nodegroup
    DependsOn: EKSCluster
    Properties:
      ClusterName: !Ref ClusterName
      NodeRole: !GetAtt NodeInstanceRole.Arn
      Subnets:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      ScalingConfig:
        DesiredSize: !Ref NodeDesiredCapacity
        MinSize: !Ref NodeMinSize
        MaxSize: !Ref NodeMaxSize
      AmiType: AL2_x86_64
      InstanceTypes:
        - !Ref NodeInstanceType

  ### Built-in EKS Addons ###
  VpcCniAddon:
    Type: AWS::EKS::Addon
    DependsOn: NodeGroup
    Properties:
      ClusterName: !Ref ClusterName
      AddonName: vpc-cni
      AddonVersion: auto
      ResolveConflicts: OVERWRITE

  CoreDnsAddon:
    Type: AWS::EKS::Addon
    DependsOn: NodeGroup
    Properties:
      ClusterName: !Ref ClusterName
      AddonName: coredns
      AddonVersion: auto
      ResolveConflicts: OVERWRITE

  KubeProxyAddon:
    Type: AWS::EKS::Addon
    DependsOn: NodeGroup
    Properties:
      ClusterName: !Ref ClusterName
      AddonName: kube-proxy
      AddonVersion: auto
      ResolveConflicts: OVERWRITE

  EbsCsiDriverAddon:
    Type: AWS::EKS::Addon
    DependsOn: NodeGroup
    Properties:
      ClusterName: !Ref ClusterName
      AddonName: aws-ebs-csi-driver
      AddonVersion: auto
      ResolveConflicts: OVERWRITE

Outputs:
  ClusterName:
    Description: EKS Cluster Name
    Value: !Ref ClusterName

  ClusterArn:
    Description: EKS Cluster ARN
    Value: !GetAtt EKSCluster.Arn

  ClusterEndpoint:
    Description: API server endpoint
    Value: !GetAtt EKSCluster.Endpoint

  OidcIssuer:
    Description: OIDC issuer URL
    Value: !GetAtt EKSCluster.Identity.Oidc.Issuer

  VpcId:
    Description: VPC ID
    Value: !Ref VPC

  PublicSubnetIds:
    Description: Public subnet IDs
    Value: !Join [",", [!Ref PublicSubnet1, !Ref PublicSubnet2]]

  PrivateSubnetIds:
    Description: Private subnet IDs
    Value: !Join [",", [!Ref PrivateSubnet1, !Ref PrivateSubnet2]]

  NodeSecurityGroupId:
    Description: Security group ID for worker nodes
    Value: !Ref NodeSecurityGroup

  NodeGroupName:
    Description: Managed node group name
    Value: !Ref NodeGroup

  EKSClusterRoleArn:
    Description: IAM role ARN for EKS cluster
    Value: !GetAtt EKSClusterRole.Arn

  NodeInstanceRoleArn:
    Description: IAM role ARN for worker nodes
    Value: !GetAtt NodeInstanceRole.Arn
