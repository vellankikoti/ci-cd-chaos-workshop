pipeline {
    agent any
    
    environment {
        // Application configuration
        APP_NAME = 'docker-build-demo'
        APP_VERSION = "${BUILD_NUMBER}"
        DOCKER_IMAGE = "jenkins-workshop/${APP_NAME}"
        DOCKER_TAG = "${DOCKER_IMAGE}:${BUILD_NUMBER}"
        DOCKER_LATEST = "${DOCKER_IMAGE}:latest"
        
        // Build configuration
        BUILD_TIME = "${new Date().format('yyyy-MM-dd\'T\'HH:mm:ss\'Z\'')}"
        ENVIRONMENT = "${params.ENVIRONMENT ?: 'development'}"
        
        // Test configuration
        PYTHON_VERSION = '3.11'
        TEST_REPORT_DIR = 'test-reports'
        COVERAGE_REPORT_DIR = 'coverage-reports'
    }
    
    parameters {
        choice(
            name: 'ENVIRONMENT',
            choices: ['development', 'staging', 'production'],
            description: 'Target environment'
        )
        booleanParam(
            name: 'RUN_TESTS',
            defaultValue: true,
            description: 'Run automated tests'
        )
        booleanParam(
            name: 'PUSH_TO_REGISTRY',
            defaultValue: false,
            description: 'Push image to registry'
        )
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo "üîç Checking out code for ${APP_NAME}"
                script {
                    // Checkout the current workspace
                    checkout scm
                    
                    // Navigate to the correct directory
                    sh '''
                        echo "Repository: $(git remote get-url origin 2>/dev/null || echo 'Local workspace')"
                        echo "Branch: $(git branch --show-current 2>/dev/null || echo 'Unknown')"
                        echo "Commit: $(git rev-parse HEAD 2>/dev/null || echo 'Unknown')"
                        echo "Working directory: $(pwd)"
                        echo "Contents:"
                        ls -la
                        
                        # Navigate to the scenario directory
                        echo "Navigating to Jenkins/scenarios/01-docker-build/"
                        cd Jenkins/scenarios/01-docker-build/
                        echo "New working directory: $(pwd)"
                        echo "Contents of scenario directory:"
                        ls -la
                    '''
                }
            }
        }
        
        stage('Validate') {
            steps {
                echo "üîç Validating application structure"
                script {
                    // Navigate to scenario directory
                    sh '''
                        cd Jenkins/scenarios/01-docker-build/
                        echo "Validating from directory: $(pwd)"
                    '''
                    
                    // Check if required files exist
                    def requiredFiles = ['Jenkins/scenarios/01-docker-build/app.py', 'Jenkins/scenarios/01-docker-build/requirements.txt', 'Jenkins/scenarios/01-docker-build/Dockerfile', 'Jenkins/scenarios/01-docker-build/tests/test_app.py']
                    for (file in requiredFiles) {
                        if (!fileExists(file)) {
                            error "Required file missing: ${file}"
                        }
                        echo "‚úÖ Found: ${file}"
                    }
                    
                    // Validate Python syntax
                    sh '''
                        cd Jenkins/scenarios/01-docker-build/
                        echo "Validating Python syntax..."
                        python3 -m py_compile app.py
                        python3 -m py_compile tests/test_app.py
                        echo "‚úÖ Python syntax validation passed"
                    '''
                }
            }
        }
        
        stage('Install Dependencies') {
            steps {
                echo "üì¶ Installing Python dependencies"
                script {
                    sh '''
                        cd Jenkins/scenarios/01-docker-build/
                        echo "Installing dependencies from directory: $(pwd)"
                        pip3 install -r requirements.txt
                        echo "‚úÖ Dependencies installed successfully"
                        
                        echo "Installed packages:"
                        pip3 list
                    '''
                }
            }
        }
        
        stage('Test') {
            when {
                expression { params.RUN_TESTS == true }
            }
            steps {
                echo "üß™ Running automated tests"
                script {
                    sh '''
                        cd Jenkins/scenarios/01-docker-build/
                        echo "Running tests from directory: $(pwd)"
                        mkdir -p ${TEST_REPORT_DIR} ${COVERAGE_REPORT_DIR}
                        
                        # Run tests with coverage and HTML report
                        python3 -m pytest tests/ \
                            --verbose \
                            --html=${TEST_REPORT_DIR}/report.html \
                            --self-contained-html \
                            --cov=app \
                            --cov-report=html:${COVERAGE_REPORT_DIR} \
                            --cov-report=xml:${COVERAGE_REPORT_DIR}/coverage.xml \
                            --junitxml=${TEST_REPORT_DIR}/junit.xml
                        
                        echo "‚úÖ Tests completed successfully"
                    '''
                }
            }
            post {
                always {
                    // Publish test results from the correct directory
                    junit 'Jenkins/scenarios/01-docker-build/test-reports/junit.xml'
                    publishHTML([
                        allowMissing: false,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: 'Jenkins/scenarios/01-docker-build/test-reports',
                        reportFiles: 'report.html',
                        reportName: 'Test Report'
                    ])
                    publishHTML([
                        allowMissing: false,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: 'Jenkins/scenarios/01-docker-build/coverage-reports',
                        reportFiles: 'index.html',
                        reportName: 'Coverage Report'
                    ])
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                echo "üê≥ Building Docker image"
                script {
                    sh '''
                        cd Jenkins/scenarios/01-docker-build/
                        echo "Building Docker image from directory: $(pwd)"
                        echo "Building Docker image: ${DOCKER_TAG}"
                        echo "Build arguments:"
                        echo "  APP_VERSION: ${APP_VERSION}"
                        echo "  BUILD_TIME: ${BUILD_TIME}"
                        echo "  ENVIRONMENT: ${ENVIRONMENT}"
                        
                        # Check if Docker is available
                        if command -v docker >/dev/null 2>&1; then
                            echo "Docker is available, building image..."
                            # Build the Docker image with build arguments
                            docker build \
                                --build-arg APP_VERSION=${APP_VERSION} \
                                --build-arg BUILD_TIME="${BUILD_TIME}" \
                                --build-arg ENVIRONMENT=${ENVIRONMENT} \
                                -t ${DOCKER_TAG} \
                                -t ${DOCKER_LATEST} \
                                .
                            
                            echo "‚úÖ Docker image built successfully"
                            
                            # Show image information
                            echo "Image details:"
                            docker images ${DOCKER_IMAGE}
                            
                            # Show image layers
                            echo "Image layers:"
                            docker history ${DOCKER_TAG}
                        else
                            echo "‚ö†Ô∏è Docker not available, skipping Docker build"
                            echo "This is expected in a workshop environment"
                            echo "‚úÖ Docker build stage completed (skipped)"
                        fi
                    '''
                }
            }
        }
        
        stage('Validate Docker Image') {
            steps {
                echo "üß™ Validating Docker image"
                script {
                    sh '''
                        cd Jenkins/scenarios/01-docker-build/
                        echo "Validating Docker image: ${DOCKER_TAG}"

                        # Check if Docker is available
                        if command -v docker >/dev/null 2>&1; then
                            echo "Docker is available, validating image..."

                            # Validate image exists
                            if docker images ${DOCKER_IMAGE} --format "{{.Repository}}:{{.Tag}}" | grep -q "${DOCKER_TAG}"; then
                                echo "‚úÖ Docker image exists: ${DOCKER_TAG}"
                            else
                                echo "‚ùå Docker image not found"
                                exit 1
                            fi

                            # Check image layers and size
                            echo "Image information:"
                            docker images ${DOCKER_IMAGE} --format "table {{.Repository}}\\t{{.Tag}}\\t{{.Size}}\\t{{.CreatedAt}}"

                            # Test that container can start (quick test)
                            echo "Testing container startup..."
                            CONTAINER_ID=$(docker run -d ${DOCKER_TAG})

                            if [ -n "${CONTAINER_ID}" ]; then
                                echo "‚úÖ Container started successfully: ${CONTAINER_ID}"

                                # Wait a moment and check if it's still running
                                sleep 3
                                if docker ps --filter "id=${CONTAINER_ID}" --format "{{.ID}}" | grep -q "${CONTAINER_ID}"; then
                                    echo "‚úÖ Container is running successfully"

                                    # Show what's running inside
                                    echo "Container processes:"
                                    docker exec ${CONTAINER_ID} ps aux || echo "Process list not available"

                                    # Show application logs
                                    echo "Application startup logs:"
                                    docker logs ${CONTAINER_ID}
                                else
                                    echo "‚ö†Ô∏è Container exited after startup"
                                    echo "Container logs:"
                                    docker logs ${CONTAINER_ID}
                                fi

                                # Cleanup
                                docker stop ${CONTAINER_ID} >/dev/null 2>&1 || true
                                docker rm ${CONTAINER_ID} >/dev/null 2>&1 || true
                            else
                                echo "‚ùå Failed to start container"
                                exit 1
                            fi

                            echo "‚úÖ Docker image validation completed successfully"
                        else
                            echo "‚ö†Ô∏è Docker not available, skipping image validation"
                            echo "‚úÖ Docker image validation completed (skipped)"
                        fi
                    '''
                }
            }
        }
        
        stage('Security Scan') {
            steps {
                echo "üîí Running security scan"
                script {
                    sh '''
                        cd Jenkins/scenarios/01-docker-build/
                        echo "Running security scan on Docker image: ${DOCKER_TAG}"

                        # Check if Docker is available
                        if command -v docker >/dev/null 2>&1; then
                            echo "Docker is available, running security scan..."

                            # Check image size
                            echo "Image size analysis:"
                            docker images ${DOCKER_IMAGE} --format "table {{.Repository}}\\t{{.Tag}}\\t{{.Size}}"

                            # Basic security check - show image info
                            echo "Image information:"
                            docker inspect ${DOCKER_TAG} --format='{{.Config.User}}' | grep -q "appuser" && echo "‚úÖ Non-root user: appuser" || echo "‚ö†Ô∏è Root user detected"

                        else
                            echo "‚ö†Ô∏è Docker not available, skipping security scan"
                        fi

                        echo "‚úÖ Security scan completed"
                    '''
                }
            }
        }
        
        stage('Generate Deployment Files') {
            steps {
                echo "üöÄ Generating deployment configurations"
                script {
                    sh '''
                        cd Jenkins/scenarios/01-docker-build/
                        echo "Generating deployment files for ${ENVIRONMENT} environment..."

                        # Create deployment directory
                        mkdir -p deployments/${ENVIRONMENT}

                        # Generate Docker run command for HOST machine
                        cat > deployments/${ENVIRONMENT}/run-on-host.sh << EOF
#!/bin/bash
# Run this script on your HOST machine (not inside Jenkins)
echo "üöÄ Starting ${APP_NAME} in ${ENVIRONMENT} mode on HOST..."

# Stop any existing container
docker stop ${APP_NAME}-${ENVIRONMENT} 2>/dev/null || true
docker rm ${APP_NAME}-${ENVIRONMENT} 2>/dev/null || true

# Run the container on host
docker run -d \\
  --name ${APP_NAME}-${ENVIRONMENT} \\
  -p 5000:5000 \\
  -e ENVIRONMENT=${ENVIRONMENT} \\
  -e APP_VERSION=${APP_VERSION} \\
  ${DOCKER_TAG}

echo "‚úÖ Container started on HOST!"
echo "üåê Access the application at: http://localhost:5000"
echo "‚ù§Ô∏è Health check: http://localhost:5000/health"
echo "üìä API info: http://localhost:5000/api/info"
echo ""
echo "To stop the container, run:"
echo "docker stop ${APP_NAME}-${ENVIRONMENT}"
EOF

                        chmod +x deployments/${ENVIRONMENT}/run-on-host.sh

                        # Generate docker-compose.yml
                        cat > deployments/${ENVIRONMENT}/docker-compose.yml << EOF
version: '3.8'
services:
  ${APP_NAME}:
    image: ${DOCKER_TAG}
    container_name: ${APP_NAME}-${ENVIRONMENT}
    ports:
      - "5000:5000"
    environment:
      - ENVIRONMENT=${ENVIRONMENT}
      - APP_VERSION=${APP_VERSION}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
EOF

                        # Generate simple README
                        echo "# ${APP_NAME} - ${ENVIRONMENT} Deployment" > deployments/${ENVIRONMENT}/README.md
                        echo "" >> deployments/${ENVIRONMENT}/README.md
                        echo "## Quick Start" >> deployments/${ENVIRONMENT}/README.md
                        echo "1. Copy files to your host machine" >> deployments/${ENVIRONMENT}/README.md
                        echo "2. Run: ./run-on-host.sh" >> deployments/${ENVIRONMENT}/README.md
                        echo "3. Open: http://localhost:5000" >> deployments/${ENVIRONMENT}/README.md
                        echo "" >> deployments/${ENVIRONMENT}/README.md
                        echo "## Built Image: ${DOCKER_TAG}" >> deployments/${ENVIRONMENT}/README.md
                        echo "## Version: ${APP_VERSION}" >> deployments/${ENVIRONMENT}/README.md
                        echo "## Environment: ${ENVIRONMENT}" >> deployments/${ENVIRONMENT}/README.md

                        echo "‚úÖ Deployment files generated"
                        echo "Generated files:"
                        ls -la deployments/${ENVIRONMENT}/

                        echo ""
                        echo "üéØ TO TEST THE APPLICATION ON YOUR HOST MACHINE:"
                        echo "1. Exit this Jenkins container and run on your host:"
                        echo "   docker run -d --name ${APP_NAME}-test -p 5000:5000 ${DOCKER_TAG}"
                        echo "2. Then open http://localhost:5000 in your browser"
                        echo "3. To stop: docker stop ${APP_NAME}-test && docker rm ${APP_NAME}-test"
                        echo ""
                        echo "üìù Or copy the deployment files to your host and run:"
                        echo "   docker cp jenkins-workshop:/workspace/Jenkins/scenarios/01-docker-build/deployments/ ."
                    '''
                }
            }
        }
        
        stage('Push to Registry') {
            when {
                expression { params.PUSH_TO_REGISTRY == true }
            }
            steps {
                echo "üì§ Pushing image to registry"
                script {
                    sh '''
                        cd Jenkins/scenarios/01-docker-build/
                        echo "Pushing image from directory: $(pwd)"
                        echo "Pushing image to registry..."
                        # Note: In a real scenario, you would push to a registry like Docker Hub, ECR, etc.
                        echo "Registry push would happen here"
                        echo "Image: ${DOCKER_TAG}"
                        echo "Latest: ${DOCKER_LATEST}"
                        echo "‚úÖ Image ready for registry push"
                    '''
                }
            }
        }
    }
    
    post {
        always {
            echo "üßπ Cleaning up workspace"
            script {
                sh '''
                    cd Jenkins/scenarios/01-docker-build/
                    echo "Cleaning up from directory: $(pwd)"
                    
                    # Check if Docker is available
                    if command -v docker >/dev/null 2>&1; then
                        echo "Cleaning up Docker images..."
                        # Remove dangling images
                        docker image prune -f || true
                    else
                        echo "‚ö†Ô∏è Docker not available, skipping Docker cleanup"
                    fi
                    
                    echo "Workspace cleanup completed"
                '''
            }
        }
        
        success {
            echo "‚úÖ Pipeline completed successfully!"
            script {
                sh '''
                    cd Jenkins/scenarios/01-docker-build/
                    echo "üéâ Build Summary:"
                    echo "  Application: ${APP_NAME}"
                    echo "  Version: ${APP_VERSION}"
                    echo "  Environment: ${ENVIRONMENT}"
                    echo "  Docker Image: ${DOCKER_TAG}"
                    echo "  Build Time: ${BUILD_TIME}"
                '''
            }
        }
        
        failure {
            echo "‚ùå Pipeline failed!"
            script {
                sh '''
                    cd Jenkins/scenarios/01-docker-build/
                    echo "üîç Debug Information:"
                    echo "  Last 50 lines of build log:"
                    tail -50 /var/log/jenkins/jenkins.log 2>/dev/null || echo "Log not available"
                '''
            }
        }
        
        unstable {
            echo "‚ö†Ô∏è Pipeline completed with warnings"
        }
    }
}