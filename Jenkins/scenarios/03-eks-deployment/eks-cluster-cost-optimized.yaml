AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Cost-optimized EKS cluster template for workshop demonstrations.
  Creates a 3-node EKS cluster with minimal resources for cost efficiency.

Parameters:
  ClusterName:
    Type: String
    Default: eks-demo-cluster
    Description: Name of the EKS cluster
  ClusterVersion:
    Type: String
    Default: "1.30"
    Description: Kubernetes control-plane version (>=1.30)
  NodeInstanceType:
    Type: String
    Default: t3.small
    AllowedValues:
      - t3.small
      - t3.medium
      - t3.large
    Description: EC2 instance type for worker nodes (t3.small for cost optimization)
  NodeDesiredCapacity:
    Type: Number
    Default: 3
    MinValue: 1
    MaxValue: 10
    Description: Desired number of worker nodes
  NodeMinSize:
    Type: Number
    Default: 1
    MinValue: 1
    MaxValue: 10
    Description: Minimum number of worker nodes
  NodeMaxSize:
    Type: Number
    Default: 5
    MinValue: 1
    MaxValue: 10
    Description: Maximum number of worker nodes
  VpcCidr:
    Type: String
    Default: 10.0.0.0/16
    Description: CIDR block for the new VPC
  EnableLogging:
    Type: String
    Default: "true"
    AllowedValues: ["true", "false"]
    Description: Enable EKS control plane logging
  EnableALBController:
    Type: String
    Default: "true"
    AllowedValues: ["true", "false"]
    Description: Install AWS Load Balancer Controller

Conditions:
  EnableLogging: !Equals [!Ref EnableLogging, "true"]
  EnableALBController: !Equals [!Ref EnableALBController, "true"]

Resources:

  # 1. VPC & Internet Gateway
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-vpc"
        - Key: Purpose
          Value: "Workshop EKS Cluster"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-igw"

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # 2. Public & Private Subnets (2 AZs for cost optimization)
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-public-1"
        - Key: kubernetes.io/role/elb
          Value: "1"

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-public-2"
        - Key: kubernetes.io/role/elb
          Value: "1"

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.101.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-private-1"
        - Key: kubernetes.io/role/internal-elb
          Value: "1"

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.102.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-private-2"
        - Key: kubernetes.io/role/internal-elb
          Value: "1"

  # 3. Public Route Table & Route
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-public-rt"

  PublicDefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # 4. NAT Gateway (single NAT for cost optimization)
  NatEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-nat-eip"

  NatGateway:
    Type: AWS::EC2::NatGateway
    DependsOn: PublicSubnet1RouteAssoc
    Properties:
      SubnetId: !Ref PublicSubnet1
      AllocationId: !GetAtt NatEIP.AllocationId
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-natgw"

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-private-rt"

  PrivateDefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: NatGateway
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NatGateway

  PrivateSubnet1RouteAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  # 5. Security Groups
  ClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EKS cluster security group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS from anywhere
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: HTTP from anywhere
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-cluster-sg"

  NodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EKS worker node security group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          SourceSecurityGroupId: !Ref ClusterSecurityGroup
          Description: All traffic from cluster
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
          Description: SSH from anywhere
        - IpProtocol: tcp
          FromPort: 1025
          ToPort: 65535
          SourceSecurityGroupId: !Ref NodeSecurityGroup
          Description: Node to node communication
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-node-sg"

  # 6. IAM Roles
  EKSClusterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: eks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-cluster-role"

  NodeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-node-role"

  # 7. EKS Cluster
  EKSCluster:
    Type: AWS::EKS::Cluster
    DeletionPolicy: Delete
    DependsOn:
      - VPCGatewayAttachment
      - PublicDefaultRoute
      - PrivateDefaultRoute
      - PublicSubnet1RouteAssoc
      - PublicSubnet2RouteAssoc
      - PrivateSubnet1RouteAssoc
      - PrivateSubnet2RouteAssoc
    Properties:
      Name: !Ref ClusterName
      Version: !Ref ClusterVersion
      RoleArn: !GetAtt EKSClusterRole.Arn
      ResourcesVpcConfig:
        SubnetIds:
          - !Ref PublicSubnet1
          - !Ref PublicSubnet2
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds:
          - !Ref ClusterSecurityGroup
        EndpointPublicAccess: true
        EndpointPrivateAccess: false
        PublicAccessCidrs:
          - 0.0.0.0/0
      Logging:
        ClusterLogging:
          EnabledTypes: !If
            - EnableLogging
            - - Type: api
              - Type: audit
              - Type: authenticator
              - Type: controllerManager
              - Type: scheduler
            - []
      Tags:
        - Key: Name
          Value: !Ref ClusterName
        - Key: Purpose
          Value: "Workshop EKS Cluster"

  # 8. OIDC Provider for IRSA
  EKSOidcProvider:
    Type: AWS::IAM::OIDCProvider
    DependsOn: EKSCluster
    Properties:
      Url: !GetAtt EKSCluster.OpenIdConnectIssuerUrl
      ClientIdList:
        - sts.amazonaws.com
      ThumbprintList:
        - '9e99a48a9960b14926bb7f3b02e22da0afd77772'
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-oidc-provider"

  # 9. Managed Node Group
  NodeGroup:
    Type: AWS::EKS::Nodegroup
    DependsOn:
      - EKSCluster
      - EKSOidcProvider
    Properties:
      ClusterName: !Ref EKSCluster
      NodeRole: !GetAtt NodeInstanceRole.Arn
      Subnets:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      ScalingConfig:
        DesiredSize: !Ref NodeDesiredCapacity
        MinSize: !Ref NodeMinSize
        MaxSize: !Ref NodeMaxSize
      AmiType: AL2_x86_64
      InstanceTypes:
        - !Ref NodeInstanceType
      UpdateConfig:
        MaxUnavailable: 1
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-nodegroup"
        - Key: Purpose
          Value: "Workshop EKS Nodes"

  # 10. AWS Load Balancer Controller IAM Role (conditional)
  ALBControllerRole:
    Type: AWS::IAM::Role
    Condition: EnableALBController
    Properties:
      RoleName: !Sub "${ClusterName}-alb-controller-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: !GetAtt EKSOidcProvider.Arn
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                !Sub "${EKSOidcProvider}:sub": "system:serviceaccount:kube-system:aws-load-balancer-controller"
                !Sub "${EKSOidcProvider}:aud": "sts.amazonaws.com"
      Policies:
        - PolicyName: AWSLoadBalancerControllerIAMPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - iam:CreateServiceLinkedRole
                  - ec2:DescribeAccountAttributes
                  - ec2:DescribeAddresses
                  - ec2:DescribeAvailabilityZones
                  - ec2:DescribeInternetGateways
                  - ec2:DescribeVpcs
                  - ec2:DescribeVpcPeeringConnections
                  - ec2:DescribeSubnets
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeInstances
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DescribeTags
                  - ec2:GetCoipPoolUsage
                  - ec2:DescribeCoipPools
                  - elasticloadbalancing:DescribeLoadBalancers
                  - elasticloadbalancing:DescribeLoadBalancerAttributes
                  - elasticloadbalancing:DescribeListeners
                  - elasticloadbalancing:DescribeListenerCertificates
                  - elasticloadbalancing:DescribeSSLPolicies
                  - elasticloadbalancing:DescribeRules
                  - elasticloadbalancing:DescribeTargetGroups
                  - elasticloadbalancing:DescribeTargetGroupAttributes
                  - elasticloadbalancing:DescribeTargetHealth
                  - elasticloadbalancing:DescribeTags
                Resource: "*"
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-alb-controller-role"

Outputs:
  ClusterName:
    Description: EKS cluster name
    Value: !Ref ClusterName
    Export:
      Name: !Sub "${AWS::StackName}-ClusterName"
  
  ClusterArn:
    Description: EKS cluster ARN
    Value: !GetAtt EKSCluster.Arn
    Export:
      Name: !Sub "${AWS::StackName}-ClusterArn"
  
  ClusterEndpoint:
    Description: API server endpoint
    Value: !GetAtt EKSCluster.Endpoint
    Export:
      Name: !Sub "${AWS::StackName}-ClusterEndpoint"
  
  OidcIssuer:
    Description: OIDC issuer URL
    Value: !GetAtt EKSCluster.OpenIdConnectIssuerUrl
    Export:
      Name: !Sub "${AWS::StackName}-OidcIssuer"
  
  VpcId:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}-VpcId"
  
  PublicSubnetIds:
    Description: Public subnet IDs
    Value: !Join [",", [!Ref PublicSubnet1, !Ref PublicSubnet2]]
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnetIds"
  
  PrivateSubnetIds:
    Description: Private subnet IDs
    Value: !Join [",", [!Ref PrivateSubnet1, !Ref PrivateSubnet2]]
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnetIds"
  
  NodeSecurityGroupId:
    Description: Worker node security group ID
    Value: !Ref NodeSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-NodeSecurityGroupId"
  
  NodeGroupName:
    Description: Managed node group name
    Value: !Ref NodeGroup
    Export:
      Name: !Sub "${AWS::StackName}-NodeGroupName"
  
  EKSClusterRoleArn:
    Description: IAM role ARN for EKS cluster
    Value: !GetAtt EKSClusterRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-EKSClusterRoleArn"
  
  NodeInstanceRoleArn:
    Description: IAM role ARN for worker nodes
    Value: !GetAtt NodeInstanceRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-NodeInstanceRoleArn"
  
  ALBControllerRoleArn:
    Description: IAM role ARN for AWS Load Balancer Controller
    Value: !If
      - EnableALBController
      - !GetAtt ALBControllerRole.Arn
      - !Ref "AWS::NoValue"
    Export:
      Name: !Sub "${AWS::StackName}-ALBControllerRoleArn"
  
  ConnectionCommand:
    Description: Command to connect to the cluster
    Value: !Sub "aws eks update-kubeconfig --region ${AWS::Region} --name ${ClusterName}"
  
  CostEstimate:
    Description: Estimated monthly cost (USD)
    Value: !Sub "~$50-80/month (3x ${NodeInstanceType} nodes + EKS control plane + NAT Gateway)"
