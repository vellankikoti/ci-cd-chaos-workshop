pipeline {
    agent any

    options {
        timeout(time: 15, unit: 'MINUTES')
        timestamps()
    }

    parameters {
        choice(
            name: 'DEPLOYMENT_STRATEGY',
            choices: ['Blue-Green', 'Canary', 'Rolling', 'Recreate'],
            description: '🎯 Deployment Strategy to Learn'
        )
        choice(
            name: 'APP_COMPLEXITY',
            choices: ['Simple', 'Advanced', 'Production'],
            description: '📊 Application Complexity Level'
        )
        string(
            name: 'INITIAL_VERSION',
            defaultValue: '1.0.0',
            description: '📦 Starting Application Version'
        )
    }

    environment {
        WORKSPACE_DIR = "${WORKSPACE}"
        BUILD_NUM = "${BUILD_NUMBER}"
    }

    stages {
        stage('🎯 Initialize') {
            steps {
                script {
                    echo "╔═══════════════════════════════════════════════════════════════════════╗"
                    echo "║    🎯 CI/CD MASTERY - LIVE DEPLOYMENT SIMULATOR                      ║"
                    echo "╠═══════════════════════════════════════════════════════════════════════╣"
                    echo "║  Strategy: ${params.DEPLOYMENT_STRATEGY}"
                    echo "║  Complexity: ${params.APP_COMPLEXITY}"
                    echo "║  Version: ${params.INITIAL_VERSION}"
                    echo "║  Build: #${BUILD_NUMBER}"
                    echo "╚═══════════════════════════════════════════════════════════════════════╝"
                }
                checkout scm
            }
        }

        stage('🏗️ Build Application') {
            steps {
                script {
                    echo "║"
                    echo "║  📦 Preparing live CI/CD simulator..."
                    echo "║"

                    // Copy app.py from the repo
                    sh '''#!/bin/bash
                        cd Jenkins/jenkins-scenarios/scenario_05_ci_cd_mastery

                        if [ ! -f app.py ]; then
                            echo "❌ Error: app.py not found!"
                            exit 1
                        fi

                        # Copy to workspace root for Docker build
                        cp app.py ${WORKSPACE}/
                        chmod +x ${WORKSPACE}/app.py

                        echo "║     ✅ Application ready"
                    '''

                    // Create Dockerfile
                    writeFile file: 'Dockerfile', text: '''FROM python:3.11-slim

WORKDIR /app

RUN pip install --no-cache-dir flask flask-cors

COPY app.py .

EXPOSE 8080

HEALTHCHECK --interval=10s --timeout=3s --start-period=5s --retries=3 \\
    CMD python3 -c "import urllib.request; urllib.request.urlopen('http://localhost:8080/api/health')" || exit 1

CMD ["python3", "app.py"]
'''

                    echo "║     ✅ Dockerfile created"
                }
            }
        }

        stage('🐳 Build & Deploy') {
            steps {
                script {
                    echo "║"
                    echo "║  🐳 Building and deploying live simulator..."
                    echo "║"

                    sh '''#!/bin/bash
                        set -e

                        # Cleanup
                        echo "║  🧹 Cleaning up old containers..."
                        docker ps -a --filter "name=cicd-live" --format "{{.Names}}" | xargs -r docker rm -f || true
                        sleep 2

                        # Build
                        IMAGE_NAME="cicd-live-${BUILD_NUMBER}"
                        echo "║  🔨 Building image: $IMAGE_NAME"
                        docker build -t $IMAGE_NAME .
                        echo "║     ✅ Image built"

                        # Find port and deploy
                        echo "║  🔍 Finding available port..."
                        EXTERNAL_PORT=8081
                        MAX_ATTEMPTS=50
                        ATTEMPT=0
                        DEPLOY_SUCCESS=false

                        while [ $ATTEMPT -lt $MAX_ATTEMPTS ] && [ "$DEPLOY_SUCCESS" = "false" ]; do
                            PORT_IN_USE=false

                            if netstat -tuln 2>/dev/null | grep -q ":$EXTERNAL_PORT " || \\
                               lsof -i :$EXTERNAL_PORT 2>/dev/null | grep -q LISTEN || \\
                               docker ps --format "{{.Ports}}" 2>/dev/null | grep -q ":$EXTERNAL_PORT->"; then
                                PORT_IN_USE=true
                            fi

                            if [ "$PORT_IN_USE" = "true" ]; then
                                EXTERNAL_PORT=$((EXTERNAL_PORT + 1))
                                ATTEMPT=$((ATTEMPT + 1))
                                continue
                            fi

                            # Deploy
                            CONTAINER_NAME="cicd-live-${BUILD_NUMBER}"
                            docker rm -f $CONTAINER_NAME 2>/dev/null || true

                            if docker run -d \\
                                --name $CONTAINER_NAME \\
                                -p $EXTERNAL_PORT:8080 \\
                                -e DEPLOYMENT_STRATEGY="${DEPLOYMENT_STRATEGY}" \\
                                -e APP_COMPLEXITY="${APP_COMPLEXITY}" \\
                                -e INITIAL_VERSION="${INITIAL_VERSION}" \\
                                -e BUILD_NUMBER="${BUILD_NUMBER}" \\
                                $IMAGE_NAME 2>&1; then

                                echo "║     ✅ Deployed on port $EXTERNAL_PORT"
                                DEPLOY_SUCCESS=true
                                echo $EXTERNAL_PORT > webapp.port
                                break
                            else
                                echo "║     ⚠️  Port $EXTERNAL_PORT failed, trying next port..."
                                docker rm -f $CONTAINER_NAME 2>/dev/null || true
                                EXTERNAL_PORT=$((EXTERNAL_PORT + 1))
                                ATTEMPT=$((ATTEMPT + 1))
                            fi
                        done

                        if [ "$DEPLOY_SUCCESS" = "false" ]; then
                            echo "║     ❌ Deployment failed after $MAX_ATTEMPTS attempts"
                            exit 1
                        fi

                        # Health check
                        echo "║  ⏳ Waiting for application to be ready..."
                        sleep 5
                        MAX_CHECKS=30
                        CHECK=0
                        while [ $CHECK -lt $MAX_CHECKS ]; do
                            if curl -f http://localhost:$EXTERNAL_PORT/api/health > /dev/null 2>&1; then
                                echo "║     ✅ Application healthy and ready!"
                                break
                            fi
                            sleep 1
                            CHECK=$((CHECK + 1))
                        done

                        echo "║"
                        echo "║  🎉 Live simulator deployed successfully!"
                        echo "║"
                        echo "║  🌐 Access your LIVE CI/CD simulator at:"
                        echo "║     👉 http://localhost:$EXTERNAL_PORT"
                        echo "║"
                        echo "║  🎮 Try these actions:"
                        echo "║     • Click 'Deploy' to trigger ${DEPLOYMENT_STRATEGY} deployment"
                        echo "║     • Watch live traffic switching in real-time"
                        echo "║     • Click 'Rollback' to see instant rollback"
                        echo "║     • Click 'Simulate Failure' to test failure scenarios"
                        echo "║     • Watch metrics update live (requests, health, traffic)"
                        echo "║"
                    '''
                }
            }
        }
    }

    post {
        always {
            script {
                echo ""
                echo "╔═══════════════════════════════════════════════════════════════════════╗"
                echo "║                   🎓 BUILD COMPLETE                                   ║"
                echo "╠═══════════════════════════════════════════════════════════════════════╣"
                echo "║  Strategy: ${params.DEPLOYMENT_STRATEGY}"
                echo "║  Build: #${BUILD_NUMBER}"
                echo "║"
                echo "║  🚀 What you can do:"
                echo "║     ✓ Trigger live deployments with different versions"
                echo "║     ✓ Watch real-time traffic switching"
                echo "║     ✓ Experience instant rollbacks"
                echo "║     ✓ Simulate failures and recoveries"
                echo "║     ✓ Monitor live metrics and health status"
                echo "║     ✓ See deployment logs in real-time"
                echo "║"
                echo "║  💡 This is a LIVE simulator - everything you see updates in real-time!"
                echo "║  🎯 Perfect for understanding production CI/CD patterns interactively!"
                echo "╚═══════════════════════════════════════════════════════════════════════╝"
            }
        }
    }
}
