pipeline {
    agent any

    options {
        timeout(time: 10, unit: 'MINUTES')
        timestamps()
        buildDiscarder(logRotator(numToKeepStr: '10'))
        skipDefaultCheckout()
    }

    environment {
        APP_NAME = 'cicd-mastery'
        BUILD_ID_CUSTOM = "${BUILD_NUMBER}"
    }

    parameters {
        choice(
            name: 'CICD_TOPIC',
            choices: ['Pipelines', 'Testing', 'Deployment', 'Monitoring', 'Security'],
            description: 'Select CI/CD topic to learn'
        )
        choice(
            name: 'COMPLEXITY',
            choices: ['Beginner', 'Intermediate', 'Advanced'],
            description: 'Select learning complexity'
        )
        string(
            name: 'NAMESPACE',
            defaultValue: 'cicd-learning',
            description: 'Namespace for examples'
        )
    }

    stages {
        stage('🚀 Setup') {
            steps {
                script {
                    echo "╔════════════════════════════════════════════════════════════════╗"
                    echo "║          🎯 CI/CD MASTERY - Interactive Learning              ║"
                    echo "╠════════════════════════════════════════════════════════════════╣"
                    echo "║  Topic: ${params.CICD_TOPIC}"
                    echo "║  Level: ${params.COMPLEXITY}"
                    echo "║  Namespace: ${params.NAMESPACE}"
                    echo "║  Build: #${BUILD_NUMBER}"
                    echo "╚════════════════════════════════════════════════════════════════╝"
                }
                checkout scm
            }
        }

        stage('📦 Build Application') {
            steps {
                script {
                    echo "║"
                    echo "║  📦 Creating CI/CD Mastery application..."
                    echo "║"

                    sh '''#!/bin/bash
                        set -e

                        echo "║  🔨 Generating Dockerfile..."

                        cat > Dockerfile << 'DOCKERFILE_END'
FROM python:3.11-slim

WORKDIR /app

# Install dependencies
RUN pip install --no-cache-dir flask flask-cors

# Copy application
COPY app.py .

# Environment variables
ENV CICD_TOPIC=Pipelines
ENV COMPLEXITY=Beginner
ENV NAMESPACE=cicd-learning
ENV PORT=8080

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=10s --timeout=3s --start-period=5s --retries=3 \\
    CMD python -c "import urllib.request; urllib.request.urlopen('http://localhost:8080/api/health')" || exit 1

# Run application
CMD ["python", "app.py"]
DOCKERFILE_END

                        echo "║     ✅ Dockerfile created"

                        echo "║  🐍 Generating Python application..."

                        cat > app.py << 'PYEOF'
#!/usr/bin/env python3
"""
CI/CD Mastery - Interactive Learning Platform
"""
from flask import Flask, jsonify, request
from flask_cors import CORS
import os
import json
from datetime import datetime
import time

app = Flask(__name__)
CORS(app)

start_time = time.time()

# Configuration
CICD_TOPIC = os.environ.get('CICD_TOPIC', 'Pipelines')
COMPLEXITY = os.environ.get('COMPLEXITY', 'Beginner')
NAMESPACE = os.environ.get('NAMESPACE', 'cicd-learning')

@app.route('/')
def index():
    """Serve the main HTML page"""
    html = f"""
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CI/CD Mastery - Interactive Learning</title>
    <style>
        * {{
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }}
        body {{
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }}
        .container {{
            max-width: 1200px;
            margin: 0 auto;
        }}
        .header {{
            background: white;
            padding: 30px;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
            margin-bottom: 30px;
            text-align: center;
        }}
        .header h1 {{
            color: #667eea;
            font-size: 2.5em;
            margin-bottom: 10px;
        }}
        .header p {{
            color: #666;
            font-size: 1.2em;
        }}
        .dashboard {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }}
        .card {{
            background: white;
            padding: 25px;
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            transition: transform 0.3s ease;
        }}
        .card:hover {{
            transform: translateY(-5px);
            box-shadow: 0 10px 25px rgba(0,0,0,0.2);
        }}
        .card h3 {{
            color: #667eea;
            margin-bottom: 15px;
            font-size: 1.3em;
        }}
        .card p {{
            color: #555;
            line-height: 1.6;
            margin-bottom: 10px;
        }}
        .badge {{
            display: inline-block;
            padding: 5px 15px;
            border-radius: 20px;
            font-size: 0.9em;
            font-weight: bold;
            margin: 5px;
        }}
        .beginner {{ background: #4CAF50; color: white; }}
        .intermediate {{ background: #FF9800; color: white; }}
        .advanced {{ background: #F44336; color: white; }}
        .concept-card {{
            background: white;
            padding: 30px;
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            margin-bottom: 30px;
        }}
        .concept-card h2 {{
            color: #667eea;
            margin-bottom: 20px;
        }}
        .concept-card ul {{
            list-style: none;
            padding: 0;
        }}
        .concept-card li {{
            padding: 10px 0;
            border-bottom: 1px solid #eee;
            color: #555;
        }}
        .concept-card li:last-child {{
            border-bottom: none;
        }}
        .example {{
            background: #f5f5f5;
            padding: 20px;
            border-radius: 10px;
            margin: 15px 0;
            border-left: 4px solid #667eea;
        }}
        .example h4 {{
            color: #667eea;
            margin-bottom: 10px;
        }}
        .example code {{
            background: #2d2d2d;
            color: #f8f8f2;
            padding: 15px;
            border-radius: 5px;
            display: block;
            overflow-x: auto;
            font-family: 'Courier New', monospace;
            font-size: 0.9em;
            line-height: 1.5;
        }}
        .footer {{
            text-align: center;
            color: white;
            margin-top: 30px;
            padding: 20px;
        }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🎯 CI/CD Mastery</h1>
            <p>Interactive Learning Platform for Modern DevOps</p>
            <div style="margin-top: 15px;">
                <span class="badge {COMPLEXITY.lower()}">{COMPLEXITY}</span>
                <span style="margin: 0 10px;">•</span>
                <strong>Topic: {CICD_TOPIC}</strong>
            </div>
        </div>

        <div class="dashboard">
            <div class="card">
                <h3>🎯 Current Focus</h3>
                <p><strong>Topic:</strong> {CICD_TOPIC}</p>
                <p><strong>Level:</strong> <span class="badge {COMPLEXITY.lower()}">{COMPLEXITY}</span></p>
                <p><strong>Namespace:</strong> {NAMESPACE}</p>
            </div>

            <div class="card">
                <h3>📊 Learning Progress</h3>
                <p><strong>Status:</strong> Active</p>
                <p><strong>Modules:</strong> 5 available</p>
                <p><strong>Time:</strong> ~45 minutes</p>
            </div>

            <div class="card">
                <h3>🚀 Features</h3>
                <p>✅ Interactive Examples</p>
                <p>✅ Real-world Patterns</p>
                <p>✅ Best Practices</p>
                <p>✅ Hands-on Labs</p>
            </div>
        </div>

        <div class="concept-card">
            <h2>📚 What You'll Learn: {CICD_TOPIC}</h2>
            <ul id="topics"></ul>
        </div>

        <div class="concept-card">
            <h2>💡 Example: Jenkins Pipeline</h2>
            <div class="example">
                <h4>Basic Pipeline Structure</h4>
                <code>pipeline {{
    agent any

    stages {{
        stage('Build') {{
            steps {{
                echo 'Building application...'
                sh './build.sh'
            }}
        }}

        stage('Test') {{
            steps {{
                echo 'Running tests...'
                sh './test.sh'
            }}
        }}

        stage('Deploy') {{
            steps {{
                echo 'Deploying to production...'
                sh './deploy.sh'
            }}
        }}
    }}
}}
</code>
            </div>
        </div>

        <div class="footer">
            <p>🎓 Built with Jenkins • Powered by Flask</p>
            <p>Keep learning and building! 🚀</p>
        </div>
    </div>

    <script>
        // Fetch and display topics
        fetch('/api/topics')
            .then(response => response.json())
            .then(data => {{
                const container = document.getElementById('topics');
                data.topics.forEach(topic => {{
                    const li = document.createElement('li');
                    li.textContent = '✓ ' + topic;
                    container.appendChild(li);
                }});
            }});
    </script>
</body>
</html>
"""
    return html

@app.route('/api/health')
def health():
    """Health check endpoint"""
    return jsonify({{
        'status': 'healthy',
        'timestamp': datetime.now().isoformat(),
        'uptime': int(time.time() - start_time)
    }})

@app.route('/api/status')
def status():
    """Status endpoint"""
    return jsonify({{
        'status': 'running',
        'topic': CICD_TOPIC,
        'complexity': COMPLEXITY,
        'namespace': NAMESPACE,
        'timestamp': datetime.now().isoformat(),
        'uptime': int(time.time() - start_time)
    }})

@app.route('/api/topics')
def topics():
    """Get learning topics"""
    topics_map = {{
        'Pipelines': [
            'Declarative vs Scripted Pipelines',
            'Pipeline Stages and Steps',
            'Parallel Execution',
            'Post Actions and Notifications',
            'Pipeline as Code Best Practices'
        ],
        'Testing': [
            'Unit Testing in CI/CD',
            'Integration Testing',
            'Code Quality Gates',
            'Test Reporting',
            'Automated Test Suites'
        ],
        'Deployment': [
            'Deployment Strategies',
            'Blue-Green Deployments',
            'Canary Releases',
            'Rollback Mechanisms',
            'Zero-Downtime Deployments'
        ],
        'Monitoring': [
            'Pipeline Monitoring',
            'Build Metrics',
            'Performance Tracking',
            'Alert Configuration',
            'Dashboard Creation'
        ],
        'Security': [
            'Secrets Management',
            'Access Control',
            'Security Scanning',
            'Compliance Checks',
            'Audit Logging'
        ]
    }}

    return jsonify({{
        'topic': CICD_TOPIC,
        'topics': topics_map.get(CICD_TOPIC, [])
    }})

if __name__ == '__main__':
    print(f"🚀 Starting CI/CD Mastery application...")
    print(f"📊 Topic: {{CICD_TOPIC}}")
    print(f"🎯 Complexity: {{COMPLEXITY}}")
    print(f"🏢 Namespace: {{NAMESPACE}}")
    print(f"🌐 Server running on http://0.0.0.0:8080")
    app.run(host='0.0.0.0', port=8080, debug=False)
PYEOF

                        echo "║     ✅ Application created"
                    '''
                }
            }
        }

        stage('🐳 Build & Deploy') {
            steps {
                script {
                    echo "║"
                    echo "║  🐳 Building and deploying container..."
                    echo "║"

                    sh '''#!/bin/bash
                        set -e

                        # Cleanup old containers
                        echo "║  🧹 Cleaning up old containers..."
                        docker ps -a --filter "name=cicd-mastery" --format "{{.Names}}" | xargs -r docker rm -f || true
                        sleep 2

                        # Build image
                        IMAGE_NAME="cicd-mastery-${BUILD_NUMBER}"
                        echo "║  🔨 Building image: $IMAGE_NAME"
                        docker build -t $IMAGE_NAME .
                        echo "║     ✅ Image built"

                        # Port detection with retry
                        echo "║  🔍 Finding available port..."
                        EXTERNAL_PORT=8081
                        MAX_ATTEMPTS=50
                        ATTEMPT=0
                        DEPLOY_SUCCESS=false

                        while [ $ATTEMPT -lt $MAX_ATTEMPTS ] && [ "$DEPLOY_SUCCESS" = "false" ]; do
                            PORT_IN_USE=false

                            # Check if port is in use
                            if netstat -tuln 2>/dev/null | grep -q ":$EXTERNAL_PORT " || \\
                               lsof -i :$EXTERNAL_PORT 2>/dev/null | grep -q LISTEN || \\
                               docker ps --format "{{.Ports}}" 2>/dev/null | grep -q ":$EXTERNAL_PORT->"; then
                                PORT_IN_USE=true
                            fi

                            if [ "$PORT_IN_USE" = "true" ]; then
                                EXTERNAL_PORT=$((EXTERNAL_PORT + 1))
                                ATTEMPT=$((ATTEMPT + 1))
                                continue
                            fi

                            # Try to start container
                            CONTAINER_NAME="cicd-mastery-${BUILD_NUMBER}"
                            if docker run -d \\
                                --name $CONTAINER_NAME \\
                                -p $EXTERNAL_PORT:8080 \\
                                -e CICD_TOPIC="${CICD_TOPIC}" \\
                                -e COMPLEXITY="${COMPLEXITY}" \\
                                -e NAMESPACE="${NAMESPACE}" \\
                                $IMAGE_NAME > /dev/null 2>&1; then

                                echo "║     ✅ Container started on port $EXTERNAL_PORT"
                                DEPLOY_SUCCESS=true
                                echo $EXTERNAL_PORT > webapp.port
                                break
                            else
                                EXTERNAL_PORT=$((EXTERNAL_PORT + 1))
                                ATTEMPT=$((ATTEMPT + 1))
                            fi
                        done

                        if [ "$DEPLOY_SUCCESS" = "false" ]; then
                            echo "║     ❌ Failed to deploy after $MAX_ATTEMPTS attempts"
                            exit 1
                        fi

                        # Wait for container to be healthy
                        echo "║  ⏳ Waiting for container to be healthy..."
                        sleep 5

                        MAX_HEALTH_CHECKS=30
                        HEALTH_CHECK=0
                        while [ $HEALTH_CHECK -lt $MAX_HEALTH_CHECKS ]; do
                            if curl -f http://localhost:$EXTERNAL_PORT/api/health > /dev/null 2>&1; then
                                echo "║     ✅ Application is healthy"
                                break
                            fi
                            sleep 1
                            HEALTH_CHECK=$((HEALTH_CHECK + 1))
                        done

                        if [ $HEALTH_CHECK -ge $MAX_HEALTH_CHECKS ]; then
                            echo "║     ⚠️  Health check timeout, but container is running"
                        fi

                        echo "║"
                        echo "║  🎉 Deployment successful!"
                        echo "║  🌐 Access at: http://localhost:$EXTERNAL_PORT"
                        echo "║"
                    '''
                }
            }
        }

        stage('✅ Verification') {
            steps {
                script {
                    def port = readFile('webapp.port').trim()

                    echo "║"
                    echo "║  ✅ Verifying deployment..."
                    echo "║"

                    sh """
                        PORT=${port}

                        echo "║  🔍 Testing endpoints..."

                        # Test health
                        if curl -f http://localhost:\$PORT/api/health > /dev/null 2>&1; then
                            echo "║     ✅ Health endpoint OK"
                        else
                            echo "║     ⚠️  Health endpoint not responding"
                        fi

                        # Test status
                        if curl -f http://localhost:\$PORT/api/status > /dev/null 2>&1; then
                            echo "║     ✅ Status endpoint OK"
                        else
                            echo "║     ⚠️  Status endpoint not responding"
                        fi

                        # Test topics
                        if curl -f http://localhost:\$PORT/api/topics > /dev/null 2>&1; then
                            echo "║     ✅ Topics endpoint OK"
                        else
                            echo "║     ⚠️  Topics endpoint not responding"
                        fi

                        echo "║"
                        echo "╔════════════════════════════════════════════════════════════════╗"
                        echo "║              🎉 CI/CD MASTERY - READY TO EXPLORE!              ║"
                        echo "╠════════════════════════════════════════════════════════════════╣"
                        echo "║  🌐 Access URL: http://localhost:\$PORT"
                        echo "║  📊 Topic: ${params.CICD_TOPIC}"
                        echo "║  🎯 Level: ${params.COMPLEXITY}"
                        echo "║"
                        echo "║  🚀 What to explore:"
                        echo "║     • Interactive learning modules"
                        echo "║     • Real-world examples"
                        echo "║     • Best practices"
                        echo "║     • Production patterns"
                        echo "║"
                        echo "║  💡 Tip: Try different topics and complexity levels!"
                        echo "╚════════════════════════════════════════════════════════════════╝"
                    """
                }
            }
        }
    }

    post {
        always {
            script {
                echo ""
                echo "╔════════════════════════════════════════════════════════════════╗"
                echo "║                   🎓 BUILD COMPLETE                            ║"
                echo "╠════════════════════════════════════════════════════════════════╣"
                echo "║  Topic: ${params.CICD_TOPIC}"
                echo "║  Level: ${params.COMPLEXITY}"
                echo "║  Build: #${BUILD_NUMBER}"
                echo "║"
                echo "║  Container will remain running for exploration"
                echo "║  Run another build to clean up and restart"
                echo "╚════════════════════════════════════════════════════════════════╝"
            }
        }
    }
}
