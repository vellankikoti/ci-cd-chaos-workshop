pipeline {
    agent any
    
    // Production-grade options - Jenkins best practices
    options {
        timeout(time: 5, unit: 'MINUTES')           // 5-minute challenge!
        timestamps()                                  // Every log line timestamped
        buildDiscarder(logRotator(numToKeepStr: '5')) // Keep only last 5 builds
        skipDefaultCheckout()                         // We'll checkout manually
    }
    
    // Environment variables for the CI/CD Dashboard
    environment {
        APP_NAME = 'ci-cd-dashboard'
        BUILD_TIMESTAMP = "${new Date().format('yyyyMMdd-HHmmss')}"
        DASHBOARD_THEME = 'modern'
        FEATURES_ENABLED = 'all'
    }
    
    // CI/CD Dashboard parameters - attendees can customize
    parameters {
        choice(
            name: 'DASHBOARD_TYPE',
            choices: ['Basic', 'Advanced', 'Enterprise', 'Custom'],
            description: 'Select CI/CD Dashboard complexity level'
        )
        choice(
            name: 'VISUALIZATION_STYLE',
            choices: ['Minimal', 'Interactive', '3D', 'Real-time'],
            description: 'Choose visualization style'
        )
        booleanParam(
            name: 'ENABLE_METRICS',
            defaultValue: true,
            description: 'Enable real-time metrics collection?'
        )
        booleanParam(
            name: 'ENABLE_ALERTS',
            defaultValue: true,
            description: 'Enable alert notifications?'
        )
        string(
            name: 'COMPANY_NAME',
            defaultValue: 'Your Company',
            description: 'Company name for dashboard branding'
        )
    }
    
    stages {
        stage('🚀 CI/CD Dashboard Setup') {
            steps {
                script {
                    echo "╔══════════════════════════════════════════════════════════════════════════════╗"
                    echo "║                    🎮 JENKINS CI/CD DASHBOARD BUILDER                        ║"
                    echo "╠══════════════════════════════════════════════════════════════════════════════╣"
                    echo "║  🎯 Building: Interactive CI/CD Dashboard Application"
                    echo "║  ⏱️  Duration: 5 minutes"
                    echo "║  🏗️  Type: ${params.DASHBOARD_TYPE ?: 'Basic'}"
                    echo "║  🎨 Style: ${params.VISUALIZATION_STYLE ?: 'Interactive'}"
                    echo "║  🏢 Company: ${params.COMPANY_NAME ?: 'Your Company'}"
                    echo "║"
                    echo "║  🎮 Ready to build the ultimate CI/CD Dashboard?"
                    echo "║"
                    echo "║  🎯 Dashboard Features:"
                    echo "║     • Real-time pipeline monitoring"
                    echo "║     • Interactive build visualizations"
                    echo "║     • Live metrics and analytics"
                    echo "║     • Alert notifications system"
                    echo "║     • Customizable themes and branding"
                    echo "║"
                    echo "║  🚀 Learning Objectives:"
                    echo "║     • Master Jenkins pipeline creation"
                    echo "║     • Build interactive web applications"
                    echo "║     • Implement real-time data visualization"
                    echo "║     • Learn modern web technologies"
                    echo "║     • Create production-ready dashboards!"
                    echo "╚══════════════════════════════════════════════════════════════════════════════╝"
                    
                    // Initialize dashboard scoring
                    env.DASHBOARD_SCORE = 0
                    env.START_TIME = System.currentTimeMillis()
                    
                    // Show dashboard configuration
                    echo ""
                    echo "╔══════════════════════════════════════════════════════════════════════════════╗"
                    echo "║                    ⚙️  DASHBOARD CONFIGURATION                               ║"
                    echo "╠══════════════════════════════════════════════════════════════════════════════╣"
                    echo "║  🏗️  Dashboard Type: ${params.DASHBOARD_TYPE ?: 'Basic'}"
                    echo "║  🎨 Visualization: ${params.VISUALIZATION_STYLE ?: 'Interactive'}"
                    echo "║  📊 Metrics: ${params.ENABLE_METRICS ? 'Enabled' : 'Disabled'}"
                    echo "║  🔔 Alerts: ${params.ENABLE_ALERTS ? 'Enabled' : 'Disabled'}"
                    echo "║  🏢 Company: ${params.COMPANY_NAME ?: 'Your Company'}"
                    echo "║  ⏱️  Build Time: 5 minutes"
                    echo "║  🎮 Mode: Interactive Dashboard Builder"
                    echo "╚══════════════════════════════════════════════════════════════════════════════╝"
                }
            }
        }
        
        stage('📊 Dashboard Application Creation') {
            steps {
                script {
                    echo "╔══════════════════════════════════════════════════════════════════════════════╗"
                    echo "║                    📊 DASHBOARD APPLICATION CREATION                          ║"
                    echo "╠══════════════════════════════════════════════════════════════════════════════╣"
                    echo "║  🎯 Objective: Build interactive CI/CD Dashboard web application"
                    echo "║  ⏱️  Time Limit: 1 minute"
                    echo "║  🏆 Max Points: 200 points"
                    echo "║"
                    
                    // Checkout code
                    checkout scm
                    
                    echo "║  🔨 Creating dashboard application files..."
                    echo "║"
                    
                    // Create the main dashboard HTML file
                    writeFile file: 'dashboard.html', text: '''<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CI/CD Dashboard - ''' + (params.COMPANY_NAME ?: 'Your Company') + '''</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { 
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white; min-height: 100vh;
        }
        .header { 
            background: rgba(0,0,0,0.2); padding: 20px; text-align: center; 
            backdrop-filter: blur(10px); border-bottom: 1px solid rgba(255,255,255,0.1);
        }
        .dashboard { 
            display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); 
            gap: 20px; padding: 20px; max-width: 1400px; margin: 0 auto;
        }
        .card { 
            background: rgba(255,255,255,0.1); border-radius: 15px; 
            padding: 20px; backdrop-filter: blur(10px); 
            border: 1px solid rgba(255,255,255,0.2);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }
        .card:hover { 
            transform: translateY(-5px); 
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
        }
        .metric { 
            font-size: 2em; font-weight: bold; color: #4CAF50; 
            text-shadow: 0 0 10px rgba(76, 175, 80, 0.5);
        }
        .status { 
            display: inline-block; padding: 5px 15px; border-radius: 20px; 
            font-size: 0.9em; font-weight: bold; margin: 5px 0;
        }
        .success { background: #4CAF50; }
        .warning { background: #FF9800; }
        .error { background: #F44336; }
        .progress-bar { 
            width: 100%; height: 10px; background: rgba(255,255,255,0.2); 
            border-radius: 5px; overflow: hidden; margin: 10px 0;
        }
        .progress-fill { 
            height: 100%; background: linear-gradient(90deg, #4CAF50, #8BC34A); 
            transition: width 0.3s ease; border-radius: 5px;
        }
        .pipeline-item { 
            display: flex; justify-content: space-between; align-items: center; 
            padding: 10px; margin: 5px 0; background: rgba(255,255,255,0.05); 
            border-radius: 8px; border-left: 4px solid #4CAF50;
        }
        .chart-container { 
            height: 200px; background: rgba(255,255,255,0.05); 
            border-radius: 10px; display: flex; align-items: center; 
            justify-content: center; margin: 10px 0;
        }
        .alert { 
            background: rgba(255, 193, 7, 0.2); border: 1px solid #FFC107; 
            padding: 10px; border-radius: 8px; margin: 10px 0;
        }
        .real-time { 
            animation: pulse 2s infinite; 
        }
        @keyframes pulse { 
            0% { opacity: 1; } 50% { opacity: 0.7; } 100% { opacity: 1; } 
        }
        .footer { 
            text-align: center; padding: 20px; 
            background: rgba(0,0,0,0.2); margin-top: 20px;
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>🚀 CI/CD Dashboard</h1>
        <p>''' + (params.COMPANY_NAME ?: 'Your Company') + ''' - Real-time Pipeline Monitoring</p>
        <div class="status success real-time">● LIVE</div>
    </div>
    
    <div class="dashboard">
        <div class="card">
            <h3>📊 Build Statistics</h3>
            <div class="metric" id="totalBuilds">247</div>
            <p>Total Builds Today</p>
            <div class="progress-bar">
                <div class="progress-fill" style="width: 85%"></div>
            </div>
            <p>Success Rate: 85%</p>
        </div>
        
        <div class="card">
            <h3>⚡ Pipeline Status</h3>
            <div class="pipeline-item">
                <span>Frontend Pipeline</span>
                <span class="status success">PASSING</span>
            </div>
            <div class="pipeline-item">
                <span>Backend API</span>
                <span class="status success">PASSING</span>
            </div>
            <div class="pipeline-item">
                <span>Database Migration</span>
                <span class="status warning">RUNNING</span>
            </div>
            <div class="pipeline-item">
                <span>Security Scan</span>
                <span class="status error">FAILED</span>
            </div>
        </div>
        
        <div class="card">
            <h3>📈 Performance Metrics</h3>
            <div class="chart-container">
                <div style="text-align: center;">
                    <div class="metric">2.3s</div>
                    <p>Avg Build Time</p>
                </div>
            </div>
            <div class="progress-bar">
                <div class="progress-fill" style="width: 70%"></div>
            </div>
            <p>Performance Score: 70%</p>
        </div>
        
        <div class="card">
            <h3>🔔 Recent Alerts</h3>
            <div class="alert">
                <strong>⚠️ High CPU Usage</strong><br>
                Build server CPU at 85%
            </div>
            <div class="alert">
                <strong>✅ Deployment Success</strong><br>
                Production deployment completed
            </div>
            <div class="alert">
                <strong>🔍 Security Scan</strong><br>
                New vulnerabilities detected
            </div>
        </div>
        
        <div class="card">
            <h3>🎯 Team Performance</h3>
            <div class="metric">94%</div>
            <p>Team Efficiency</p>
            <div class="pipeline-item">
                <span>Commits Today</span>
                <span>23</span>
            </div>
            <div class="pipeline-item">
                <span>Code Reviews</span>
                <span>15</span>
            </div>
            <div class="pipeline-item">
                <span>Deployments</span>
                <span>8</span>
            </div>
        </div>
        
        <div class="card">
            <h3>🌐 Environment Status</h3>
            <div class="pipeline-item">
                <span>Production</span>
                <span class="status success">HEALTHY</span>
            </div>
            <div class="pipeline-item">
                <span>Staging</span>
                <span class="status success">HEALTHY</span>
            </div>
            <div class="pipeline-item">
                <span>Development</span>
                <span class="status warning">MAINTENANCE</span>
            </div>
        </div>
    </div>
    
    <div class="footer">
        <p>Built with ❤️ using Jenkins CI/CD Pipeline</p>
        <p>Last Updated: <span id="lastUpdate">''' + new Date().toLocaleString() + '''</span></p>
    </div>
    
    <script>
        // Real-time updates simulation
        function updateMetrics() {
            const totalBuilds = document.getElementById('totalBuilds');
            const currentBuilds = parseInt(totalBuilds.textContent);
            totalBuilds.textContent = currentBuilds + Math.floor(Math.random() * 3);
            
            const lastUpdate = document.getElementById('lastUpdate');
            lastUpdate.textContent = new Date().toLocaleString();
        }
        
        // Update every 5 seconds
        setInterval(updateMetrics, 5000);
        
        // Add some interactivity
        document.querySelectorAll('.card').forEach(card => {
            card.addEventListener('click', function() {
                this.style.transform = 'scale(1.02)';
                setTimeout(() => {
                    this.style.transform = '';
                }, 200);
            });
        });
        
        console.log('🚀 CI/CD Dashboard loaded successfully!');
        console.log('📊 Dashboard Type: ''' + (params.DASHBOARD_TYPE ?: 'Basic') + '''');
        console.log('🎨 Visualization: ''' + (params.VISUALIZATION_STYLE ?: 'Interactive') + '''');
    </script>
</body>
</html>'''
                    
                    echo "║  ✅ Created dashboard.html - Interactive web application"
                    
                    // Create Python Flask backend for API
                    writeFile file: 'dashboard_api.py', text: '''#!/usr/bin/env python3
"""
CI/CD Dashboard API Server
Real-time metrics and pipeline monitoring
"""

from flask import Flask, jsonify, render_template_string
import json
import time
import random
from datetime import datetime, timedelta

app = Flask(__name__)

# Dashboard configuration
DASHBOARD_CONFIG = {
    "company_name": "''' + (params.COMPANY_NAME ?: 'Your Company') + '''",
    "dashboard_type": "''' + (params.DASHBOARD_TYPE ?: 'Basic') + '''",
    "visualization_style": "''' + (params.VISUALIZATION_STYLE ?: 'Interactive') + '''",
    "metrics_enabled": ''' + (params.ENABLE_METRICS ? 'True' : 'False') + ''',
    "alerts_enabled": ''' + (params.ENABLE_ALERTS ? 'True' : 'False') + '''
}

# Simulated pipeline data
pipelines = [
    {"name": "Frontend Pipeline", "status": "success", "duration": 120, "last_run": "2 minutes ago"},
    {"name": "Backend API", "status": "success", "duration": 180, "last_run": "5 minutes ago"},
    {"name": "Database Migration", "status": "running", "duration": 45, "last_run": "1 minute ago"},
    {"name": "Security Scan", "status": "failed", "duration": 300, "last_run": "10 minutes ago"},
    {"name": "Integration Tests", "status": "success", "duration": 240, "last_run": "15 minutes ago"}
]

@app.route('/')
def dashboard():
    """Serve the main dashboard"""
    return render_template_string(open('dashboard.html').read())

@app.route('/api/metrics')
def get_metrics():
    """Get real-time metrics"""
    return jsonify({
        "total_builds": random.randint(240, 260),
        "success_rate": round(random.uniform(80, 95), 1),
        "avg_build_time": round(random.uniform(2.0, 3.5), 1),
        "active_pipelines": len([p for p in pipelines if p["status"] == "running"]),
        "last_updated": datetime.now().isoformat()
    })

@app.route('/api/pipelines')
def get_pipelines():
    """Get pipeline status"""
    return jsonify({
        "pipelines": pipelines,
        "total": len(pipelines),
        "success": len([p for p in pipelines if p["status"] == "success"]),
        "running": len([p for p in pipelines if p["status"] == "running"]),
        "failed": len([p for p in pipelines if p["status"] == "failed"])
    })

@app.route('/api/alerts')
def get_alerts():
    """Get recent alerts"""
    alerts = [
        {
            "id": 1,
            "type": "warning",
            "message": "High CPU usage detected on build server",
            "timestamp": (datetime.now() - timedelta(minutes=5)).isoformat()
        },
        {
            "id": 2,
            "type": "success",
            "message": "Production deployment completed successfully",
            "timestamp": (datetime.now() - timedelta(minutes=15)).isoformat()
        },
        {
            "id": 3,
            "type": "error",
            "message": "Security scan failed - vulnerabilities detected",
            "timestamp": (datetime.now() - timedelta(minutes=30)).isoformat()
        }
    ]
    return jsonify({"alerts": alerts})

@app.route('/api/health')
def health_check():
    """Health check endpoint"""
    return jsonify({
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "version": "1.0.0",
        "config": DASHBOARD_CONFIG
    })

if __name__ == '__main__':
    print("🚀 Starting CI/CD Dashboard API Server...")
    print(f"📊 Dashboard Type: {DASHBOARD_CONFIG['dashboard_type']}")
    print(f"🎨 Visualization: {DASHBOARD_CONFIG['visualization_style']}")
    print(f"🏢 Company: {DASHBOARD_CONFIG['company_name']}")
    print("🌐 Server running on http://0.0.0.0:5000")
    app.run(host='0.0.0.0', port=5000, debug=False)
'''
                    
                    echo "║  ✅ Created dashboard_api.py - Flask API server"
                    
                    // Create requirements.txt
                    writeFile file: 'requirements.txt', text: '''Flask==2.3.3
Werkzeug==2.3.7
Jinja2==3.1.2
MarkupSafe==2.1.3
itsdangerous==2.1.2
click==8.1.7
blinker==1.6.2
'''
                    
                    echo "║  ✅ Created requirements.txt - Python dependencies"
                    
                    // Create Dockerfile for containerization
                    writeFile file: 'Dockerfile', text: '''FROM python:3.11-slim

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \\
    curl \\
    && rm -rf /var/lib/apt/lists/*

# Copy requirements and install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy application files
COPY dashboard.html .
COPY dashboard_api.py .

# Expose port
EXPOSE 5000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \\
    CMD curl -f http://localhost:5000/api/health || exit 1

# Run the application
CMD ["python", "dashboard_api.py"]
'''
                    
                    echo "║  ✅ Created Dockerfile - Container configuration"
                    
                    // Create docker-compose.yml for easy deployment
                    writeFile file: 'docker-compose.yml', text: '''version: '3.8'

services:
  ci-cd-dashboard:
    build: .
    ports:
      - "8080:5000"
    environment:
      - FLASK_ENV=production
      - DASHBOARD_TYPE=''' + (params.DASHBOARD_TYPE ?: 'Basic') + '''
      - VISUALIZATION_STYLE=''' + (params.VISUALIZATION_STYLE ?: 'Interactive') + '''
      - COMPANY_NAME=''' + (params.COMPANY_NAME ?: 'Your Company') + '''
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`dashboard.localhost`)"
      - "traefik.http.services.dashboard.loadbalancer.server.port=5000"
'''
                    
                    echo "║  ✅ Created docker-compose.yml - Easy deployment"
                    
                    // Create README with instructions
                    writeFile file: 'README.md', text: '''# CI/CD Dashboard

A modern, interactive CI/CD monitoring dashboard built with Jenkins pipelines.

## Features

- 📊 **Real-time Metrics**: Live build statistics and performance data
- 🚀 **Pipeline Monitoring**: Visual pipeline status and progress tracking
- 🔔 **Alert System**: Real-time notifications and warnings
- 🎨 **Customizable Themes**: Multiple visualization styles
- 🏢 **Company Branding**: Customizable company information
- 📱 **Responsive Design**: Works on desktop and mobile devices

## Quick Start

### Option 1: Docker Compose (Recommended)
```bash
docker-compose up -d
```

### Option 2: Python Direct
```bash
pip install -r requirements.txt
python dashboard_api.py
```

### Option 3: Docker Build
```bash
docker build -t ci-cd-dashboard .
docker run -p 8080:5000 ci-cd-dashboard
```

## Access

- **Dashboard**: http://localhost:8080
- **API Health**: http://localhost:8080/api/health
- **Metrics API**: http://localhost:8080/api/metrics
- **Pipelines API**: http://localhost:8080/api/pipelines
- **Alerts API**: http://localhost:8080/api/alerts

## Configuration

The dashboard is configured through Jenkins pipeline parameters:

- **Dashboard Type**: ''' + (params.DASHBOARD_TYPE ?: 'Basic') + '''
- **Visualization Style**: ''' + (params.VISUALIZATION_STYLE ?: 'Interactive') + '''
- **Company Name**: ''' + (params.COMPANY_NAME ?: 'Your Company') + '''
- **Metrics Enabled**: ''' + (params.ENABLE_METRICS ?: 'true') + '''
- **Alerts Enabled**: ''' + (params.ENABLE_ALERTS ?: 'true') + '''

## API Endpoints

- `GET /` - Main dashboard interface
- `GET /api/health` - Health check
- `GET /api/metrics` - Real-time metrics
- `GET /api/pipelines` - Pipeline status
- `GET /api/alerts` - Recent alerts

## Built With

- **Frontend**: HTML5, CSS3, JavaScript
- **Backend**: Python Flask
- **Containerization**: Docker
- **Orchestration**: Docker Compose
- **CI/CD**: Jenkins Pipeline

## Learning Objectives

This dashboard demonstrates:

1. **Jenkins Pipeline Creation**: Automated application building
2. **Web Application Development**: Modern frontend and backend
3. **Containerization**: Docker and Docker Compose
4. **API Design**: RESTful API endpoints
5. **Real-time Data**: Live metrics and updates
6. **Production Patterns**: Health checks, monitoring, alerts

## Next Steps

1. Customize the dashboard for your specific needs
2. Integrate with real CI/CD tools and metrics
3. Add authentication and user management
4. Implement data persistence
5. Add more visualization types
6. Deploy to cloud platforms

---

**Built with ❤️ using Jenkins CI/CD Pipeline**
'''
                    
                    echo "║  ✅ Created README.md - Documentation and instructions"
                    echo "║"
                    echo "║  🎯 Dashboard Application Created Successfully!"
                    echo "║  📁 Files Generated:"
                    echo "║     • dashboard.html - Interactive web interface"
                    echo "║     • dashboard_api.py - Flask API server"
                    echo "║     • requirements.txt - Python dependencies"
                    echo "║     • Dockerfile - Container configuration"
                    echo "║     • docker-compose.yml - Easy deployment"
                    echo "║     • README.md - Complete documentation"
                    echo "║"
                    echo "║  🏆 Points Earned: 200/200"
                    echo "║  ⏱️  Time Taken: 45 seconds"
                    echo "╚══════════════════════════════════════════════════════════════════════════════╝"
                    
                    // Update dashboard score
                    env.DASHBOARD_SCORE = (env.DASHBOARD_SCORE ?: '0').toInteger() + 200
                }
            }
        }
        
        stage('🐳 Containerization & Deployment') {
            steps {
                script {
                    echo "╔══════════════════════════════════════════════════════════════════════════════╗"
                    echo "║                    🐳 CONTAINERIZATION & DEPLOYMENT                          ║"
                    echo "╠══════════════════════════════════════════════════════════════════════════════╣"
                    echo "║  🎯 Objective: Containerize and deploy the CI/CD Dashboard"
                    echo "║  ⏱️  Time Limit: 1 minute"
                    echo "║  🏆 Max Points: 200 points"
                    echo "║"
                    
                    echo "║  🐳 Building Docker image..."
                    echo "║"
                    
                    // Clean up any existing dashboard containers
                    echo "║  🧹 Cleaning up existing dashboard containers..."
                    sh '''
                        # Stop and remove any existing dashboard containers
                        docker ps -a --filter "name=ci-cd-dashboard" --format "{{.ID}}" | xargs -r docker stop
                        docker ps -a --filter "name=ci-cd-dashboard" --format "{{.ID}}" | xargs -r docker rm
                        echo "║     ✅ Cleanup completed"
                    '''
                    
                    // Enhanced port detection with Docker port checking
                    echo "║  🔍 Finding available port..."
                    def WEBAPP_PORT = 8081
                    def foundPort = false
                    
                    // Get list of ports used by Docker containers
                    def dockerPorts = sh(
                        script: "docker ps --format '{{.Ports}}' | grep -oE ':[0-9]+->' | sed 's/://g' | sed 's/->//g' | sort -n | uniq || true",
                        returnStdout: true
                    ).trim().split('\n').findAll { it.isNumber() && it.toInteger() > 0 }.collect { it.toInteger() }
                    
                    echo "║  📊 Docker ports in use: ${dockerPorts.take(5).join(', ')}${dockerPorts.size() > 5 ? '...' : ''}"
                    
                    // Try ports 8081-8100, avoiding Docker ports
                    for (int port = 8081; port <= 8100; port++) {
                        echo "║  🔍 Checking port $port..."
                        
                        // Skip if port is used by Docker
                        if (dockerPorts.contains(port)) {
                            echo "║     Port $port is used by Docker, trying next..."
                            continue
                        }
                        
                        // Test if port is available by trying to connect to it
                        def portTest = sh(
                            script: "timeout 2 bash -c 'echo > /dev/tcp/localhost/$port' 2>/dev/null",
                            returnStatus: true
                        )
                        
                        if (portTest != 0) {
                            // Port is available (connection failed = port not in use)
                            WEBAPP_PORT = port
                            foundPort = true
                            echo "║     ✅ Found available port: $WEBAPP_PORT"
                            break
                        } else {
                            echo "║     Port $port is in use, trying next..."
                        }
                    }
                    
                    if (!foundPort) {
                        echo "║     ⚠️  No port found, using random port 8xxx"
                        WEBAPP_PORT = 8000 + (new Random().nextInt(1000))
                        foundPort = true
                    }
                    
                    // Build Docker image
                    sh """
                        echo "║  🔨 Building Docker image..."
                        docker build -t ci-cd-dashboard:${BUILD_TIMESTAMP} . || {
                            echo "║     ❌ Docker build failed"
                            exit 1
                        }
                        echo "║     ✅ Docker image built successfully"
                    """
                    
                    echo "║  🚀 Deploying container..."
                    
                    // Run container with comprehensive port handling
                    def finalPort = sh(
                        script: """
                            echo "║  🐳 Starting container on port $WEBAPP_PORT..."
                            
                            # Function to try starting container on a port
                            try_port() {
                                local port=\$1
                                echo "║     🔍 Trying port \$port..."
                                
                                # Clean up the port
                                if command -v lsof >/dev/null 2>&1; then
                                    lsof -ti:\$port | xargs -r kill -9 2>/dev/null || true
                                fi
                                if command -v netstat >/dev/null 2>&1; then
                                    netstat -tulpn 2>/dev/null | grep ":\$port " | awk '{print \\\$7}' | cut -d'/' -f1 | xargs -r kill -9 2>/dev/null || true
                                fi
                                docker ps -a --filter "publish=\$port" --format "{{.ID}}" | xargs -r docker stop 2>/dev/null || true
                                docker ps -a --filter "publish=\$port" --format "{{.ID}}" | xargs -r docker rm -f 2>/dev/null || true
                                
                                # Try to start container
                                if CONTAINER_ID=\$(docker run -d \\
                                    --name ci-cd-dashboard-${BUILD_TIMESTAMP} \\
                                    -p \$port:5000 \\
                                    -e DASHBOARD_TYPE='${params.DASHBOARD_TYPE ?: 'Basic'}' \\
                                    -e VISUALIZATION_STYLE='${params.VISUALIZATION_STYLE ?: 'Interactive'}' \\
                                    -e COMPANY_NAME='${params.COMPANY_NAME ?: 'Your Company'}' \\
                                    ci-cd-dashboard:${BUILD_TIMESTAMP} 2>&1); then
                                    
                                    echo "║     ✅ Container started on port \$port: \$CONTAINER_ID"
                                    echo \$port
                                    return 0
                                else
                                    echo "║     ❌ Port \$port failed: \$CONTAINER_ID"
                                    docker rm -f ci-cd-dashboard-${BUILD_TIMESTAMP} 2>/dev/null || true
                                    return 1
                                fi
                            }
                            
                            # Try the primary port first
                            if try_port $WEBAPP_PORT; then
                                echo "║     ✅ Primary port $WEBAPP_PORT worked"
                            else
                                echo "║     🔄 Primary port failed, trying alternatives..."
                                
                                # Try alternative ports
                                for alt_port in 8082 8083 8084 8085 8086 8087 8088 8089 8090 8091 8092 8093 8094 8095; do
                                    if try_port \$alt_port; then
                                        echo "║     ✅ Alternative port \$alt_port worked"
                                        break
                                    fi
                                done
                            fi
                            
                            # Wait for container to start
                            echo "║  ⏳ Waiting for container to start..."
                            sleep 10
                            
                            # Check if container is running
                            if ! docker ps | grep -q ci-cd-dashboard-${BUILD_TIMESTAMP}; then
                                echo "║     ❌ Container failed to start"
                                echo "║     • Container logs:"
                                docker logs ci-cd-dashboard-${BUILD_TIMESTAMP} 2>/dev/null || true
                                exit 1
                            fi
                            
                            # Get the actual port from running container
                            ACTUAL_PORT=\$(docker ps --filter "name=ci-cd-dashboard-${BUILD_TIMESTAMP}" --format "{{.Ports}}" | grep -oE ':[0-9]+->' | sed 's/://g' | sed 's/->//g' | head -1)
                            echo "║     📊 Container running on port: \$ACTUAL_PORT"
                            
                            # Save port info
                            echo \$ACTUAL_PORT > dashboard.port
                            
                            echo "║     ✅ Container deployed successfully"
                            echo "║     🌐 Dashboard URL: http://localhost:\$ACTUAL_PORT"
                            
                            # Return the actual port
                            echo \$ACTUAL_PORT
                        """,
                        returnStdout: true
                    ).trim()
                    
                    // Update the port variable with the actual port used
                    WEBAPP_PORT = finalPort
                    
                    echo "║"
                    echo "║  🎯 Containerization Complete!"
                    echo "║  📊 Deployment Details:"
                    echo "║     • Image: ci-cd-dashboard:${BUILD_TIMESTAMP}"
                    echo "║     • Container: ci-cd-dashboard-${BUILD_TIMESTAMP}"
                    echo "║     • Port: $WEBAPP_PORT"
                    echo "║     • URL: http://localhost:$WEBAPP_PORT"
                    echo "║"
                    echo "║  🏆 Points Earned: 200/200"
                    echo "║  ⏱️  Time Taken: 50 seconds"
                    echo "╚══════════════════════════════════════════════════════════════════════════════╝"
                    
                    // Update dashboard score
                    env.DASHBOARD_SCORE = (env.DASHBOARD_SCORE ?: '0').toInteger() + 200
                }
            }
        }
        
        stage('📊 Testing & Validation') {
            steps {
                script {
                    echo "╔══════════════════════════════════════════════════════════════════════════════╗"
                    echo "║                    📊 TESTING & VALIDATION                                   ║"
                    echo "╠══════════════════════════════════════════════════════════════════════════════╣"
                    echo "║  🎯 Objective: Test and validate the CI/CD Dashboard"
                    echo "║  ⏱️  Time Limit: 1 minute"
                    echo "║  🏆 Max Points: 150 points"
                    echo "║"
                    
                    // Read port from file
                    def WEBAPP_PORT = readFile('dashboard.port').trim()
                    
                    echo "║  🧪 Running comprehensive tests..."
                    echo "║"
                    
                    // Test 1: Health Check with retries
                    echo "║  🔍 Test 1: Health Check API"
                    sh """
                        echo "║     Testing health endpoint..."
                        
                        # First, test if port is accessible
                        echo "║     🔍 Testing port accessibility..."
                        if ! nc -z localhost $WEBAPP_PORT 2>/dev/null; then
                            echo "║     ❌ Port $WEBAPP_PORT is not accessible"
                            echo "║     • Container status:"
                            docker ps | grep ci-cd-dashboard-${BUILD_TIMESTAMP} || echo "Container not running"
                            echo "║     • Container logs:"
                            docker logs ci-cd-dashboard-${BUILD_TIMESTAMP} 2>/dev/null || true
                            exit 1
                        fi
                        echo "║     ✅ Port $WEBAPP_PORT is accessible"
                        
                        # Wait for container to be ready with retries
                        MAX_RETRIES=10
                        RETRY_COUNT=0
                        HEALTH_CHECK_PASSED=false
                        
                        while [ \$RETRY_COUNT -lt \$MAX_RETRIES ] && [ "\$HEALTH_CHECK_PASSED" = "false" ]; do
                            RETRY_COUNT=\$((RETRY_COUNT + 1))
                            echo "║     Health check attempt \$RETRY_COUNT/\$MAX_RETRIES..."
                            
                            if curl -f http://localhost:$WEBAPP_PORT/api/health 2>/dev/null; then
                                echo "║     ✅ Health check passed"
                                HEALTH_CHECK_PASSED=true
                            else
                                echo "║     ⏳ Container not ready yet, waiting 3 seconds..."
                                sleep 3
                            fi
                        done
                        
                        if [ "\$HEALTH_CHECK_PASSED" = "false" ]; then
                            echo "║     ❌ Health check failed after \$MAX_RETRIES attempts"
                            echo "║     • Container status:"
                            docker ps | grep ci-cd-dashboard-${BUILD_TIMESTAMP} || echo "Container not running"
                            echo "║     • Container logs:"
                            docker logs ci-cd-dashboard-${BUILD_TIMESTAMP} 2>/dev/null || true
                            exit 1
                        fi
                    """
                    
                    // Test 2: Metrics API
                    echo "║  📊 Test 2: Metrics API"
                    sh """
                        echo "║     Testing metrics endpoint..."
                        curl -f http://localhost:$WEBAPP_PORT/api/metrics || {
                            echo "║     ❌ Metrics API failed"
                            exit 1
                        }
                        echo "║     ✅ Metrics API working"
                    """
                    
                    // Test 3: Pipelines API
                    echo "║  🚀 Test 3: Pipelines API"
                    sh """
                        echo "║     Testing pipelines endpoint..."
                        curl -f http://localhost:$WEBAPP_PORT/api/pipelines || {
                            echo "║     ❌ Pipelines API failed"
                            exit 1
                        }
                        echo "║     ✅ Pipelines API working"
                    """
                    
                    // Test 4: Main Dashboard
                    echo "║  🌐 Test 4: Main Dashboard"
                    sh """
                        echo "║     Testing main dashboard..."
                        curl -f http://localhost:$WEBAPP_PORT/ || {
                            echo "║     ❌ Main dashboard failed"
                            exit 1
                        }
                        echo "║     ✅ Main dashboard accessible"
                    """
                    
                    // Test 5: Container Status
                    echo "║  🐳 Test 5: Container Status"
                    sh """
                        echo "║     Checking container health..."
                        if docker ps | grep -q ci-cd-dashboard-${BUILD_TIMESTAMP}; then
                            echo "║     ✅ Container is running"
                        else
                            echo "║     ❌ Container is not running"
                            exit 1
                        fi
                    """
                    
                    echo "║"
                    echo "║  🎯 All Tests Passed!"
                    echo "║  📊 Test Results:"
                    echo "║     • Health Check API: ✅ PASS"
                    echo "║     • Metrics API: ✅ PASS"
                    echo "║     • Pipelines API: ✅ PASS"
                    echo "║     • Main Dashboard: ✅ PASS"
                    echo "║     • Container Status: ✅ PASS"
                    echo "║"
                    echo "║  🏆 Points Earned: 150/150"
                    echo "║  ⏱️  Time Taken: 40 seconds"
                    echo "╚══════════════════════════════════════════════════════════════════════════════╝"
                    
                    // Update dashboard score
                    env.DASHBOARD_SCORE = (env.DASHBOARD_SCORE ?: '0').toInteger() + 150
                }
            }
        }
        
        stage('🎯 Interactive Demo & Learning') {
            steps {
                script {
                    echo "╔══════════════════════════════════════════════════════════════════════════════╗"
                    echo "║                    🎯 INTERACTIVE DEMO & LEARNING                            ║"
                    echo "╠══════════════════════════════════════════════════════════════════════════════╣"
                    echo "║  🎯 Objective: Demonstrate CI/CD Dashboard capabilities"
                    echo "║  ⏱️  Time Limit: 1 minute"
                    echo "║  🏆 Max Points: 150 points"
                    echo "║"
                    
                    // Read port from file
                    def WEBAPP_PORT = readFile('dashboard.port').trim()
                    
                    echo "║  🎮 Interactive Demo Features:"
                    echo "║"
                    
                    // Demo 1: Real-time Updates
                    echo "║  🔄 Demo 1: Real-time Metrics Updates"
                    sh """
                        echo "║     • Dashboard updates every 5 seconds"
                        echo "║     • Live build statistics"
                        echo "║     • Dynamic progress bars"
                        echo "║     • Animated status indicators"
                    """
                    
                    // Demo 2: API Endpoints
                    echo "║  🌐 Demo 2: RESTful API Endpoints"
                    sh """
                        echo "║     • GET /api/health - Health monitoring"
                        echo "║     • GET /api/metrics - Real-time metrics"
                        echo "║     • GET /api/pipelines - Pipeline status"
                        echo "║     • GET /api/alerts - Alert notifications"
                    """
                    
                    // Demo 3: Responsive Design
                    echo "║  📱 Demo 3: Responsive Design"
                    sh """
                        echo "║     • Mobile-friendly interface"
                        echo "║     • Adaptive grid layout"
                        echo "║     • Touch-friendly interactions"
                        echo "║     • Modern CSS animations"
                    """
                    
                    // Demo 4: Customization
                    echo "║  🎨 Demo 4: Customization Features"
                    sh """
                        echo "║     • Company branding: ${params.COMPANY_NAME ?: 'Your Company'}"
                        echo "║     • Dashboard type: ${params.DASHBOARD_TYPE ?: 'Basic'}"
                        echo "║     • Visualization: ${params.VISUALIZATION_STYLE ?: 'Interactive'}"
                        echo "║     • Metrics enabled: ${params.ENABLE_METRICS ?: 'true'}"
                        echo "║     • Alerts enabled: ${params.ENABLE_ALERTS ?: 'true'}"
                    """
                    
                    // Demo 5: Production Features
                    echo "║  🏭 Demo 5: Production-Ready Features"
                    sh """
                        echo "║     • Docker containerization"
                        echo "║     • Health check endpoints"
                        echo "║     • Error handling"
                        echo "║     • Logging and monitoring"
                        echo "║     • Easy deployment with docker-compose"
                    """
                    
                    echo "║"
                    echo "║  🎯 Demo Complete!"
                    echo "║  🌐 Access Your Dashboard:"
                    echo "║     • URL: http://localhost:$WEBAPP_PORT"
                    echo "║     • API: http://localhost:$WEBAPP_PORT/api/health"
                    echo "║     • Metrics: http://localhost:$WEBAPP_PORT/api/metrics"
                    echo "║"
                    echo "║  🏆 Points Earned: 150/150"
                    echo "║  ⏱️  Time Taken: 30 seconds"
                    echo "╚══════════════════════════════════════════════════════════════════════════════╝"
                    
                    // Update dashboard score
                    env.DASHBOARD_SCORE = (env.DASHBOARD_SCORE ?: '0').toInteger() + 150
                }
            }
        }
        
        stage('🏆 Final Results & Learning') {
            steps {
                script {
                    echo "╔══════════════════════════════════════════════════════════════════════════════╗"
                    echo "║                    🏆 FINAL RESULTS & LEARNING                               ║"
                    echo "╠══════════════════════════════════════════════════════════════════════════════╣"
                    echo "║  🎯 Objective: Showcase completed CI/CD Dashboard and learning outcomes"
                    echo "║  ⏱️  Time Limit: 1 minute"
                    echo "║  🏆 Max Points: 100 points"
                    echo "║"
                    
                    // Read port from file
                    def WEBAPP_PORT = readFile('dashboard.port').trim()
                    
                    // Calculate final score and time
                    def endTime = System.currentTimeMillis()
                    def duration = (endTime - env.START_TIME.toLong()) / 1000
                    def finalScore = (env.DASHBOARD_SCORE ?: '0').toInteger()
                    
                    echo "║  🎉 CI/CD Dashboard Successfully Built!"
                    echo "║"
                    echo "║  📊 Final Results:"
                    echo "║     • Total Score: $finalScore/800 points"
                    echo "║     • Build Time: $duration seconds"
                    echo "║     • Dashboard Type: ${params.DASHBOARD_TYPE ?: 'Basic'}"
                    echo "║     • Visualization: ${params.VISUALIZATION_STYLE ?: 'Interactive'}"
                    echo "║     • Company: ${params.COMPANY_NAME ?: 'Your Company'}"
                    echo "║"
                    echo "║  🌐 Your Dashboard is Live:"
                    echo "║     • Main Interface: http://localhost:$WEBAPP_PORT"
                    echo "║     • Health Check: http://localhost:$WEBAPP_PORT/api/health"
                    echo "║     • Real-time Metrics: http://localhost:$WEBAPP_PORT/api/metrics"
                    echo "║     • Pipeline Status: http://localhost:$WEBAPP_PORT/api/pipelines"
                    echo "║     • Alert System: http://localhost:$WEBAPP_PORT/api/alerts"
                    echo "║"
                    echo "║  🎓 Learning Outcomes Achieved:"
                    echo "║     ✅ Jenkins Pipeline Creation"
                    echo "║     ✅ Web Application Development"
                    echo "║     ✅ Docker Containerization"
                    echo "║     ✅ API Design & Implementation"
                    echo "║     ✅ Real-time Data Visualization"
                    echo "║     ✅ Production Deployment Patterns"
                    echo "║     ✅ Interactive User Interface"
                    echo "║     ✅ Comprehensive Testing Strategy"
                    echo "║"
                    echo "║  🚀 Next Steps:"
                    echo "║     • Customize dashboard for your needs"
                    echo "║     • Integrate with real CI/CD tools"
                    echo "║     • Add authentication and security"
                    echo "║     • Deploy to cloud platforms"
                    echo "║     • Scale for production use"
                    echo "║"
                    echo "║  🏆 Points Earned: 100/100"
                    echo "║  ⏱️  Time Taken: 20 seconds"
                    echo "╚══════════════════════════════════════════════════════════════════════════════╝"
                    
                    // Update dashboard score
                    env.DASHBOARD_SCORE = (env.DASHBOARD_SCORE ?: '0').toInteger() + 100
                }
            }
        }
    }
    
    post {
        success {
            script {
                def endTime = System.currentTimeMillis()
                def duration = (endTime - env.START_TIME.toLong()) / 1000
                def finalScore = (env.DASHBOARD_SCORE ?: '0').toInteger()
                
                echo "╔══════════════════════════════════════════════════════════════════════════════╗"
                echo "║                    🎉 DASHBOARD BUILD SUCCESS! 🎉                             ║"
                echo "╠══════════════════════════════════════════════════════════════════════════════╣"
                echo "║  🏆 Final Score: $finalScore/800 points"
                echo "║  ⏱️  Build Time: $duration seconds"
                echo "║  🏗️  Dashboard Type: ${params.DASHBOARD_TYPE ?: 'Basic'}"
                echo "║  🎨 Visualization: ${params.VISUALIZATION_STYLE ?: 'Interactive'}"
                echo "║  🏢 Company: ${params.COMPANY_NAME ?: 'Your Company'}"
                echo "║"
                echo "║  🌐 Your CI/CD Dashboard is Live!"
                echo "║     • Access: http://localhost:\$(cat dashboard.port 2>/dev/null || echo '8081')"
                echo "║     • API Health: http://localhost:\$(cat dashboard.port 2>/dev/null || echo '8081')/api/health"
                echo "║"
                echo "║  🎓 You've Mastered:"
                echo "║     ✅ Jenkins Pipeline Development"
                echo "║     ✅ Modern Web Application Creation"
                echo "║     ✅ Docker Containerization"
                echo "║     ✅ RESTful API Design"
                echo "║     ✅ Real-time Data Visualization"
                echo "║     ✅ Production Deployment"
                echo "║"
                echo "║  🚀 Ready for Production CI/CD!"
                echo "║  💡 Continue building amazing applications!"
                echo "╚══════════════════════════════════════════════════════════════════════════════╝"
            }
        }
        failure {
            script {
                echo "╔══════════════════════════════════════════════════════════════════════════════╗"
                echo "║                    💪 BUILD FAILED - BUT DON'T GIVE UP!                      ║"
                echo "╠══════════════════════════════════════════════════════════════════════════════╣"
                echo "║  🎯 Current Score: ${env.DASHBOARD_SCORE ?: '0'}/800 points"
                echo "║  📊 Progress: ${((env.DASHBOARD_SCORE ?: '0').toInteger() / 800 * 100).intValue()}%"
                echo "║  🏗️  Dashboard Type: ${params.DASHBOARD_TYPE ?: 'Basic'}"
                echo "║  🎨 Visualization: ${params.VISUALIZATION_STYLE ?: 'Interactive'}"
                echo "║"
                echo "║  💡 Learning Opportunities:"
                echo "║     • Review the failed stage carefully"
                echo "║     • Check Docker and port availability"
                echo "║     • Try a different dashboard type"
                echo "║     • Practice the fundamentals first"
                echo "║"
                echo "║  🔧 Common Issues:"
                echo "║     • Port conflicts - try different port"
                echo "║     • Docker not running - start Docker service"
                echo "║     • Dependencies missing - check requirements"
                echo "║     • Permission issues - check file permissions"
                echo "║"
                echo "║  🚀 Keep Learning and Building!"
                echo "╚══════════════════════════════════════════════════════════════════════════════╝"
            }
        }
        always {
            script {
                echo "🧹 Cleaning up build artifacts..."
                sh '''
                    # Clean up temporary files
                    rm -f dashboard.port
                    
                    # Optional: Clean up Docker containers (uncomment if needed)
                    # docker stop ci-cd-dashboard-* 2>/dev/null || true
                    # docker rm ci-cd-dashboard-* 2>/dev/null || true
                '''
            }
        }
    }
}