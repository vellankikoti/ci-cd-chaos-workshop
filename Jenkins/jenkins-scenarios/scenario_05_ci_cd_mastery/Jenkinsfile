pipeline {
    agent any
    
    // Production-grade options
    options {
        timeout(time: 5, unit: 'MINUTES')
        timestamps()
        buildDiscarder(logRotator(numToKeepStr: '5'))
        skipDefaultCheckout()
    }
    
    // Environment variables
    environment {
        APP_NAME = 'ci-cd-dashboard'
        BUILD_TIMESTAMP = "${new Date().format('yyyyMMdd-HHmmss')}"
    }
    
    // CI/CD Dashboard parameters
    parameters {
        choice(
            name: 'DASHBOARD_TYPE',
            choices: ['Basic', 'Advanced', 'Enterprise', 'Custom'],
            description: 'Select CI/CD Dashboard complexity level'
        )
        choice(
            name: 'VISUALIZATION_STYLE',
            choices: ['Minimal', 'Interactive', '3D', 'Real-time'],
            description: 'Choose visualization style'
        )
        booleanParam(
            name: 'ENABLE_METRICS',
            defaultValue: true,
            description: 'Enable real-time metrics collection?'
        )
        booleanParam(
            name: 'ENABLE_ALERTS',
            defaultValue: true,
            description: 'Enable alert notifications?'
        )
        string(
            name: 'COMPANY_NAME',
            defaultValue: 'Your Company',
            description: 'Company name for dashboard branding'
        )
    }

    stages {
        stage('🚀 CI/CD Dashboard Setup') {
            steps {
                script {
                    echo "╔══════════════════════════════════════════════════════════════════════════════╗"
                    echo "║                    🎮 JENKINS CI/CD DASHBOARD BUILDER                        ║"
                    echo "╠══════════════════════════════════════════════════════════════════════════════╣"
                    echo "║  🎯 Building: Interactive CI/CD Dashboard Application"
                    echo "║  ⏱️  Duration: 5 minutes"
                    echo "║  🏗️  Type: ${params.DASHBOARD_TYPE}"
                    echo "║  🎨 Style: ${params.VISUALIZATION_STYLE}"
                    echo "║  🏢 Company: ${params.COMPANY_NAME}"
                    echo "║"
                    echo "║  🎮 Ready to build the ultimate CI/CD Dashboard?"
                    echo "║"
                    echo "║  🎯 Dashboard Features:"
                    echo "║     • Real-time pipeline monitoring"
                    echo "║     • Interactive build visualizations"
                    echo "║     • Live metrics and analytics"
                    echo "║     • Alert notifications system"
                    echo "║     • Customizable themes and branding"
                    echo "║"
                    echo "║  🚀 Learning Objectives:"
                    echo "║     • Master Jenkins pipeline creation"
                    echo "║     • Build interactive web applications"
                    echo "║     • Implement real-time data visualization"
                    echo "║     • Learn modern web technologies"
                    echo "║     • Create production-ready dashboards!"
                    echo "╚══════════════════════════════════════════════════════════════════════════════╝"
                    echo ""
                    echo "╔══════════════════════════════════════════════════════════════════════════════╗"
                    echo "║                    ⚙️  DASHBOARD CONFIGURATION                               ║"
                    echo "╠══════════════════════════════════════════════════════════════════════════════╣"
                    echo "║  🏗️  Dashboard Type: ${params.DASHBOARD_TYPE}"
                    echo "║  🎨 Visualization: ${params.VISUALIZATION_STYLE}"
                    echo "║  📊 Metrics: ${params.ENABLE_METRICS ? 'Enabled' : 'Disabled'}"
                    echo "║  🔔 Alerts: ${params.ENABLE_ALERTS ? 'Enabled' : 'Disabled'}"
                    echo "║  🏢 Company: ${params.COMPANY_NAME}"
                    echo "║  ⏱️  Build Time: 5 minutes"
                    echo "║  🎮 Mode: Interactive Dashboard Builder"
                    echo "╚══════════════════════════════════════════════════════════════════════════════╝"
                }
                
                checkout scm
            }
        }
        
        stage('📊 Dashboard Application Creation') {
            steps {
                script {
                    echo "╔══════════════════════════════════════════════════════════════════════════════╗"
                    echo "║                    📊 DASHBOARD APPLICATION CREATION                          ║"
                    echo "╠══════════════════════════════════════════════════════════════════════════════╣"
                    echo "║  🎯 Objective: Build interactive CI/CD Dashboard web application"
                    echo "║  ⏱️  Time Limit: 1 minute"
                    echo "║  🏆 Max Points: 200 points"
                    echo "║"
                    echo "║  🔨 Creating dashboard application files..."
                    echo "║"
                    
                    // Create dashboard.html
                    writeFile file: 'dashboard.html', text: '''<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CI/CD Dashboard - ${COMPANY_NAME}</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { 
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }
        .container { max-width: 1200px; margin: 0 auto; padding: 20px; }
        .header { 
            text-align: center; 
            color: white; 
            margin-bottom: 30px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }
        .header h1 { font-size: 2.5em; margin-bottom: 10px; }
        .header p { font-size: 1.2em; opacity: 0.9; }
        .dashboard { 
            display: grid; 
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); 
            gap: 20px; 
        }
        .card { 
            background: white; 
            border-radius: 15px; 
            padding: 25px; 
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }
        .card:hover { 
            transform: translateY(-5px); 
            box-shadow: 0 15px 40px rgba(0,0,0,0.3);
        }
        .card h3 { 
            color: #667eea; 
            margin-bottom: 15px; 
            font-size: 1.3em;
            border-bottom: 2px solid #f0f0f0;
            padding-bottom: 10px;
        }
        .metric { 
            display: flex; 
            justify-content: space-between; 
            margin: 10px 0; 
            padding: 8px 0;
            border-bottom: 1px solid #f0f0f0;
        }
        .metric:last-child { border-bottom: none; }
        .metric-label { font-weight: 500; color: #666; }
        .metric-value { 
            font-weight: bold; 
            color: #667eea;
            font-size: 1.1em;
        }
        .status { 
            display: inline-block; 
            padding: 4px 12px; 
            border-radius: 20px; 
            font-size: 0.9em; 
            font-weight: bold;
        }
        .status.success { background: #d4edda; color: #155724; }
        .status.warning { background: #fff3cd; color: #856404; }
        .status.danger { background: #f8d7da; color: #721c24; }
        .pipeline { 
            margin: 15px 0; 
            padding: 15px; 
            background: #f8f9fa; 
            border-radius: 8px;
            border-left: 4px solid #667eea;
        }
        .pipeline-name { font-weight: bold; margin-bottom: 8px; }
        .pipeline-status { margin-bottom: 5px; }
        .progress-bar { 
            width: 100%; 
            height: 8px; 
            background: #e9ecef; 
            border-radius: 4px; 
            overflow: hidden;
            margin-top: 10px;
        }
        .progress-fill { 
            height: 100%; 
            background: linear-gradient(90deg, #667eea, #764ba2); 
            transition: width 0.3s ease;
        }
        .refresh-btn { 
            background: #667eea; 
            color: white; 
            border: none; 
            padding: 12px 24px; 
            border-radius: 25px; 
            cursor: pointer; 
            font-size: 1em;
            transition: all 0.3s ease;
            margin: 20px auto;
            display: block;
        }
        .refresh-btn:hover { 
            background: #5a6fd8; 
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
        }
        .loading { 
            text-align: center; 
            color: #666; 
            font-style: italic; 
            margin: 20px 0;
        }
        @keyframes pulse { 
            0%, 100% { opacity: 1; } 
            50% { opacity: 0.5; } 
        }
        .pulse { animation: pulse 2s infinite; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🚀 CI/CD Dashboard</h1>
            <p>Real-time Pipeline Monitoring & Analytics</p>
        </div>
        
        <div class="dashboard">
            <div class="card">
                <h3>📊 Build Statistics</h3>
                <div class="metric">
                    <span class="metric-label">Total Builds</span>
                    <span class="metric-value" id="total-builds">-</span>
                </div>
                <div class="metric">
                    <span class="metric-label">Success Rate</span>
                    <span class="metric-value" id="success-rate">-</span>
                </div>
                <div class="metric">
                    <span class="metric-label">Avg Build Time</span>
                    <span class="metric-value" id="avg-build-time">-</span>
                </div>
                <div class="metric">
                    <span class="metric-label">Last Build</span>
                    <span class="metric-value" id="last-build">-</span>
                </div>
            </div>
            
            <div class="card">
                <h3>🚀 Active Pipelines</h3>
                <div id="pipelines">
                    <div class="loading">Loading pipelines...</div>
                </div>
            </div>
            
            <div class="card">
                <h3>📈 Performance Metrics</h3>
                <div class="metric">
                    <span class="metric-label">CPU Usage</span>
                    <span class="metric-value" id="cpu-usage">-</span>
                </div>
                <div class="metric">
                    <span class="metric-label">Memory Usage</span>
                    <span class="metric-value" id="memory-usage">-</span>
                </div>
                <div class="metric">
                    <span class="metric-label">Disk Usage</span>
                    <span class="metric-value" id="disk-usage">-</span>
                </div>
                <div class="metric">
                    <span class="metric-label">Network I/O</span>
                    <span class="metric-value" id="network-io">-</span>
                </div>
            </div>
            
            <div class="card">
                <h3>🔔 System Status</h3>
                <div class="metric">
                    <span class="metric-label">Dashboard Status</span>
                    <span class="status success" id="dashboard-status">Healthy</span>
                </div>
                <div class="metric">
                    <span class="metric-label">API Status</span>
                    <span class="status success" id="api-status">Online</span>
                </div>
                <div class="metric">
                    <span class="metric-label">Database</span>
                    <span class="status success" id="db-status">Connected</span>
                </div>
                <div class="metric">
                    <span class="metric-label">Last Update</span>
                    <span class="metric-value" id="last-update">-</span>
                </div>
            </div>
        </div>
        
        <button class="refresh-btn" onclick="refreshData()">🔄 Refresh Data</button>
    </div>

    <script>
        // Dashboard data management
        let dashboardData = {
            builds: { total: 0, success: 0, failed: 0, avgTime: 0 },
            pipelines: [],
            metrics: { cpu: 0, memory: 0, disk: 0, network: 0 },
            status: { dashboard: 'healthy', api: 'online', db: 'connected' }
        };

        // API endpoints
        const API_BASE = window.location.origin;

        // Fetch data from API
        async function fetchData() {
            try {
                const [health, metrics, pipelines] = await Promise.all([
                    fetch(`${API_BASE}/api/health`).then(r => r.json()),
                    fetch(`${API_BASE}/api/metrics`).then(r => r.json()),
                    fetch(`${API_BASE}/api/pipelines`).then(r => r.json())
                ]);

                dashboardData = {
                    builds: metrics.builds || { total: 0, success: 0, failed: 0, avgTime: 0 },
                    pipelines: pipelines.pipelines || [],
                    metrics: metrics.system || { cpu: 0, memory: 0, disk: 0, network: 0 },
                    status: health.status || 'healthy'
                };

                updateDashboard();
            } catch (error) {
                console.error('Error fetching data:', error);
                showError('Failed to fetch dashboard data');
            }
        }

        // Update dashboard UI
        function updateDashboard() {
            // Update build statistics
            document.getElementById('total-builds').textContent = dashboardData.builds.total;
            document.getElementById('success-rate').textContent = 
                dashboardData.builds.total > 0 ? 
                Math.round((dashboardData.builds.success / dashboardData.builds.total) * 100) + '%' : '0%';
            document.getElementById('avg-build-time').textContent = 
                Math.round(dashboardData.builds.avgTime) + 's';
            document.getElementById('last-build').textContent = 
                new Date().toLocaleTimeString();

            // Update pipelines
            const pipelinesContainer = document.getElementById('pipelines');
            if (dashboardData.pipelines.length > 0) {
                pipelinesContainer.innerHTML = dashboardData.pipelines.map(pipeline => `
                    <div class="pipeline">
                        <div class="pipeline-name">${pipeline.name}</div>
                        <div class="pipeline-status">
                            Status: <span class="status ${pipeline.status}">${pipeline.status}</span>
                        </div>
                        <div class="progress-bar">
                            <div class="progress-fill" style="width: ${pipeline.progress}%"></div>
                        </div>
                    </div>
                `).join('');
            } else {
                pipelinesContainer.innerHTML = '<div class="loading">No active pipelines</div>';
            }

            // Update performance metrics
            document.getElementById('cpu-usage').textContent = dashboardData.metrics.cpu + '%';
            document.getElementById('memory-usage').textContent = dashboardData.metrics.memory + '%';
            document.getElementById('disk-usage').textContent = dashboardData.metrics.disk + '%';
            document.getElementById('network-io').textContent = dashboardData.metrics.network + ' MB/s';

            // Update system status
            document.getElementById('last-update').textContent = new Date().toLocaleTimeString();
        }

        // Show error message
        function showError(message) {
            const pipelinesContainer = document.getElementById('pipelines');
            pipelinesContainer.innerHTML = `<div class="loading" style="color: #dc3545;">${message}</div>`;
        }

        // Refresh data
        function refreshData() {
            const btn = document.querySelector('.refresh-btn');
            btn.textContent = '🔄 Refreshing...';
            btn.disabled = true;
            
            fetchData().finally(() => {
                btn.textContent = '🔄 Refresh Data';
                btn.disabled = false;
            });
        }

        // Initialize dashboard
        document.addEventListener('DOMContentLoaded', function() {
            fetchData();
            // Auto-refresh every 30 seconds
            setInterval(fetchData, 30000);
        });
    </script>
</body>
</html>'''
                    
                    echo "║  ✅ Created dashboard.html - Interactive web application"
                    
                    // Create dashboard_api.py
                    writeFile file: 'dashboard_api.py', text: '''#!/usr/bin/env python3
"""
CI/CD Dashboard API Server
Provides real-time data for the dashboard web application
"""

from flask import Flask, jsonify, render_template_string
import os
import random
import time
from datetime import datetime, timedelta

# Initialize Flask app
app = Flask(__name__)

# Dashboard configuration from environment variables
DASHBOARD_CONFIG = {
    'dashboard_type': os.getenv('DASHBOARD_TYPE', 'Basic'),
    'visualization_style': os.getenv('VISUALIZATION_STYLE', 'Interactive'),
    'company_name': os.getenv('COMPANY_NAME', 'Your Company'),
    'metrics_enabled': os.getenv('ENABLE_METRICS', 'true').lower() == 'true',
    'alerts_enabled': os.getenv('ENABLE_ALERTS', 'true').lower() == 'true'
}

# Simulated data for demonstration
def generate_build_data():
    """Generate realistic build statistics"""
    total_builds = random.randint(150, 500)
    success_rate = random.uniform(0.75, 0.95)
    success_builds = int(total_builds * success_rate)
    failed_builds = total_builds - success_builds
    avg_time = random.uniform(45, 180)
    
    return {
        'total': total_builds,
        'success': success_builds,
        'failed': failed_builds,
        'avgTime': avg_time
    }

def generate_pipeline_data():
    """Generate realistic pipeline data"""
    pipeline_names = [
        'Frontend Build', 'Backend API', 'Database Migration', 
        'Integration Tests', 'Security Scan', 'Deployment'
    ]
    
    statuses = ['running', 'success', 'failed', 'pending']
    pipelines = []
    
    for i, name in enumerate(pipeline_names[:random.randint(2, 4)]):
        status = random.choice(statuses)
        progress = random.randint(0, 100) if status == 'running' else (100 if status == 'success' else random.randint(0, 50))
        
        pipelines.append({
            'name': name,
            'status': status,
            'progress': progress,
            'duration': random.randint(30, 300)
        })
    
    return pipelines

def generate_system_metrics():
    """Generate realistic system metrics"""
    return {
        'cpu': round(random.uniform(20, 80), 1),
        'memory': round(random.uniform(30, 85), 1),
        'disk': round(random.uniform(40, 90), 1),
        'network': round(random.uniform(10, 100), 1)
    }

@app.route('/')
def dashboard():
    """Serve the main dashboard page"""
    with open('dashboard.html', 'r') as f:
        html_content = f.read()
    
    # Replace placeholders with actual values
    html_content = html_content.replace('${COMPANY_NAME}', DASHBOARD_CONFIG['company_name'])
    
    return html_content

@app.route('/api/health')
def health():
    """Health check endpoint"""
    return jsonify({
        'status': 'healthy',
        'timestamp': datetime.now().isoformat(),
        'version': '1.0.0',
        'config': DASHBOARD_CONFIG
    })

@app.route('/api/metrics')
def metrics():
    """Metrics endpoint"""
    return jsonify({
        'builds': generate_build_data(),
        'system': generate_system_metrics(),
        'timestamp': datetime.now().isoformat()
    })

@app.route('/api/pipelines')
def pipelines():
    """Pipelines endpoint"""
    return jsonify({
        'pipelines': generate_pipeline_data(),
        'timestamp': datetime.now().isoformat()
    })

if __name__ == '__main__':
    print("🚀 Starting CI/CD Dashboard API Server...")
    print(f"📊 Dashboard Type: {DASHBOARD_CONFIG['dashboard_type']}")
    print(f"🎨 Visualization: {DASHBOARD_CONFIG['visualization_style']}")
    print(f"🏢 Company: {DASHBOARD_CONFIG['company_name']}")
    print("🌐 Server running on http://0.0.0.0:5000")
    app.run(host='0.0.0.0', port=5000, debug=False)
'''
                    
                    echo "║  ✅ Created dashboard_api.py - Flask API server"
                    
                    // Create requirements.txt
                    writeFile file: 'requirements.txt', text: '''Flask==2.3.3
Werkzeug==2.3.7
'''
                    
                    echo "║  ✅ Created requirements.txt - Python dependencies"
                    
                    // Create Dockerfile
                    writeFile file: 'Dockerfile', text: '''FROM python:3.11-slim

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \\
    curl \\
    && rm -rf /var/lib/apt/lists/*

# Copy requirements and install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy application files
COPY dashboard.html .
COPY dashboard_api.py .

# Expose port
EXPOSE 5000

# Run the application
CMD ["python", "dashboard_api.py"]
'''
                    
                    echo "║  ✅ Created Dockerfile - Container configuration"
                    
                    // Create docker-compose.yml
                    writeFile file: 'docker-compose.yml', text: '''version: '3.8'

services:
  ci-cd-dashboard:
    build: .
    ports:
      - "8081:5000"
    environment:
      - DASHBOARD_TYPE=${DASHBOARD_TYPE:-Basic}
      - VISUALIZATION_STYLE=${VISUALIZATION_STYLE:-Interactive}
      - COMPANY_NAME=${COMPANY_NAME:-Your Company}
      - ENABLE_METRICS=${ENABLE_METRICS:-true}
      - ENABLE_ALERTS=${ENABLE_ALERTS:-true}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
'''
                    
                    echo "║  ✅ Created docker-compose.yml - Easy deployment"
                    
                    // Create README.md
                    writeFile file: 'README.md', text: '''# CI/CD Dashboard

A real-time CI/CD monitoring dashboard built with Jenkins, Flask, and Docker.

## Features

- 📊 Real-time build statistics
- 🚀 Pipeline monitoring
- 📈 Performance metrics
- 🔔 Alert notifications
- 🎨 Customizable themes

## Quick Start

### Using Docker Compose
```bash
docker-compose up -d
```

### Using Docker
```bash
docker build -t ci-cd-dashboard .
docker run -p 8081:5000 ci-cd-dashboard
```

## API Endpoints

- `GET /` - Dashboard web interface
- `GET /api/health` - Health check
- `GET /api/metrics` - Build and system metrics
- `GET /api/pipelines` - Pipeline status

## Configuration

Set environment variables:
- `DASHBOARD_TYPE`: Basic, Advanced, Enterprise, Custom
- `VISUALIZATION_STYLE`: Minimal, Interactive, 3D, Real-time
- `COMPANY_NAME`: Your company name
- `ENABLE_METRICS`: true/false
- `ENABLE_ALERTS`: true/false

## Access

Open http://localhost:8081 in your browser.
'''
                    
                    echo "║  ✅ Created README.md - Documentation and instructions"
                    echo "║"
                    echo "║  🎯 Dashboard Application Created Successfully!"
                    echo "║  📁 Files Generated:"
                    echo "║     • dashboard.html - Interactive web interface"
                    echo "║     • dashboard_api.py - Flask API server"
                    echo "║     • requirements.txt - Python dependencies"
                    echo "║     • Dockerfile - Container configuration"
                    echo "║     • docker-compose.yml - Easy deployment"
                    echo "║     • README.md - Complete documentation"
                    echo "║"
                    echo "║  🏆 Points Earned: 200/200"
                    echo "║  ⏱️  Time Taken: 45 seconds"
                    echo "╚══════════════════════════════════════════════════════════════════════════════╝"
                }
            }
        }
        
        stage('🐳 Containerization & Deployment') {
            steps {
                script {
                    echo "╔══════════════════════════════════════════════════════════════════════════════╗"
                    echo "║                    🐳 CONTAINERIZATION & DEPLOYMENT                          ║"
                    echo "╠══════════════════════════════════════════════════════════════════════════════╣"
                    echo "║  🎯 Objective: Containerize and deploy the CI/CD Dashboard"
                    echo "║  ⏱️  Time Limit: 1 minute"
                    echo "║  🏆 Max Points: 200 points"
                    echo "║"
                    
                    sh '''
                        # Clean up any existing ci-cd-dashboard containers first
                        echo "║  🧹 Cleaning up existing containers..."
                        docker ps -a --filter "name=ci-cd-dashboard" --format "{{.Names}}" | xargs -r docker stop 2>/dev/null || true
                        docker ps -a --filter "name=ci-cd-dashboard" --format "{{.Names}}" | xargs -r docker rm 2>/dev/null || true

                        # Wait a moment for cleanup to complete
                        sleep 2

                        IMAGE_NAME="ci-cd-dashboard-${BUILD_NUMBER}"
                        CONTAINER_NAME="ci-cd-dashboard-${BUILD_NUMBER}"

                        # Build Docker image
                        echo "║  🔨 Building Docker image..."
                        docker build -t $IMAGE_NAME . || {
                            echo "║     ❌ Docker image build failed"
                            exit 1
                        }
                        echo "║     ✅ Docker image built successfully"

                        # Retry loop to handle TOCTTOU (Time-Of-Check-Time-Of-Use) race conditions
                        echo "║  🔄 Starting deployment with retry logic..."
                        EXTERNAL_PORT=8081
                        MAX_PORT_ATTEMPTS=50
                        PORT_ATTEMPT=0
                        DEPLOY_SUCCESS=false

                        while [ $PORT_ATTEMPT -lt $MAX_PORT_ATTEMPTS ] && [ "$DEPLOY_SUCCESS" = false ]; do
                            # Check if port is available
                            PORT_IN_USE=false

                            # Check netstat
                            if netstat -tuln 2>/dev/null | grep -q ":$EXTERNAL_PORT "; then
                                PORT_IN_USE=true
                            fi

                            # Check lsof
                            if lsof -i :$EXTERNAL_PORT 2>/dev/null | grep -q LISTEN; then
                                PORT_IN_USE=true
                            fi

                            # Check Docker containers
                            if docker ps --format "{{.Ports}}" 2>/dev/null | grep -q ":$EXTERNAL_PORT->"; then
                                PORT_IN_USE=true
                            fi

                            if [ "$PORT_IN_USE" = true ]; then
                                echo "║     • Port $EXTERNAL_PORT in use, skipping..."
                                EXTERNAL_PORT=$((EXTERNAL_PORT + 1))
                                PORT_ATTEMPT=$((PORT_ATTEMPT + 1))
                                continue
                            fi

                            # Port appears available, try to start container immediately
                            echo "║     • Attempting deployment on port $EXTERNAL_PORT (attempt $((PORT_ATTEMPT + 1)))..."

                            if docker run -d \\
                                --name $CONTAINER_NAME \\
                                -p $EXTERNAL_PORT:5000 \\
                                -e DASHBOARD_TYPE="${DASHBOARD_TYPE}" \\
                                -e VISUALIZATION_STYLE="${VISUALIZATION_STYLE}" \\
                                -e COMPANY_NAME="${COMPANY_NAME}" \\
                                $IMAGE_NAME > /dev/null 2>&1; then

                                # Container started successfully
                                echo "║     ✅ Container started on port $EXTERNAL_PORT"
                                DEPLOY_SUCCESS=true
                                break
                            else
                                # Container failed to start (likely port conflict race condition)
                                echo "║     ⚠️  Port $EXTERNAL_PORT taken during deployment, trying next..."

                                # Clean up failed container attempt
                                docker rm -f $CONTAINER_NAME 2>/dev/null || true

                                # Try next port
                                EXTERNAL_PORT=$((EXTERNAL_PORT + 1))
                                PORT_ATTEMPT=$((PORT_ATTEMPT + 1))
                            fi
                        done

                        # Check if deployment succeeded
                        if [ "$DEPLOY_SUCCESS" = false ]; then
                            echo "║     ❌ Failed to deploy after $PORT_ATTEMPT attempts"
                            echo "║     • Tried ports 8081-$EXTERNAL_PORT"
                            echo "║     • All ports were in use or conflicts occurred"
                            exit 1
                        fi

                        # Wait for container to fully start
                        echo "║     • Waiting for container to fully start..."
                        sleep 3

                        # Verify container is actually running
                        if docker ps | grep -q $CONTAINER_NAME; then
                            echo "║     ✅ Container deployed: $CONTAINER_NAME"
                            echo "║     ✅ Access URL: http://localhost:$EXTERNAL_PORT"
                            echo "║     ✅ Port mapping: $EXTERNAL_PORT:5000"

                            # Save port for testing stage
                            echo $EXTERNAL_PORT > dashboard.port
                        else
                            echo "║     ❌ Container failed to start properly"
                            echo "║     • Container logs:"
                            docker logs $CONTAINER_NAME 2>&1 || true
                            exit 1
                        fi

                        echo "╚══════════════════════════════════════════════════════════════════════════════╝"
                    '''
                }
            }
        }
        
        stage('📊 Testing & Validation') {
            steps {
                script {
                    echo "╔══════════════════════════════════════════════════════════════════════════════╗"
                    echo "║                    📊 TESTING & VALIDATION                                   ║"
                    echo "╠══════════════════════════════════════════════════════════════════════════════╣"
                    echo "║  🎯 Objective: Test and validate the CI/CD Dashboard"
                    echo "║  ⏱️  Time Limit: 1 minute"
                    echo "║  🏆 Max Points: 150 points"
                    echo "║"
                    
                    // Read port from file
                    def WEBAPP_PORT = readFile('dashboard.port').trim()
                    
                    echo "║  🧪 Running comprehensive tests..."
                    echo "║"
                    echo "║     🔍 Using port: $WEBAPP_PORT"
                    
                    // Test 1: Health Check API
                    echo "║  🔍 Test 1: Health Check API"
                    sh """
                        echo "║     Testing health endpoint..."
                        curl -f http://localhost:$WEBAPP_PORT/api/health
                        echo "║     ✅ Health check passed"
                    """
                    
                    // Test 2: Metrics API
                    echo "║  📊 Test 2: Metrics API"
                    sh """
                        echo "║     Testing metrics endpoint..."
                        curl -f http://localhost:$WEBAPP_PORT/api/metrics
                        echo "║     ✅ Metrics API working"
                    """
                    
                    // Test 3: Pipelines API
                    echo "║  🚀 Test 3: Pipelines API"
                    sh """
                        echo "║     Testing pipelines endpoint..."
                        curl -f http://localhost:$WEBAPP_PORT/api/pipelines
                        echo "║     ✅ Pipelines API working"
                    """
                    
                    // Test 4: Main Dashboard
                    echo "║  🌐 Test 4: Main Dashboard"
                    sh """
                        echo "║     Testing main dashboard..."
                        curl -f http://localhost:$WEBAPP_PORT/
                        echo "║     ✅ Main dashboard accessible"
                    """
                    
                    // Test 5: Container Status
                    echo "║  🐳 Test 5: Container Status"
                    sh """
                        echo "║     Checking container health..."
                        docker ps | grep ci-cd-dashboard-${BUILD_NUMBER}
                        echo "║     ✅ Container is running"
                    """
                    
                    echo "║"
                    echo "║  🎯 All Tests Passed!"
                    echo "║  📊 Test Results:"
                    echo "║     • Health Check API: ✅ PASS"
                    echo "║     • Metrics API: ✅ PASS"
                    echo "║     • Pipelines API: ✅ PASS"
                    echo "║     • Main Dashboard: ✅ PASS"
                    echo "║     • Container Status: ✅ PASS"
                    echo "║"
                    echo "║  🏆 Points Earned: 150/150"
                    echo "║  ⏱️  Time Taken: 30 seconds"
                    echo "╚══════════════════════════════════════════════════════════════════════════════╝"
                }
            }
        }
        
        stage('🎯 Interactive Demo & Learning') {
            steps {
                script {
                    def WEBAPP_PORT = readFile('dashboard.port').trim()
                    
                    echo "╔══════════════════════════════════════════════════════════════════════════════╗"
                    echo "║                    🎯 INTERACTIVE DEMO & LEARNING                            ║"
                    echo "╠══════════════════════════════════════════════════════════════════════════════╣"
                    echo "║  🎯 Objective: Explore the CI/CD Dashboard features"
                    echo "║  ⏱️  Time Limit: 1 minute"
                    echo "║  🏆 Max Points: 150 points"
                    echo "║"
                    echo "║  🌐 Dashboard Access:"
                    echo "║     • URL: http://localhost:$WEBAPP_PORT"
                    echo "║     • Type: ${params.DASHBOARD_TYPE}"
                    echo "║     • Style: ${params.VISUALIZATION_STYLE}"
                    echo "║     • Company: ${params.COMPANY_NAME}"
                    echo "║"
                    echo "║  🎮 Interactive Features:"
                    echo "║     • Real-time data updates every 30 seconds"
                    echo "║     • Click 'Refresh Data' to update manually"
                    echo "║     • Hover over cards for animations"
                    echo "║     • Responsive design works on mobile"
                    echo "║"
                    echo "║  📚 Learning Points:"
                    echo "║     • Modern web development (HTML5, CSS3, JavaScript)"
                    echo "║     • RESTful API design with Flask"
                    echo "║     • Docker containerization best practices"
                    echo "║     • Jenkins pipeline automation"
                    echo "║     • Real-time data visualization"
                    echo "║"
                    echo "║  🏆 Points Earned: 150/150"
                    echo "║  ⏱️  Time Taken: 30 seconds"
                    echo "╚══════════════════════════════════════════════════════════════════════════════╝"
                }
            }
        }
        
        stage('🏆 Final Results & Learning') {
            steps {
                script {
                    def WEBAPP_PORT = readFile('dashboard.port').trim()
                    
                    echo "╔══════════════════════════════════════════════════════════════════════════════╗"
                    echo "║                    🏆 FINAL RESULTS & LEARNING                               ║"
                    echo "╠══════════════════════════════════════════════════════════════════════════════╣"
                    echo "║  🎯 Dashboard Builder Complete!"
                    echo "║  📊 Total Score: 700/700 points"
                    echo "║  ⏱️  Total Time: 5 minutes"
                    echo "║"
                    echo "║  🌐 Your CI/CD Dashboard:"
                    echo "║     • URL: http://localhost:$WEBAPP_PORT"
                    echo "║     • Type: ${params.DASHBOARD_TYPE}"
                    echo "║     • Style: ${params.VISUALIZATION_STYLE}"
                    echo "║     • Company: ${params.COMPANY_NAME}"
                    echo "║"
                    echo "║  🎓 What You've Mastered:"
                    echo "║     ✅ Jenkins Pipeline Development"
                    echo "║     ✅ Web Application Creation"
                    echo "║     ✅ Flask API Development"
                    echo "║     ✅ Docker Containerization"
                    echo "║     ✅ Real-time Data Visualization"
                    echo "║     ✅ Production Deployment Patterns"
                    echo "║"
                    echo "║  🚀 Next Steps:"
                    echo "║     • Integrate with real CI/CD tools"
                    echo "║     • Add authentication and security"
                    echo "║     • Deploy to Kubernetes"
                    echo "║     • Add more advanced features"
                    echo "║"
                    echo "║  🎉 Congratulations! You've built a production-ready CI/CD Dashboard!"
                    echo "╚══════════════════════════════════════════════════════════════════════════════╝"
                }
            }
        }
    }
    
    post {
        always {
            script {
                echo ""
                echo "╔══════════════════════════════════════════════════════════════════════════════╗"
                echo "║                    🎉 CI/CD DASHBOARD BUILDER COMPLETED!                      ║"
                echo "╠══════════════════════════════════════════════════════════════════════════════╣"
                echo "║  🎯 Dashboard Configuration:"
                echo "║     • Type: ${params.DASHBOARD_TYPE}"
                echo "║     • Style: ${params.VISUALIZATION_STYLE}"
                echo "║     • Company: ${params.COMPANY_NAME}"
                echo "║     • Metrics: ${params.ENABLE_METRICS ? 'Enabled' : 'Disabled'}"
                echo "║     • Alerts: ${params.ENABLE_ALERTS ? 'Enabled' : 'Disabled'}"
                echo "║"
                echo "║  🌐 Application Access:"
                echo "║     • Web Dashboard: Available during pipeline execution"
                echo "║     • API Endpoints: Health, Metrics, Pipelines"
                echo "║     • Documentation: README.md generated"
                echo "║     • Docker Compose: Ready for easy deployment"
                echo "║"
                echo "║  🚀 Ready for Production:"
                echo "║     • Scenario 6: Advanced Jenkins Features"
                echo "║     • Kubernetes deployment scenarios"
                echo "║     • Real-world CI/CD integration"
                echo "║     • Enterprise-grade monitoring"
                echo "╚══════════════════════════════════════════════════════════════════════════════╝"
                
                // Cleanup dynamically created files
                sh 'rm -f dashboard.html dashboard_api.py requirements.txt Dockerfile docker-compose.yml README.md dashboard.port || true'
                // Stop and remove container
                sh 'docker ps -a --filter "name=ci-cd-dashboard" --format "{{.ID}}" | xargs -r docker stop || true'
                sh 'docker ps -a --filter "name=ci-cd-dashboard" --format "{{.ID}}" | xargs -r docker rm || true'
            }
        }
    }
}