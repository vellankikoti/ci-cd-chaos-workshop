pipeline {
    agent any
    
    // Production-grade options - Jenkins best practices
    options {
        timeout(time: 5, unit: 'MINUTES')           // 5-minute challenge!
        timestamps()                                  // Every log line timestamped
        buildDiscarder(logRotator(numToKeepStr: '5')) // Keep only last 5 builds
        skipDefaultCheckout()                         // We'll checkout manually
    }
    
    // Environment variables for the challenge
    environment {
        CHALLENGE_NAME = 'CI/CD Mastery Challenge'
        BUILD_TIMESTAMP = "${new Date().format('yyyyMMdd-HHmmss')}"
        CHALLENGE_DURATION = '5 minutes'
        MAX_SCORE = 1000
    }
    
    // Challenge parameters - attendees can customize
    parameters {
        choice(
            name: 'SKILL_LEVEL',
            choices: ['Beginner', 'Intermediate', 'Advanced', 'Expert'],
            description: 'Select your CI/CD skill level'
        )
        choice(
            name: 'CHALLENGE_TYPE',
            choices: ['Speed Run', 'Quality Focus', 'Security First', 'Performance Optimized'],
            description: 'Choose your challenge approach'
        )
        booleanParam(
            name: 'ENABLE_NOTIFICATIONS',
            defaultValue: true,
            description: 'Enable real-time challenge notifications?'
        )
        booleanParam(
            name: 'SHOW_LEADERBOARD',
            defaultValue: true,
            description: 'Display live leaderboard?'
        )
    }
    
    stages {
        stage('üöÄ Challenge Setup') {
            steps {
                script {
                    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
                    echo "‚ïë                    üéÆ JENKINS CI/CD MASTERY CHALLENGE                       ‚ïë"
                    echo "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£"
                    echo "‚ïë  üéØ Challenge: ${CHALLENGE_NAME}"
                    echo "‚ïë  ‚è±Ô∏è  Duration: ${CHALLENGE_DURATION}"
                    echo "‚ïë  üèÜ Max Score: ${MAX_SCORE} points"
                    echo "‚ïë  üë§ Skill Level: ${SKILL_LEVEL}"
                    echo "‚ïë  üé≤ Challenge Type: ${CHALLENGE_TYPE}"
                    echo "‚ïë"
                    echo "‚ïë  üéÆ Ready to become a CI/CD Master?"
                    echo "‚ïë"
                    echo "‚ïë  üéØ Learning Objectives:"
                    echo "‚ïë     ‚Ä¢ Master Jenkins pipeline fundamentals"
                    echo "‚ïë     ‚Ä¢ Implement production CI/CD patterns"
                    echo "‚ïë     ‚Ä¢ Experience gamified learning"
                    echo "‚ïë     ‚Ä¢ Compete for the highest score"
                    echo "‚ïë     ‚Ä¢ Build real-world skills"
                    echo "‚ïë"
                    echo "‚ïë  üöÄ Let's begin your CI/CD mastery journey!"
                    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
                    
                    // Initialize challenge scoring
                    env.CHALLENGE_SCORE = 0
                    env.START_TIME = System.currentTimeMillis()
                    
                    // Show challenge parameters
                    echo ""
                    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
                    echo "‚ïë                    ‚öôÔ∏è  CHALLENGE CONFIGURATION                              ‚ïë"
                    echo "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£"
                    echo "‚ïë  üéØ Skill Level: ${SKILL_LEVEL}"
                    echo "‚ïë  üé≤ Challenge Type: ${CHALLENGE_TYPE}"
                    echo "‚ïë  üîî Notifications: ${ENABLE_NOTIFICATIONS ? 'Enabled' : 'Disabled'}"
                    echo "‚ïë  üèÜ Leaderboard: ${SHOW_LEADERBOARD ? 'Enabled' : 'Disabled'}"
                    echo "‚ïë  ‚è±Ô∏è  Time Limit: 5 minutes"
                    echo "‚ïë  üéÆ Mode: Interactive Gamified Learning"
                    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
                }
            }
        }
        
        stage('üìã Code Quality Gate') {
            steps {
                script {
                    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
                    echo "‚ïë                    üìã CHALLENGE 1: CODE QUALITY GATE                        ‚ïë"
                    echo "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£"
                    echo "‚ïë  üéØ Objective: Implement automated quality checks"
                    echo "‚ïë  ‚è±Ô∏è  Time Limit: 1 minute"
                    echo "‚ïë  üèÜ Max Points: ${SKILL_LEVEL == 'Expert' ? '200' : SKILL_LEVEL == 'Advanced' ? '150' : SKILL_LEVEL == 'Intermediate' ? '100' : '50'}"
                    echo "‚ïë"
                    
                    // Checkout code
                    checkout scm
                    
                    // Simulate code quality checks
                    echo "‚ïë  üîç Running code quality analysis..."
                    echo "‚ïë"
                    
                    // Simulate different quality checks based on skill level
                    def qualityChecks = [
                        'Beginner': [
                            ['Syntax Check', 'Validating code syntax', 25],
                            ['Basic Linting', 'Checking code style', 25]
                        ],
                        'Intermediate': [
                            ['Syntax Check', 'Validating code syntax', 30],
                            ['Linting', 'Checking code style and standards', 30],
                            ['Code Coverage', 'Analyzing test coverage', 40]
                        ],
                        'Advanced': [
                            ['Syntax Check', 'Validating code syntax', 40],
                            ['Linting', 'Checking code style and standards', 40],
                            ['Code Coverage', 'Analyzing test coverage', 40],
                            ['Security Scan', 'Detecting security vulnerabilities', 30]
                        ],
                        'Expert': [
                            ['Syntax Check', 'Validating code syntax', 40],
                            ['Linting', 'Checking code style and standards', 40],
                            ['Code Coverage', 'Analyzing test coverage', 40],
                            ['Security Scan', 'Detecting security vulnerabilities', 40],
                            ['Performance Analysis', 'Optimizing code performance', 40]
                        ]
                    ]
                    
                    def checks = qualityChecks[SKILL_LEVEL] ?: qualityChecks['Beginner']
                    def totalPoints = 0
                    
                    checks.each { check ->
                        def checkName = check[0]
                        def checkDesc = check[1]
                        def checkPoints = check[2]
                        
                        echo "‚ïë  üîç ${checkName}..."
                        echo "‚ïë     ${checkDesc}"
                        
                        // Simulate processing with progress
                        for (int i = 1; i <= 3; i++) {
                            echo "‚ïë     ${'‚ñà' * i}${'‚ñë' * (3 - i)} Processing... (${i * 33}%)"
                            sleep(0.5)
                        }
                        
                        echo "‚ïë     ‚úÖ ${checkName} - PASSED (+${checkPoints} points)"
                        totalPoints += checkPoints
                        echo "‚ïë"
                    }
                    
                    env.CHALLENGE_SCORE = env.CHALLENGE_SCORE.toInteger() + totalPoints
                    
                    echo "‚ïë  üèÜ Quality Gate Complete!"
                    echo "‚ïë     Points Earned: +${totalPoints}"
                    echo "‚ïë     Total Score: ${env.CHALLENGE_SCORE}/${MAX_SCORE}"
                    echo "‚ïë     Progress: ${(env.CHALLENGE_SCORE.toInteger() / MAX_SCORE.toInteger() * 100).intValue()}%"
                    echo "‚ïë"
                    echo "‚ïë  üéØ Next: Testing Strategy Challenge"
                    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
                }
            }
        }
        
        stage('üß™ Testing Strategy') {
            steps {
                script {
                    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
                    echo "‚ïë                    üß™ CHALLENGE 2: TESTING STRATEGY                         ‚ïë"
                    echo "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£"
                    echo "‚ïë  üéØ Objective: Implement comprehensive testing approach"
                    echo "‚ïë  ‚è±Ô∏è  Time Limit: 1 minute"
                    echo "‚ïë  üé≤ Strategy: ${CHALLENGE_TYPE}"
                    echo "‚ïë  üèÜ Max Points: ${CHALLENGE_TYPE == 'Quality Focus' ? '250' : CHALLENGE_TYPE == 'Security First' ? '200' : CHALLENGE_TYPE == 'Performance Optimized' ? '180' : '120'}"
                    echo "‚ïë"
                    
                    // Simulate different testing strategies based on challenge type
                    def testStrategies = [
                        'Speed Run': [
                            ['Unit Tests', 'Fast, isolated component tests', 60],
                            ['Smoke Tests', 'Basic functionality verification', 60]
                        ],
                        'Quality Focus': [
                            ['Unit Tests', 'Fast, isolated component tests', 80],
                            ['Integration Tests', 'Component interaction testing', 80],
                            ['E2E Tests', 'End-to-end user journey testing', 90]
                        ],
                        'Security First': [
                            ['Unit Tests', 'Fast, isolated component tests', 70],
                            ['Security Tests', 'Authentication and authorization', 70],
                            ['Vulnerability Scans', 'Dependency and code security', 60]
                        ],
                        'Performance Optimized': [
                            ['Unit Tests', 'Fast, isolated component tests', 60],
                            ['Load Tests', 'High-traffic performance testing', 70],
                            ['Performance Tests', 'Response time and resource usage', 50]
                        ]
                    ]
                    
                    def tests = testStrategies[CHALLENGE_TYPE] ?: testStrategies['Speed Run']
                    def totalPoints = 0
                    
                    echo "‚ïë  üß™ Executing ${CHALLENGE_TYPE} testing strategy..."
                    echo "‚ïë"
                    
                    tests.each { test ->
                        def testName = test[0]
                        def testDesc = test[1]
                        def testPoints = test[2]
                        
                        echo "‚ïë  üß™ Running ${testName}..."
                        echo "‚ïë     ${testDesc}"
                        
                        // Simulate test execution with progress
                        for (int i = 1; i <= 4; i++) {
                            echo "‚ïë     ${'‚ñà' * i}${'‚ñë' * (4 - i)} Executing... (${i * 25}%)"
                            sleep(0.4)
                        }
                        
                        echo "‚ïë     ‚úÖ ${testName} - PASSED (+${testPoints} points)"
                        totalPoints += testPoints
                        echo "‚ïë"
                    }
                    
                    env.CHALLENGE_SCORE = env.CHALLENGE_SCORE.toInteger() + totalPoints
                    
                    echo "‚ïë  üèÜ Testing Strategy Complete!"
                    echo "‚ïë     Points Earned: +${totalPoints}"
                    echo "‚ïë     Total Score: ${env.CHALLENGE_SCORE}/${MAX_SCORE}"
                    echo "‚ïë     Progress: ${(env.CHALLENGE_SCORE.toInteger() / MAX_SCORE.toInteger() * 100).intValue()}%"
                    echo "‚ïë"
                    echo "‚ïë  üéØ Next: Containerization Challenge"
                    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
                }
            }
        }
        
        stage('üê≥ Containerization') {
            steps {
                script {
                    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
                    echo "‚ïë                    üê≥ CHALLENGE 3: CONTAINERIZATION                          ‚ïë"
                    echo "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£"
                    echo "‚ïë  üéØ Objective: Containerize application with Docker best practices"
                    echo "‚ïë  ‚è±Ô∏è  Time Limit: 1 minute"
                    echo "‚ïë  üèÜ Max Points: 150"
                    echo "‚ïë"
                    
                    // Create a simple Dockerfile dynamically
                    writeFile file: 'Dockerfile', text: '''FROM python:3.11-slim
WORKDIR /app
COPY . .
RUN pip install --no-cache-dir -r requirements.txt
EXPOSE 8080
CMD ["python", "app.py"]'''
                    
                    // Create a simple requirements.txt
                    writeFile file: 'requirements.txt', text: 'flask==2.3.3\nrequests==2.31.0'
                    
                    // Create a simple app.py
                    writeFile file: 'app.py', text: '''from flask import Flask
app = Flask(__name__)

@app.route('/')
def hello():
    return "üöÄ CI/CD Mastery Challenge - Containerized!"

@app.route('/health')
def health():
    return "‚úÖ Healthy", 200

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8080)'''
                    
                    echo "‚ïë  üì¶ Building Docker image..."
                    echo "‚ïë"
                    
                    // Simulate Docker build with detailed steps
                    def buildSteps = [
                        ['Analyzing Dockerfile', 'Validating Docker configuration', 30],
                        ['Downloading base image', 'Pulling python:3.11-slim', 30],
                        ['Installing dependencies', 'Running pip install', 30],
                        ['Copying application code', 'Adding source files to container', 30],
                        ['Setting up container', 'Configuring runtime environment', 30]
                    ]
                    
                    def totalPoints = 0
                    buildSteps.each { step ->
                        def stepName = step[0]
                        def stepDesc = step[1]
                        def stepPoints = step[2]
                        
                        echo "‚ïë  üî® ${stepName}..."
                        echo "‚ïë     ${stepDesc}"
                        
                        // Simulate build progress
                        for (int i = 1; i <= 3; i++) {
                            echo "‚ïë     ${'‚ñà' * i}${'‚ñë' * (3 - i)} Building... (${i * 33}%)"
                            sleep(0.5)
                        }
                        
                        echo "‚ïë     ‚úÖ ${stepName} - COMPLETE (+${stepPoints} points)"
                        totalPoints += stepPoints
                        echo "‚ïë"
                    }
                    
                    echo "‚ïë  üê≥ Docker image built successfully!"
                    echo "‚ïë     Image: ci-cd-challenge:latest"
                    echo "‚ïë     Size: ~150MB (optimized)"
                    echo "‚ïë     Layers: 5 (efficient)"
                    echo "‚ïë"
                    
                    env.CHALLENGE_SCORE = env.CHALLENGE_SCORE.toInteger() + totalPoints
                    
                    echo "‚ïë  üèÜ Containerization Complete!"
                    echo "‚ïë     Points Earned: +${totalPoints}"
                    echo "‚ïë     Total Score: ${env.CHALLENGE_SCORE}/${MAX_SCORE}"
                    echo "‚ïë     Progress: ${(env.CHALLENGE_SCORE.toInteger() / MAX_SCORE.toInteger() * 100).intValue()}%"
                    echo "‚ïë"
                    echo "‚ïë  üéØ Next: Deployment Strategy Challenge"
                    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
                }
            }
        }
        
        stage('üöÄ Deployment Strategy') {
            steps {
                script {
                    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
                    echo "‚ïë                    üöÄ CHALLENGE 4: DEPLOYMENT STRATEGY                       ‚ïë"
                    echo "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£"
                    echo "‚ïë  üéØ Objective: Deploy application with production strategy"
                    echo "‚ïë  ‚è±Ô∏è  Time Limit: 1 minute"
                    echo "‚ïë  üé≤ Strategy: ${CHALLENGE_TYPE}"
                    echo "‚ïë"
                    
                    // Simulate different deployment strategies
                    def deploymentStrategies = [
                        'Speed Run': ['Direct Deployment', 'Fast, simple deployment', 100],
                        'Quality Focus': ['Blue-Green Deployment', 'Zero-downtime with instant rollback', 200],
                        'Security First': ['Canary Deployment', 'Gradual rollout with monitoring', 180],
                        'Performance Optimized': ['Rolling Update', 'Smooth updates with load balancing', 160]
                    ]
                    
                    def strategy = deploymentStrategies[CHALLENGE_TYPE] ?: deploymentStrategies['Speed Run']
                    def strategyName = strategy[0]
                    def strategyDesc = strategy[1]
                    def strategyPoints = strategy[2]
                    
                    echo "‚ïë  üéØ Selected Strategy: ${strategyName}"
                    echo "‚ïë     ${strategyDesc}"
                    echo "‚ïë  üèÜ Max Points: ${strategyPoints}"
                    echo "‚ïë"
                    
                    // Simulate deployment steps
                    def deploySteps = [
                        ['Pre-deployment validation', 'Checking environment readiness', 40],
                        ['Environment preparation', 'Setting up deployment infrastructure', 40],
                        ['Application deployment', 'Deploying new version', 40],
                        ['Health checks', 'Verifying application health', 40],
                        ['Traffic routing', 'Switching traffic to new version', 40]
                    ]
                    
                    def totalPoints = 0
                    deploySteps.each { step ->
                        def stepName = step[0]
                        def stepDesc = step[1]
                        def stepPoints = step[2]
                        
                        echo "‚ïë  üöÄ ${stepName}..."
                        echo "‚ïë     ${stepDesc}"
                        
                        // Simulate deployment progress
                        for (int i = 1; i <= 4; i++) {
                            echo "‚ïë     ${'‚ñà' * i}${'‚ñë' * (4 - i)} Deploying... (${i * 25}%)"
                            sleep(0.4)
                        }
                        
                        echo "‚ïë     ‚úÖ ${stepName} - COMPLETE (+${stepPoints} points)"
                        totalPoints += stepPoints
                        echo "‚ïë"
                    }
                    
                    echo "‚ïë  üöÄ Deployment completed successfully!"
                    echo "‚ïë     Strategy: ${strategyName}"
                    echo "‚ïë     Status: ‚úÖ Healthy"
                    echo "‚ïë     Uptime: 99.9%"
                    echo "‚ïë     Response Time: <100ms"
                    echo "‚ïë"
                    
                    env.CHALLENGE_SCORE = env.CHALLENGE_SCORE.toInteger() + totalPoints
                    
                    echo "‚ïë  üèÜ Deployment Strategy Complete!"
                    echo "‚ïë     Points Earned: +${totalPoints}"
                    echo "‚ïë     Total Score: ${env.CHALLENGE_SCORE}/${MAX_SCORE}"
                    echo "‚ïë     Progress: ${(env.CHALLENGE_SCORE.toInteger() / MAX_SCORE.toInteger() * 100).intValue()}%"
                    echo "‚ïë"
                    echo "‚ïë  üéØ Next: Monitoring & Observability Challenge"
                    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
                }
            }
        }
        
        stage('üìä Monitoring & Observability') {
            steps {
                script {
                    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
                    echo "‚ïë                    üìä CHALLENGE 5: MONITORING & OBSERVABILITY                ‚ïë"
                    echo "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£"
                    echo "‚ïë  üéØ Objective: Set up comprehensive monitoring and observability"
                    echo "‚ïë  ‚è±Ô∏è  Time Limit: 1 minute"
                    echo "‚ïë  üèÜ Max Points: 100"
                    echo "‚ïë"
                    
                    // Simulate monitoring setup
                    def monitoringChecks = [
                        ['Application Health Monitoring', 'Setting up health check endpoints', 20],
                        ['Performance Metrics Collection', 'Configuring metrics gathering', 20],
                        ['Log Aggregation Setup', 'Centralizing log collection', 20],
                        ['Alert Configuration', 'Setting up proactive alerts', 20],
                        ['Dashboard Creation', 'Building monitoring dashboards', 20]
                    ]
                    
                    def totalPoints = 0
                    monitoringChecks.each { check ->
                        def checkName = check[0]
                        def checkDesc = check[1]
                        def checkPoints = check[2]
                        
                        echo "‚ïë  üìä Setting up ${checkName}..."
                        echo "‚ïë     ${checkDesc}"
                        
                        // Simulate setup progress
                        for (int i = 1; i <= 3; i++) {
                            echo "‚ïë     ${'‚ñà' * i}${'‚ñë' * (3 - i)} Configuring... (${i * 33}%)"
                            sleep(0.4)
                        }
                        
                        echo "‚ïë     ‚úÖ ${checkName} - ACTIVE (+${checkPoints} points)"
                        totalPoints += checkPoints
                        echo "‚ïë"
                    }
                    
                    // Simulate real-time metrics
                    echo "‚ïë  üìà Live Metrics Dashboard:"
                    echo "‚ïë     ‚Ä¢ CPU Usage: 45% (Normal)"
                    echo "‚ïë     ‚Ä¢ Memory Usage: 67% (Normal)"
                    echo "‚ïë     ‚Ä¢ Response Time: 120ms (Excellent)"
                    echo "‚ïë     ‚Ä¢ Error Rate: 0.1% (Very Low)"
                    echo "‚ïë     ‚Ä¢ Uptime: 99.9% (Excellent)"
                    echo "‚ïë     ‚Ä¢ Active Connections: 1,247"
                    echo "‚ïë     ‚Ä¢ Requests/min: 2,340"
                    echo "‚ïë"
                    
                    echo "‚ïë  üö® Alert Status:"
                    echo "‚ïë     ‚Ä¢ Critical: 0"
                    echo "‚ïë     ‚Ä¢ Warning: 0"
                    echo "‚ïë     ‚Ä¢ Info: 3"
                    echo "‚ïë     ‚Ä¢ All systems operational ‚úÖ"
                    echo "‚ïë"
                    
                    env.CHALLENGE_SCORE = env.CHALLENGE_SCORE.toInteger() + totalPoints
                    
                    echo "‚ïë  üèÜ Monitoring & Observability Complete!"
                    echo "‚ïë     Points Earned: +${totalPoints}"
                    echo "‚ïë     Total Score: ${env.CHALLENGE_SCORE}/${MAX_SCORE}"
                    echo "‚ïë     Progress: ${(env.CHALLENGE_SCORE.toInteger() / MAX_SCORE.toInteger() * 100).intValue()}%"
                    echo "‚ïë"
                    echo "‚ïë  üéØ All Challenges Complete! üéâ"
                    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
                }
            }
        }
    }
    
    post {
        success {
            script {
                def endTime = System.currentTimeMillis()
                def duration = (endTime - env.START_TIME.toLong()) / 1000
                
                echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
                echo "‚ïë                    üéâ CHALLENGE COMPLETED! üéâ                                ‚ïë"
                echo "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£"
                echo "‚ïë  üèÜ Final Score: ${env.CHALLENGE_SCORE}/${MAX_SCORE} points"
                echo "‚ïë  ‚è±Ô∏è  Completion Time: ${duration} seconds"
                echo "‚ïë  üéØ Skill Level: ${SKILL_LEVEL}"
                echo "‚ïë  üé≤ Challenge Type: ${CHALLENGE_TYPE}"
                echo "‚ïë  üìä Completion Rate: ${(env.CHALLENGE_SCORE.toInteger() / MAX_SCORE.toInteger() * 100).intValue()}%"
                echo "‚ïë"
                
                // Calculate performance rating
                def performanceRating = "ü•â Bronze"
                def ratingDescription = "Good effort! Keep practicing to improve."
                if (env.CHALLENGE_SCORE.toInteger() >= 900) {
                    performanceRating = "üèÜ Legendary"
                    ratingDescription = "Outstanding! You're a CI/CD master!"
                } else if (env.CHALLENGE_SCORE.toInteger() >= 800) {
                    performanceRating = "ü•á Gold"
                    ratingDescription = "Excellent! You've mastered CI/CD!"
                } else if (env.CHALLENGE_SCORE.toInteger() >= 600) {
                    performanceRating = "ü•à Silver"
                    ratingDescription = "Great job! You're well on your way!"
                }
                
                echo "‚ïë  üèÖ Performance Rating: ${performanceRating}"
                echo "‚ïë  üí¨ ${ratingDescription}"
                echo "‚ïë"
                
                // Show achievements
                echo "‚ïë  üéñÔ∏è  Achievements Unlocked:"
                if (env.CHALLENGE_SCORE.toInteger() >= 100) {
                    echo "‚ïë     ‚úÖ First Steps - Completed your first challenge"
                }
                if (env.CHALLENGE_SCORE.toInteger() >= 300) {
                    echo "‚ïë     ‚úÖ Quality Guardian - Mastered code quality"
                }
                if (env.CHALLENGE_SCORE.toInteger() >= 500) {
                    echo "‚ïë     ‚úÖ Test Master - Conquered testing strategies"
                }
                if (env.CHALLENGE_SCORE.toInteger() >= 700) {
                    echo "‚ïë     ‚úÖ Container Expert - Mastered containerization"
                }
                if (env.CHALLENGE_SCORE.toInteger() >= 800) {
                    echo "‚ïë     ‚úÖ Deployment Pro - Conquered deployment strategies"
                }
                if (env.CHALLENGE_SCORE.toInteger() >= 900) {
                    echo "‚ïë     ‚úÖ Monitoring Master - Achieved full observability"
                }
                echo "‚ïë"
                
                echo "‚ïë  üéÆ You've mastered Jenkins CI/CD!"
                echo "‚ïë  üöÄ Ready for production deployments!"
                echo "‚ïë  üí° Continue learning with advanced Jenkins features!"
                echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
                
                // Show leaderboard if enabled
                if (params.SHOW_LEADERBOARD) {
                    echo ""
                    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
                    echo "‚ïë                    üèÜ LIVE LEADERBOARD                                       ‚ïë"
                    echo "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£"
                    echo "‚ïë  #1 ü•á Alex Chen     - 950 points (Expert, Performance Optimized)"
                    echo "‚ïë  #2 ü•à Sarah Kim     - 875 points (Advanced, Quality Focus)"
                    echo "‚ïë  #3 ü•â Mike Johnson  - 820 points (Intermediate, Security First)"
                    echo "‚ïë  #4    You           - ${env.CHALLENGE_SCORE} points (${SKILL_LEVEL}, ${CHALLENGE_TYPE})"
                    echo "‚ïë  #5    Emma Wilson   - 750 points (Beginner, Speed Run)"
                    echo "‚ïë"
                    echo "‚ïë  üéØ Challenge Statistics:"
                    echo "‚ïë     ‚Ä¢ Total Participants: 1,247"
                    echo "‚ïë     ‚Ä¢ Average Score: 720 points"
                    echo "‚ïë     ‚Ä¢ Your Rank: Top ${env.CHALLENGE_SCORE.toInteger() >= 800 ? '10%' : env.CHALLENGE_SCORE.toInteger() >= 600 ? '25%' : '50%'}"
                    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
                }
                
                // Show next steps
                echo ""
                echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
                echo "‚ïë                    üöÄ NEXT STEPS & LEARNING PATH                              ‚ïë"
                echo "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£"
                echo "‚ïë  üìö Continue Your CI/CD Journey:"
                echo "‚ïë     ‚Ä¢ Explore Jenkins plugins and integrations"
                echo "‚ïë     ‚Ä¢ Learn advanced pipeline patterns"
                echo "‚ïë     ‚Ä¢ Implement real-world CI/CD pipelines"
                echo "‚ïë     ‚Ä¢ Join the Jenkins community"
                echo "‚ïë     ‚Ä¢ Contribute to open source projects"
                echo "‚ïë"
                echo "‚ïë  üéØ Recommended Next Scenarios:"
                echo "‚ïë     ‚Ä¢ Kubernetes Deployment Scenarios"
                echo "‚ïë     ‚Ä¢ Advanced Jenkins Patterns"
                echo "‚ïë     ‚Ä¢ Production CI/CD Strategies"
                echo "‚ïë     ‚Ä¢ Security and Compliance"
                echo "‚ïë"
                echo "‚ïë  üí° Pro Tip: Practice makes perfect! Try different skill levels"
                echo "‚ïë     and challenge types to master all aspects of CI/CD."
                echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
            }
        }
        
        failure {
            script {
                echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
                echo "‚ïë                    üí™ CHALLENGE FAILED - BUT DON'T GIVE UP!                  ‚ïë"
                echo "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£"
                echo "‚ïë  üéØ Current Score: ${env.CHALLENGE_SCORE}/${MAX_SCORE} points"
                echo "‚ïë  üìä Progress: ${(env.CHALLENGE_SCORE.toInteger() / MAX_SCORE.toInteger() * 100).intValue()}%"
                echo "‚ïë  üé≤ Challenge Type: ${CHALLENGE_TYPE}"
                echo "‚ïë  üë§ Skill Level: ${SKILL_LEVEL}"
                echo "‚ïë"
                echo "‚ïë  üí° Learning Opportunities:"
                echo "‚ïë     ‚Ä¢ Review the failed stage carefully"
                echo "‚ïë     ‚Ä¢ Try a different skill level or challenge type"
                echo "‚ïë     ‚Ä¢ Practice the fundamentals first"
                echo "‚ïë     ‚Ä¢ Ask for help from the community"
                echo "‚ïë"
                echo "‚ïë  üîÑ Retry the challenge to improve your score!"
                echo "‚ïë  üìö Learn from the failure and come back stronger!"
                echo "‚ïë  üöÄ Every master was once a beginner!"
                echo "‚ïë"
                echo "‚ïë  üéñÔ∏è  Remember: Failure is just feedback!"
                echo "‚ïë  üí™ You've got this! Try again! üí™"
                echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
            }
        }
        
        always {
            script {
                // Cleanup
                echo "üßπ Cleaning up challenge artifacts..."
                sh 'rm -f Dockerfile requirements.txt app.py 2>/dev/null || true'
            }
        }
    }
}
