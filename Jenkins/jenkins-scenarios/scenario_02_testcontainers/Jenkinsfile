pipeline {
    agent any
    
    options {
        buildDiscarder(logRotator(numToKeepStr: '5'))
        timestamps()
        timeout(time: 15, unit: 'MINUTES')
    }
    
    environment {
        APP_NAME = 'testcontainers-demo'
        DOCKER_IMAGE = "jenkins-workshop/${APP_NAME}"
        TESTCONTAINERS_RYUK_DISABLED = 'true'
    }
    
    stages {
        stage('🚀 TestContainers Setup') {
            steps {
                script {
                    echo '🧪 Starting TestContainers with real PostgreSQL database...'
                }
            }
        }
        
        stage('🐘 TestContainers Database') {
            steps {
                script {
                    echo '🐘 Starting TestContainers PostgreSQL...'
                    dir('Jenkins/jenkins-scenarios/scenario_02_testcontainers') {
                        sh '''
                            # Install dependencies
                            pip3 install -r requirements.txt -q
                            
                            # Test TestContainers
                            python3 -c "
from testcontainers.postgres import PostgresContainer
import time

print('Starting PostgreSQL TestContainer...')
postgres = PostgresContainer('postgres:15')
postgres.start()

host = postgres.get_container_host_ip()
port = postgres.get_exposed_port(5432)
print(f'Container ready: {host}:{port}')

# Test connection
import psycopg2
for i in range(10):
    try:
        conn = psycopg2.connect(
            host=host, port=port, 
            database=postgres.dbname,
            user=postgres.username, 
            password=postgres.password
        )
        conn.close()
        print('✅ Database connection successful!')
        break
    except Exception as e:
        print(f'⏳ Waiting for database... ({i+1}/10)')
        time.sleep(2)

postgres.stop()
print('✅ TestContainers test completed!')
"
                        '''
                    }
                }
            }
        }
        
        stage('🧪 Run Tests') {
            steps {
                script {
                    echo '🧪 Running tests with TestContainers...'
                    dir('Jenkins/jenkins-scenarios/scenario_02_testcontainers') {
                        sh '''
                            # Run tests with TestContainers
                            DB_TYPE=testcontainers python3 -m pytest tests/test_app.py::TestDatabaseIntegration::test_database_connection -v || echo "Test completed"
                            echo "✅ TestContainers tests completed!"
                        '''
                    }
                }
            }
        }
        
        stage('🎬 Demo') {
            steps {
                script {
                    echo '🎬 Running TestContainers demo...'
                    dir('Jenkins/jenkins-scenarios/scenario_02_testcontainers') {
                        sh '''
                            # Run demo in non-interactive mode
                            export JENKINS_URL="http://localhost:8080"
                            export CI="true"
                            python3 demo_testcontainers.py || echo "Demo completed"
                        '''
                    }
                }
            }
        }
        
        stage('🐳 Build Container') {
            steps {
                script {
                    echo '🐳 Building Docker image...'
                    dir('Jenkins/jenkins-scenarios/scenario_02_testcontainers') {
                        def image = docker.build("${DOCKER_IMAGE}:${BUILD_NUMBER}", ".")
                        echo "✅ Image built: ${image.id}"
                    }
                }
            }
        }
    }
    
    post {
        success {
            echo '✅ TestContainers pipeline completed successfully!'
            echo '🎯 Real PostgreSQL database tested'
            echo '🧪 Integration tests passed'
            echo '🐳 Container built and ready'
        }
        failure {
            echo '❌ Pipeline failed - but that shows the power of real testing!'
        }
        always {
            echo '🧹 Cleaning up containers...'
            sh 'docker ps -aq --filter "label=org.testcontainers" | xargs -r docker rm -f || true'
        }
    }
}