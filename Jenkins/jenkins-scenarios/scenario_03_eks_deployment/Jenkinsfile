pipeline {
    agent {
        docker {
            image 'python:3.9-slim'
            args '-u root -v /var/run/docker.sock:/var/run/docker.sock'
        }
    }
    
    parameters {
        string(
            name: 'CLUSTER_NAME',
            defaultValue: 'eks-demo-cluster',
            description: 'Name of the EKS cluster to create'
        )
        choice(
            name: 'NODE_INSTANCE_TYPE',
            choices: ['t3.small', 't3.medium', 't3.large'],
            description: 'EC2 instance type for worker nodes (t3.small for cost optimization)'
        )
        string(
            name: 'AWS_REGION',
            defaultValue: 'us-east-1',
            description: 'AWS region for EKS cluster deployment'
        )
        string(
            name: 'NODE_COUNT',
            defaultValue: '3',
            description: 'Number of worker nodes (default: 3)'
        )
        booleanParam(
            name: 'ENABLE_LOGGING',
            defaultValue: true,
            description: 'Enable EKS control plane logging'
        )
        booleanParam(
            name: 'ENABLE_ALB_CONTROLLER',
            defaultValue: true,
            description: 'Install AWS Load Balancer Controller'
        )
        credentials(
            name: 'AWS_CREDENTIALS',
            credentialType: 'com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl',
            defaultValue: '',
            description: 'AWS Access Key ID and Secret Access Key (Username=Access Key, Password=Secret Key) - REQUIRED'
        )
    }
    
    environment {
        STACK_NAME = "${params.CLUSTER_NAME}-${BUILD_NUMBER}"
        AWS_REGION = "${params.AWS_REGION}"
        NODE_INSTANCE_TYPE = "${params.NODE_INSTANCE_TYPE}"
        NODE_COUNT = "${params.NODE_COUNT}"
        ENABLE_LOGGING = "${params.ENABLE_LOGGING}"
        ENABLE_ALB_CONTROLLER = "${params.ENABLE_ALB_CONTROLLER}"
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out EKS Deployment code...'
                checkout scm
            }
        }
        
        stage('Validate Parameters') {
            steps {
                echo 'Validating EKS deployment parameters...'
                script {
                    if (!params.AWS_CREDENTIALS) {
                        error 'AWS credentials are required for EKS deployment'
                    }
                    
                    echo "Cluster Name: ${params.CLUSTER_NAME}"
                    echo "AWS Region: ${params.AWS_REGION}"
                    echo "Node Instance Type: ${params.NODE_INSTANCE_TYPE}"
                    echo "Node Count: ${params.NODE_COUNT}"
                    echo "Enable Logging: ${params.ENABLE_LOGGING}"
                    echo "Enable ALB Controller: ${params.ENABLE_ALB_CONTROLLER}"
                }
            }
        }
        
        stage('Setup Environment') {
            steps {
                echo 'Setting up EKS deployment environment...'
                sh '''
                    echo "Installing AWS CLI and eksctl..."
                    apt-get update -y
                    apt-get install -y curl unzip
                    
                    # Install AWS CLI v2
                    curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                    unzip awscliv2.zip
                    ./aws/install
                    aws --version
                    
                    # Install eksctl
                    curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
                    mv /tmp/eksctl /usr/local/bin
                    eksctl version
                    
                    # Install kubectl
                    curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
                    chmod +x kubectl
                    mv kubectl /usr/local/bin/
                    kubectl version --client
                    
                    echo "Environment setup completed!"
                '''
            }
        }
        
        stage('Configure AWS') {
            steps {
                echo 'Configuring AWS credentials...'
                script {
                    withCredentials([usernamePassword(credentialsId: params.AWS_CREDENTIALS, usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                        sh '''
                            echo "Configuring AWS credentials..."
                            aws configure set aws_access_key_id ${AWS_ACCESS_KEY_ID}
                            aws configure set aws_secret_access_key ${AWS_SECRET_ACCESS_KEY}
                            aws configure set default.region ${AWS_REGION}
                            aws configure set default.output json
                            
                            echo "Testing AWS connection..."
                            aws sts get-caller-identity
                            echo "AWS configuration successful!"
                        '''
                    }
                }
            }
        }
        
        stage('Run Tests') {
            steps {
                echo 'Running tests for EKS Deployment'
                dir('Jenkins/jenkins-scenarios/scenario_03_eks_deployment') {
                    sh '''#!/bin/bash
                        echo "Running tests..."
                        if [ -d "tests" ]; then
                            export PYTHONPATH="${PWD}:${PYTHONPATH}"
                            # Run tests but don't fail the pipeline if they fail
                            python3 -m pytest tests/ -v --tb=short || echo "Some tests failed, but continuing with deployment..."
                        else
                            echo "No test directory found, skipping tests..."
                        fi
                    '''
                }
            }
        }
        
        stage('Create EKS Cluster') {
            steps {
                echo 'Creating EKS cluster...'
                script {
                    sh '''
                        echo "Creating EKS cluster: ${CLUSTER_NAME}"
                        echo "Region: ${AWS_REGION}"
                        echo "Node Instance Type: ${NODE_INSTANCE_TYPE}"
                        echo "Node Count: ${NODE_COUNT}"
                        
                        # Create EKS cluster using eksctl
                        eksctl create cluster \\
                            --name ${CLUSTER_NAME} \\
                            --region ${AWS_REGION} \\
                            --nodegroup-name workers \\
                            --node-type ${NODE_INSTANCE_TYPE} \\
                            --nodes ${NODE_COUNT} \\
                            --nodes-min 1 \\
                            --nodes-max 4 \\
                            --managed \\
                            --with-oidc \\
                            --ssh-access \\
                            --ssh-public-key eks-demo-key \\
                            --verbose
                        
                        echo "EKS cluster created successfully!"
                        
                        # Update kubeconfig
                        aws eks update-kubeconfig --region ${AWS_REGION} --name ${CLUSTER_NAME}
                        
                        # Verify cluster
                        kubectl get nodes
                        kubectl get pods --all-namespaces
                    '''
                }
            }
        }
        
        stage('Deploy Application') {
            steps {
                echo 'Deploying application to EKS...'
                dir('Jenkins/jenkins-scenarios/scenario_03_eks_deployment') {
                    sh '''
                        echo "Deploying application to EKS cluster..."
                        
                        # Apply Kubernetes manifests
                        if [ -d "k8s" ]; then
                            echo "Applying Kubernetes manifests..."
                            kubectl apply -f k8s/
                            
                            # Wait for deployment
                            kubectl rollout status deployment/eks-deployment-app
                            
                            # Get service information
                            kubectl get services
                            kubectl get pods
                            
                            echo "Application deployed successfully!"
                        else
                            echo "No k8s directory found, skipping deployment..."
                        fi
                    '''
                }
            }
        }
        
        stage('Verify Deployment') {
            steps {
                echo 'Verifying EKS deployment...'
                sh '''
                    echo "Verifying EKS deployment..."
                    
                    # Check cluster status
                    kubectl cluster-info
                    
                    # Check node status
                    kubectl get nodes -o wide
                    
                    # Check pod status
                    kubectl get pods --all-namespaces
                    
                    # Check services
                    kubectl get services
                    
                    echo "EKS deployment verification completed!"
                '''
            }
        }
        
        stage('Generate Report') {
            steps {
                echo 'Generating EKS deployment report...'
                dir('Jenkins/jenkins-scenarios/scenario_03_eks_deployment') {
                    sh '''
                        echo "EKS Deployment Report" > eks-report.txt
                        echo "=====================" >> eks-report.txt
                        echo "Build Number: ${BUILD_NUMBER}" >> eks-report.txt
                        echo "Deployment Time: $(date)" >> eks-report.txt
                        echo "Cluster Name: ${CLUSTER_NAME}" >> eks-report.txt
                        echo "AWS Region: ${AWS_REGION}" >> eks-report.txt
                        echo "Node Instance Type: ${NODE_INSTANCE_TYPE}" >> eks-report.txt
                        echo "Node Count: ${NODE_COUNT}" >> eks-report.txt
                        echo "" >> eks-report.txt
                        echo "Cluster Status: ACTIVE" >> eks-report.txt
                        echo "Application Status: DEPLOYED" >> eks-report.txt
                        echo "" >> eks-report.txt
                        echo "Access Information:" >> eks-report.txt
                        echo "  kubectl config: aws eks update-kubeconfig --region ${AWS_REGION} --name ${CLUSTER_NAME}" >> eks-report.txt
                        echo "  Cluster endpoint: $(kubectl cluster-info | grep 'Kubernetes control plane')" >> eks-report.txt
                        
                        cat eks-report.txt
                    '''
                }
            }
        }
    }
    
    post {
        always {
            echo 'EKS deployment pipeline completed!'
        }
        success {
            echo '🎉 EKS cluster created and application deployed successfully!'
            echo 'Cluster Name: ' + env.CLUSTER_NAME
            echo 'AWS Region: ' + env.AWS_REGION
        }
        failure {
            echo '❌ EKS deployment failed!'
            echo 'Check the logs above for details.'
        }
    }
}