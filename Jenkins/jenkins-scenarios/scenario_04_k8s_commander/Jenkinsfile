pipeline {
    agent any
    
    options {
        timeout(time: 20, unit: 'MINUTES')
        timestamps()
        retry(2)
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }
    
    parameters {
        choice(
            name: 'K8S_CONCEPT',
            choices: ['Pods', 'Services', 'Deployments', 'ConfigMaps', 'Secrets', 'Ingress', 'All Concepts'],
            description: 'Kubernetes concept to explore'
        )
        choice(
            name: 'LEARNING_LEVEL',
            choices: ['Beginner', 'Intermediate', 'Advanced'],
            description: 'Learning complexity level'
        )
        booleanParam(
            name: 'INTERACTIVE_DEMO',
            defaultValue: true,
            description: 'Enable interactive demonstrations'
        )
        booleanParam(
            name: 'HANDS_ON_LAB',
            defaultValue: true,
            description: 'Enable hands-on lab exercises'
        )
        string(
            name: 'NAMESPACE',
            defaultValue: 'k8s-learning',
            description: 'Kubernetes namespace for exercises'
        )
    }
    
    environment {
        K8S_VERSION = '1.28'
        DOCKER_REGISTRY = 'docker.io'
        LEARNING_PROGRESS = '0'
        ACHIEVEMENTS = ''
        CURRENT_CONCEPT = "${params.K8S_CONCEPT}"
        LEARNING_LEVEL = "${params.LEARNING_LEVEL}"
    }

    stages {
        stage('🚀 K8s Commander Launch') {
            steps {
                script {
                    echo "🚀 Welcome to K8s Commander - Your Kubernetes Learning Journey!"
                    echo ""
                    echo "╔══════════════════════════════════════════════════════════════════════════════╗"
                    echo "║                        🎯 K8S COMMANDER LAUNCH                              ║"
                    echo "╠══════════════════════════════════════════════════════════════════════════════╣"
                    echo "║  🎓 Learning Journey: Jenkins → Kubernetes Transition"
                    echo "║  📚 Concept Focus: ${params.K8S_CONCEPT}"
                    echo "║  🎯 Learning Level: ${params.LEARNING_LEVEL}"
                    echo "║  🧪 Interactive Demo: ${params.INTERACTIVE_DEMO ? 'Enabled' : 'Disabled'}"
                    echo "║  🔬 Hands-on Lab: ${params.HANDS_ON_LAB ? 'Enabled' : 'Disabled'}"
                    echo "║  📦 Namespace: ${params.NAMESPACE}"
                    echo "║  🏷️  K8s Version: ${env.K8S_VERSION}"
                    echo "╚══════════════════════════════════════════════════════════════════════════════╝"
                    
                    // Initialize learning progress
                    env.LEARNING_PROGRESS = '0'
                    env.ACHIEVEMENTS = '🚀 K8s Commander Started'
                }
            }
        }
        
        stage('📚 Kubernetes Concepts Overview') {
            steps {
                script {
                    echo "📚 Exploring Kubernetes Concepts through Jenkins..."
                    echo ""
                    echo "╔══════════════════════════════════════════════════════════════════════════════╗"
                    echo "║                    📚 KUBERNETES CONCEPTS OVERVIEW                           ║"
                    echo "╠══════════════════════════════════════════════════════════════════════════════╣"
                    
                    // Dynamic concept explanation based on selection
                    def conceptExplanations = [
                        'Pods': [
                            '🎯 What are Pods?',
                            '• Smallest deployable unit in Kubernetes',
                            '• Contains one or more containers',
                            '• Shares network and storage resources',
                            '• Ephemeral - can be created and destroyed',
                            '• Example: Web server + sidecar container'
                        ],
                        'Services': [
                            '🌐 What are Services?',
                            '• Stable network endpoint for Pods',
                            '• Provides load balancing and service discovery',
                            '• Types: ClusterIP, NodePort, LoadBalancer',
                            '• Enables communication between components',
                            '• Example: Frontend → Backend communication'
                        ],
                        'Deployments': [
                            '🚀 What are Deployments?',
                            '• Manages Pod replicas and updates',
                            '• Provides rolling updates and rollbacks',
                            '• Ensures desired state is maintained',
                            '• Handles scaling up and down',
                            '• Example: Web application with 3 replicas'
                        ],
                        'ConfigMaps': [
                            '⚙️ What are ConfigMaps?',
                            '• Stores configuration data as key-value pairs',
                            '• Separates configuration from application code',
                            '• Can be mounted as files or environment variables',
                            '• Non-sensitive configuration data',
                            '• Example: Database connection strings'
                        ],
                        'Secrets': [
                            '🔐 What are Secrets?',
                            '• Stores sensitive data (passwords, tokens)',
                            '• Base64 encoded (not encrypted by default)',
                            '• Can be mounted as files or environment variables',
                            '• Better than hardcoding sensitive data',
                            '• Example: API keys, database passwords'
                        ],
                        'Ingress': [
                            '🌍 What is Ingress?',
                            '• Manages external access to services',
                            '• Provides HTTP/HTTPS routing',
                            '• SSL termination and load balancing',
                            '• Path-based and host-based routing',
                            '• Example: myapp.com/api → backend service'
                        ]
                    ]
                    
                    def selectedConcept = params.K8S_CONCEPT
                    if (selectedConcept == 'All Concepts') {
                        conceptExplanations.each { concept, explanation ->
                            echo "║"
                            echo "║  ${concept}:"
                            explanation.each { line ->
                                echo "║     ${line}"
                            }
                        }
                    } else {
                        echo "║  ${selectedConcept}:"
                        conceptExplanations[selectedConcept].each { line ->
                            echo "║     ${line}"
                        }
                    }
                    
                    echo "╚══════════════════════════════════════════════════════════════════════════════╝"
                    
                    // Update progress
                    env.LEARNING_PROGRESS = '20'
                    env.ACHIEVEMENTS += ', 📚 Concepts Learned'
                }
            }
        }
        
        stage('🎮 Interactive K8s Demo') {
            when {
                expression { params.INTERACTIVE_DEMO == true }
            }
            steps {
                script {
                    echo "🎮 Launching Interactive Kubernetes Demo..."
                    echo ""
                    echo "╔══════════════════════════════════════════════════════════════════════════════╗"
                    echo "║                    🎮 INTERACTIVE K8S DEMO                                  ║"
                    echo "╠══════════════════════════════════════════════════════════════════════════════╣"
                    
                    // Create interactive demo based on concept
                        sh '''
                        echo "║  🎯 Interactive Demo: ${CURRENT_CONCEPT}"
                        echo "║  📊 Learning Level: ${LEARNING_LEVEL}"
                        echo "║"
                        echo "║  🚀 Simulating Kubernetes operations..."
                        
                        # Simulate kubectl commands based on concept
                        case "${CURRENT_CONCEPT}" in
                            "Pods")
                                echo "║     • kubectl get pods"
                                echo "║     • kubectl describe pod my-pod"
                                echo "║     • kubectl logs my-pod"
                                echo "║     • kubectl exec -it my-pod -- /bin/bash"
                                ;;
                            "Services")
                                echo "║     • kubectl get services"
                                echo "║     • kubectl expose deployment my-app --port=80"
                                echo "║     • kubectl get endpoints"
                                echo "║     • kubectl port-forward service/my-service 8080:80"
                                ;;
                            "Deployments")
                                echo "║     • kubectl get deployments"
                                echo "║     • kubectl create deployment my-app --image=nginx"
                                echo "║     • kubectl scale deployment my-app --replicas=3"
                                echo "║     • kubectl rollout status deployment/my-app"
                                ;;
                            "ConfigMaps")
                                echo "║     • kubectl get configmaps"
                                echo "║     • kubectl create configmap my-config --from-literal=key=value"
                                echo "║     • kubectl describe configmap my-config"
                                echo "║     • kubectl get configmap my-config -o yaml"
                                ;;
                            "Secrets")
                                echo "║     • kubectl get secrets"
                                echo "║     • kubectl create secret generic my-secret --from-literal=password=secret"
                                echo "║     • kubectl describe secret my-secret"
                                echo "║     • kubectl get secret my-secret -o yaml"
                                ;;
                            "Ingress")
                                echo "║     • kubectl get ingress"
                                echo "║     • kubectl apply -f ingress.yaml"
                                echo "║     • kubectl describe ingress my-ingress"
                                echo "║     • kubectl get ingress my-ingress -o yaml"
                                ;;
                            "All Concepts")
                                echo "║     • kubectl get all"
                                echo "║     • kubectl get pods,services,deployments"
                                echo "║     • kubectl get configmaps,secrets"
                                echo "║     • kubectl get ingress"
                                ;;
                        esac
                        
                        echo "║"
                        echo "║  ✅ Interactive demo completed successfully!"
                        echo "║  💡 These commands would work in a real Kubernetes cluster"
                    '''
                    
                    echo "╚══════════════════════════════════════════════════════════════════════════════╝"
                    
                    // Update progress
                    env.LEARNING_PROGRESS = '40'
                    env.ACHIEVEMENTS += ', 🎮 Demo Completed'
                }
            }
        }
        
        stage('🔬 Hands-on Lab Exercise') {
            when {
                expression { params.HANDS_ON_LAB == true }
            }
            steps {
                script {
                    echo "🔬 Starting Hands-on Lab Exercise..."
                    echo ""
                    echo "╔══════════════════════════════════════════════════════════════════════════════╗"
                    echo "║                    🔬 HANDS-ON LAB EXERCISE                                 ║"
                    echo "╠══════════════════════════════════════════════════════════════════════════════╣"
                    
                    // Create lab exercise files
                        sh '''
                        echo "║  🎯 Lab Exercise: ${CURRENT_CONCEPT} Practice"
                        echo "║  📦 Namespace: ${NAMESPACE}"
                        echo "║"
                        echo "║  📝 Creating lab exercise files..."
                        
                        mkdir -p k8s-lab
                        
                        # Create YAML files based on concept
                        case "${CURRENT_CONCEPT}" in
                            "Pods")
                                cat > k8s-lab/pod-example.yaml << 'EOF'
apiVersion: v1
kind: Pod
metadata:
  name: nginx-pod
  labels:
    app: nginx
spec:
  containers:
  - name: nginx
    image: nginx:latest
    ports:
    - containerPort: 80
EOF
                                echo "║     • Created pod-example.yaml"
                                ;;
                            "Services")
                                cat > k8s-lab/service-example.yaml << 'EOF'
apiVersion: v1
kind: Service
metadata:
  name: nginx-service
spec:
  selector:
    app: nginx
  ports:
  - port: 80
    targetPort: 80
  type: ClusterIP
EOF
                                echo "║     • Created service-example.yaml"
                                ;;
                            "Deployments")
                                cat > k8s-lab/deployment-example.yaml << 'EOF'
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:latest
        ports:
        - containerPort: 80
EOF
                                echo "║     • Created deployment-example.yaml"
                                ;;
                            "ConfigMaps")
                                cat > k8s-lab/configmap-example.yaml << 'EOF'
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
data:
  database_url: "mysql://localhost:3306/mydb"
  debug_mode: "true"
  max_connections: "100"
EOF
                                echo "║     • Created configmap-example.yaml"
                                ;;
                            "Secrets")
                                cat > k8s-lab/secret-example.yaml << 'EOF'
apiVersion: v1
kind: Secret
metadata:
  name: app-secret
type: Opaque
data:
  username: YWRtaW4=  # base64 encoded 'admin'
  password: cGFzc3dvcmQ=  # base64 encoded 'password'
EOF
                                echo "║     • Created secret-example.yaml"
                                ;;
                            "Ingress")
                                cat > k8s-lab/ingress-example.yaml << 'EOF'
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: app-ingress
spec:
  rules:
  - host: myapp.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: nginx-service
            port:
              number: 80
EOF
                                echo "║     • Created ingress-example.yaml"
                                ;;
                            "All Concepts")
                                # Create all example files
                                echo "║     • Creating comprehensive lab with all concepts..."
                                echo "║     • This would include Pods, Services, Deployments,"
                                echo "║     • ConfigMaps, Secrets, and Ingress examples"
                                ;;
                        esac
                        
                        echo "║"
                        echo "║  📋 Lab Instructions:"
                        echo "║     1. Review the generated YAML files"
                        echo "║     2. Understand the structure and fields"
                        echo "║     3. Try applying them to a K8s cluster:"
                        echo "║        kubectl apply -f k8s-lab/"
                        echo "║     4. Verify with: kubectl get all"
                        echo "║"
                        echo "║  ✅ Lab exercise files created successfully!"
                    '''
                    
                    echo "╚══════════════════════════════════════════════════════════════════════════════╝"
                    
                    // Update progress
                    env.LEARNING_PROGRESS = '60'
                    env.ACHIEVEMENTS += ', 🔬 Lab Completed'
                }
            }
        }
        
        stage('🌐 Interactive Learning Dashboard') {
            steps {
                script {
                    echo "🌐 Generating Interactive Learning Dashboard..."
                    echo ""
                    echo "╔══════════════════════════════════════════════════════════════════════════════╗"
                    echo "║                🌐 INTERACTIVE LEARNING DASHBOARD                           ║"
                    echo "╠══════════════════════════════════════════════════════════════════════════════╣"
                    
                    // Find available port starting from 8081
                        sh '''
                        echo "║  🎯 Creating interactive learning dashboard..."
                        mkdir -p dashboard
                        
                        # Use Flask default port 5000 (avoiding Jenkins on 8080)
                        DASHBOARD_PORT=5000
                        while netstat -tuln 2>/dev/null | grep -q ":$DASHBOARD_PORT " || docker ps --format "{{.Ports}}" 2>/dev/null | grep -q ":$DASHBOARD_PORT"; do
                            DASHBOARD_PORT=$((DASHBOARD_PORT + 1))
                            if [ $DASHBOARD_PORT -gt 5010 ]; then
                                echo "║  ❌ No available ports found (5000-5010)"
                                exit 1
                            fi
                        done
                        
                        echo "║  🌐 Using port: $DASHBOARD_PORT"
                        
                        # Create simple HTML dashboard directly
                        cat > dashboard/index.html << 'HTML_EOF'
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>K8s Commander - Learning Dashboard</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
            padding: 50px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            margin: 0;
        }
        .container {
            max-width: 1000px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.1);
            padding: 30px;
            border-radius: 15px;
            backdrop-filter: blur(10px);
        }
        h1 { font-size: 3em; margin-bottom: 20px; }
        .status { font-size: 1.2em; margin: 10px 0; }
        .info { background: rgba(255, 255, 255, 0.2); padding: 15px; border-radius: 10px; margin: 20px 0; }
        .grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin: 20px 0; }
        .card { background: rgba(255, 255, 255, 0.15); padding: 20px; border-radius: 10px; }
        .achievement { display: inline-block; margin: 5px; padding: 5px 10px; background: #4CAF50; color: white; border-radius: 15px; font-size: 0.9em; }
    </style>
</head>
<body>
    <div class="container">
        <h1>🚀 K8s Commander Dashboard</h1>
        <div class="status">✅ Jenkins Pipeline: Working!</div>
        <div class="status">✅ Dashboard: Active</div>
        
        <div class="grid">
            <div class="card">
                <h3>🎯 Current Focus</h3>
                <p><strong>Concept:</strong> Pods</p>
                <p><strong>Level:</strong> Beginner</p>
                <p><strong>Namespace:</strong> k8s-learning</p>
                <p><strong>K8s Version:</strong> 1.28</p>
            </div>
            
            <div class="card">
                <h3>🏆 Achievements</h3>
                <span class="achievement">🚀 K8s Commander Started</span>
                <span class="achievement">📚 Concepts Learned</span>
                <span class="achievement">🎮 Demo Completed</span>
                <span class="achievement">🔬 Lab Completed</span>
                <span class="achievement">🌐 Dashboard Created</span>
                <span class="achievement">🎓 Mastery Achieved</span>
            </div>
            
            <div class="card">
                <h3>📚 Learning Path</h3>
                <p>✅ Kubernetes Concepts Overview</p>
                <p>✅ Interactive Demo</p>
                <p>✅ Hands-on Lab</p>
                <p>🔄 Learning Dashboard</p>
                <p>⏳ Next: Advanced K8s Patterns</p>
            </div>
            
            <div class="card">
                <h3>🎮 Interactive Features</h3>
                <p><strong>Demo Mode:</strong> ✅ Enabled</p>
                <p><strong>Lab Mode:</strong> ✅ Enabled</p>
                <p><strong>Real-time Updates:</strong> ✅ Active</p>
            </div>
            
            <div class="card">
                <h3>📊 Live Metrics</h3>
                <p><strong>Current Time:</strong> <span id="currentTime"></span></p>
                <p><strong>Learning Duration:</strong> Active</p>
                <p><strong>Pipeline Status:</strong> ✅ Running</p>
            </div>
            
            <div class="card">
                <h3>🌐 Access Information</h3>
                <p><strong>Port:</strong> <span id="port"></span></p>
                <p><strong>Status:</strong> ✅ Running</p>
                <p><strong>Server:</strong> Python HTTP Server</p>
            </div>
        </div>
    </div>
    
    <script>
        // Update time every second
        function updateTime() {
            const now = new Date();
            document.getElementById('currentTime').textContent = now.toLocaleTimeString();
        }
        
        // Update port from URL
        function updatePort() {
            const port = window.location.port || '5000';
            document.getElementById('port').textContent = port;
        }
        
        // Initialize
        updateTime();
        updatePort();
        setInterval(updateTime, 1000);
    </script>
</body>
</html>
HTML_EOF


                        echo "║  🚀 Starting K8s Commander dashboard..."
                        echo "║     • Interactive dashboard created"
                        echo "║     • Real-time progress tracking enabled"
                        echo "║     • Achievement system active"
                        echo "║"
                        echo "║  🌐 Dashboard Features:"
                        echo "║     • Live progress tracking"
                        echo "║     • Achievement badges"
                        echo "║     • Learning path visualization"
                        echo "║     • Interactive concept exploration"
                        echo "║     • Real-time updates"
                        
                        # Start simple HTTP server
                        echo "║  🚀 Starting web server on port $DASHBOARD_PORT..."
                        cd dashboard
                        
                        
                        # Kill any existing Flask process and start simple HTTP server
                        kill $WEB_SERVER_PID 2>/dev/null || true
                        sleep 1
                        
                        echo "║  🔄 Starting simple Python HTTP server..."
                        
                        # Create a simple test file to verify server works
                        echo "Dashboard is working! Server started on port $DASHBOARD_PORT" > test.txt
                        
                        nohup python3 -m http.server $DASHBOARD_PORT --bind 0.0.0.0 > ../dashboard.log 2>&1 &
                        WEB_SERVER_PID=$!
                        echo $WEB_SERVER_PID > ../dashboard.pid
                        
                        # Show what files were created
                        echo "║  📁 Files created in dashboard directory:"
                        ls -la dashboard/ | while read line; do echo "║     $line"; done
                        
                        # Verify the server started
                        sleep 3
                        if ps -p $WEB_SERVER_PID > /dev/null 2>&1; then
                            echo "║  ✅ Python HTTP server started successfully (PID: $WEB_SERVER_PID)"
                            # Test if server responds
                            sleep 2
                            if curl -s http://localhost:$DASHBOARD_PORT/ > /dev/null 2>&1; then
                                echo "║  ✅ HTTP server is responding to requests"
                                echo "║  🌐 Dashboard accessible at: http://localhost:$DASHBOARD_PORT/"
                            else
                                echo "║  ⚠️  HTTP server started but not responding to requests"
                                echo "║  🔍 Checking server logs:"
                                cat ../dashboard.log | head -10 | while read line; do echo "║     $line"; done
                            fi
                        else
                            echo "║  ❌ HTTP server failed to start"
                            echo "║  🔍 Server logs:"
                            cat ../dashboard.log | head -10 | while read line; do echo "║     $line"; done
                        fi
                        
                        # Wait a moment for server to start
                        sleep 2
                        
                        # Get host IP
                        HOST_IP=$(hostname -I | awk '{print $1}')
                        
                        echo "║  ✅ Dashboard started successfully!"
                        echo "║  🌐 Access URLs:"
                        echo "║     • Local: http://localhost:$DASHBOARD_PORT/"
                        echo "║     • Network: http://$HOST_IP:$DASHBOARD_PORT/"
                        echo "║  🆔 Process ID: $WEB_SERVER_PID"
                    '''
                    
                    echo "╚══════════════════════════════════════════════════════════════════════════════╝"
                    
                    // Update progress
                    env.LEARNING_PROGRESS = '80'
                    env.ACHIEVEMENTS += ', 🌐 Dashboard Created'
                }
            }
        }
        
        stage('🎓 K8s Mastery Assessment') {
            steps {
                script {
                    echo "🎓 Conducting K8s Mastery Assessment..."
                    echo ""
                    echo "╔══════════════════════════════════════════════════════════════════════════════╗"
                    echo "║                    🎓 K8S MASTERY ASSESSMENT                               ║"
                    echo "╠══════════════════════════════════════════════════════════════════════════════╣"
                    
                    sh '''
                        echo "║  📊 Assessment Results:"
                        echo "║     • Concept Understanding: ✅ Excellent"
                        echo "║     • Hands-on Practice: ✅ Completed"
                        echo "║     • Interactive Learning: ✅ Engaged"
                        echo "║     • Progress Tracking: ✅ ${LEARNING_PROGRESS}%"
                        echo "║"
                        echo "║  🏆 Mastery Level Achieved:"
                        case "${LEARNING_LEVEL}" in
                            "Beginner")
                                echo "║     • 🥉 Bronze Level - K8s Explorer"
                                echo "║     • Ready for: Basic K8s operations"
                                echo "║     • Next: Intermediate concepts"
                                ;;
                            "Intermediate")
                                echo "║     • 🥈 Silver Level - K8s Practitioner"
                                echo "║     • Ready for: Production deployments"
                                echo "║     • Next: Advanced patterns"
                                ;;
                            "Advanced")
                                echo "║     • 🥇 Gold Level - K8s Master"
                                echo "║     • Ready for: Complex architectures"
                                echo "║     • Next: K8s administration"
                                ;;
                        esac
                        echo "║"
                        echo "║  🎯 Key Learnings:"
                        echo "║     • Kubernetes concepts through Jenkins"
                        echo "║     • YAML configuration understanding"
                        echo "║     • kubectl command familiarity"
                        echo "║     • Real-world application patterns"
                        echo "║"
                        echo "║  🚀 Next Steps:"
                        echo "║     • Practice with real K8s cluster"
                        echo "║     • Explore advanced K8s features"
                        echo "║     • Learn K8s administration"
                        echo "║     • Master CI/CD with K8s"
                    '''
                    
                    echo "╚══════════════════════════════════════════════════════════════════════════════╝"
                    
                    // Final progress update
                    env.LEARNING_PROGRESS = '100'
                    env.ACHIEVEMENTS += ', 🎓 Mastery Achieved'
                }
            }
        }
    }
    
    post {
        always {
            script {
                // Cleanup web server
                sh '''
                    if [ -f dashboard.pid ]; then
                        DASHBOARD_PORT=$(cat dashboard.pid)
                        WEB_SERVER_PID=$(ps aux | grep "python3 app.py $DASHBOARD_PORT" | grep -v grep | awk '{print $2}')
                        if [ ! -z "$WEB_SERVER_PID" ]; then
                            echo "🛑 Stopping K8s Commander dashboard (PID: $WEB_SERVER_PID)..."
                            kill $WEB_SERVER_PID
                            sleep 1
                            if kill -0 $WEB_SERVER_PID 2>/dev/null; then
                                kill -9 $WEB_SERVER_PID
                            fi
                            echo "✅ K8s Commander dashboard stopped"
                        fi
                        rm -f dashboard.pid
                    fi
                '''
                
                echo ""
                echo "╔══════════════════════════════════════════════════════════════════════════════╗"
                echo "║                    🎉 K8S COMMANDER COMPLETED!                               ║"
                echo "╠══════════════════════════════════════════════════════════════════════════════╣"
                echo "║  🎯 Learning Journey Summary:"
                echo "║     • Concept Explored: ${params.K8S_CONCEPT}"
                echo "║     • Learning Level: ${params.LEARNING_LEVEL}"
                echo "║     • Progress Achieved: ${env.LEARNING_PROGRESS}%"
                echo "║     • Achievements: ${env.ACHIEVEMENTS}"
                echo "║"
                sh '''
                    if [ -f dashboard.pid ]; then
                        DASHBOARD_PORT=$(cat dashboard.pid)
                        HOST_IP=$(hostname -I | awk '{print $1}')
                        echo "║  🌐 Dashboard was available at:"
                        echo "║     • Local: http://localhost:$DASHBOARD_PORT/"
                        echo "║     • Network: http://$HOST_IP:$DASHBOARD_PORT/"
                    else
                        echo "║  🌐 Dashboard was available during pipeline execution"
                    fi
                '''
                echo "║  📁 Generated files: dashboard/ directory with Flask app"
                echo "║  📋 Lab files: k8s-lab/ directory with YAML examples"
                echo "║"
                echo "║  🚀 Ready for Next Level:"
                echo "║     • Scenario 5: Jenkins CI/CD Mastery"
                echo "║     • Advanced Jenkins features"
                echo "║     • Production-ready CI/CD patterns"
                echo "║     • Then: Full Kubernetes deployment"
                echo "╚══════════════════════════════════════════════════════════════════════════════╝"
            }
        }
        success {
            script {
                echo "🎉 K8s Commander learning journey completed successfully!"
                echo "🏆 You've mastered Kubernetes concepts through Jenkins!"
            }
        }
        failure {
            script {
                echo "❌ K8s Commander encountered issues, but learning continues!"
                echo "🔄 Retry the pipeline to continue your journey."
            }
        }
    }
}