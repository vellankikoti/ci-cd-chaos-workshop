pipeline {
    agent any
    
    options {
        timeout(time: 20, unit: 'MINUTES')
        timestamps()
        retry(2)
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }
    
    parameters {
        choice(
            name: 'K8S_CONCEPT',
            choices: ['Pods', 'Services', 'Deployments', 'ConfigMaps', 'Secrets', 'Ingress', 'All Concepts'],
            description: 'Kubernetes concept to explore'
        )
        choice(
            name: 'LEARNING_LEVEL',
            choices: ['Beginner', 'Intermediate', 'Advanced'],
            description: 'Learning complexity level'
        )
        booleanParam(
            name: 'INTERACTIVE_DEMO',
            defaultValue: true,
            description: 'Enable interactive demonstrations'
        )
        booleanParam(
            name: 'HANDS_ON_LAB',
            defaultValue: true,
            description: 'Enable hands-on lab exercises'
        )
        string(
            name: 'NAMESPACE',
            defaultValue: 'k8s-learning',
            description: 'Kubernetes namespace for exercises'
        )
    }
    
    environment {
        K8S_VERSION = '1.28'
        DOCKER_REGISTRY = 'docker.io'
        LEARNING_PROGRESS = '0'
        ACHIEVEMENTS = ''
        CURRENT_CONCEPT = "${params.K8S_CONCEPT}"
        LEARNING_LEVEL = "${params.LEARNING_LEVEL}"
    }

    stages {
        stage('🚀 K8s Commander Launch') {
            steps {
                script {
                    echo "🚀 Welcome to K8s Commander - Your Kubernetes Learning Journey!"
                    echo ""
                    echo "╔══════════════════════════════════════════════════════════════════════════════╗"
                    echo "║                        🎯 K8S COMMANDER LAUNCH                              ║"
                    echo "╠══════════════════════════════════════════════════════════════════════════════╣"
                    echo "║  🎓 Learning Journey: Jenkins → Kubernetes Transition"
                    echo "║  📚 Concept Focus: ${params.K8S_CONCEPT}"
                    echo "║  🎯 Learning Level: ${params.LEARNING_LEVEL}"
                    echo "║  🧪 Interactive Demo: ${params.INTERACTIVE_DEMO ? 'Enabled' : 'Disabled'}"
                    echo "║  🔬 Hands-on Lab: ${params.HANDS_ON_LAB ? 'Enabled' : 'Disabled'}"
                    echo "║  📦 Namespace: ${params.NAMESPACE}"
                    echo "║  🏷️  K8s Version: ${env.K8S_VERSION}"
                    echo "╚══════════════════════════════════════════════════════════════════════════════╝"
                    
                    // Initialize learning progress
                    env.LEARNING_PROGRESS = '0'
                    env.ACHIEVEMENTS = '🚀 K8s Commander Started'
                }
            }
        }
        
        stage('📚 Kubernetes Concepts Overview') {
            steps {
                script {
                    echo "📚 Exploring Kubernetes Concepts through Jenkins..."
                    echo ""
                    echo "╔══════════════════════════════════════════════════════════════════════════════╗"
                    echo "║                    📚 KUBERNETES CONCEPTS OVERVIEW                           ║"
                    echo "╠══════════════════════════════════════════════════════════════════════════════╣"
                    
                    // Dynamic concept explanation based on selection
                    def conceptExplanations = [
                        'Pods': [
                            '🎯 What are Pods?',
                            '• Smallest deployable unit in Kubernetes',
                            '• Contains one or more containers',
                            '• Shares network and storage resources',
                            '• Ephemeral - can be created and destroyed',
                            '• Example: Web server + sidecar container'
                        ],
                        'Services': [
                            '🌐 What are Services?',
                            '• Stable network endpoint for Pods',
                            '• Provides load balancing and service discovery',
                            '• Types: ClusterIP, NodePort, LoadBalancer',
                            '• Enables communication between components',
                            '• Example: Frontend → Backend communication'
                        ],
                        'Deployments': [
                            '🚀 What are Deployments?',
                            '• Manages Pod replicas and updates',
                            '• Provides rolling updates and rollbacks',
                            '• Ensures desired state is maintained',
                            '• Handles scaling up and down',
                            '• Example: Web application with 3 replicas'
                        ],
                        'ConfigMaps': [
                            '⚙️ What are ConfigMaps?',
                            '• Stores configuration data as key-value pairs',
                            '• Separates configuration from application code',
                            '• Can be mounted as files or environment variables',
                            '• Non-sensitive configuration data',
                            '• Example: Database connection strings'
                        ],
                        'Secrets': [
                            '🔐 What are Secrets?',
                            '• Stores sensitive data (passwords, tokens)',
                            '• Base64 encoded (not encrypted by default)',
                            '• Can be mounted as files or environment variables',
                            '• Better than hardcoding sensitive data',
                            '• Example: API keys, database passwords'
                        ],
                        'Ingress': [
                            '🌍 What is Ingress?',
                            '• Manages external access to services',
                            '• Provides HTTP/HTTPS routing',
                            '• SSL termination and load balancing',
                            '• Path-based and host-based routing',
                            '• Example: myapp.com/api → backend service'
                        ]
                    ]
                    
                    def selectedConcept = params.K8S_CONCEPT
                    if (selectedConcept == 'All Concepts') {
                        conceptExplanations.each { concept, explanation ->
                            echo "║"
                            echo "║  ${concept}:"
                            explanation.each { line ->
                                echo "║     ${line}"
                            }
                        }
                    } else {
                        echo "║  ${selectedConcept}:"
                        conceptExplanations[selectedConcept].each { line ->
                            echo "║     ${line}"
                        }
                    }
                    
                    echo "╚══════════════════════════════════════════════════════════════════════════════╝"
                    
                    // Update progress
                    env.LEARNING_PROGRESS = '20'
                    env.ACHIEVEMENTS += ', 📚 Concepts Learned'
                }
            }
        }
        
        stage('🎮 Interactive K8s Demo') {
            when {
                expression { params.INTERACTIVE_DEMO == true }
            }
            steps {
                script {
                    echo "🎮 Launching Interactive Kubernetes Demo..."
                    echo ""
                    echo "╔══════════════════════════════════════════════════════════════════════════════╗"
                    echo "║                    🎮 INTERACTIVE K8S DEMO                                  ║"
                    echo "╠══════════════════════════════════════════════════════════════════════════════╣"
                    
                    // Create interactive demo based on concept
                        sh '''
                        echo "║  🎯 Interactive Demo: ${CURRENT_CONCEPT}"
                        echo "║  📊 Learning Level: ${LEARNING_LEVEL}"
                        echo "║"
                        echo "║  🚀 Simulating Kubernetes operations..."
                        
                        # Simulate kubectl commands based on concept
                        case "${CURRENT_CONCEPT}" in
                            "Pods")
                                echo "║     • kubectl get pods"
                                echo "║     • kubectl describe pod my-pod"
                                echo "║     • kubectl logs my-pod"
                                echo "║     • kubectl exec -it my-pod -- /bin/bash"
                                ;;
                            "Services")
                                echo "║     • kubectl get services"
                                echo "║     • kubectl expose deployment my-app --port=80"
                                echo "║     • kubectl get endpoints"
                                echo "║     • kubectl port-forward service/my-service 8080:80"
                                ;;
                            "Deployments")
                                echo "║     • kubectl get deployments"
                                echo "║     • kubectl create deployment my-app --image=nginx"
                                echo "║     • kubectl scale deployment my-app --replicas=3"
                                echo "║     • kubectl rollout status deployment/my-app"
                                ;;
                            "ConfigMaps")
                                echo "║     • kubectl get configmaps"
                                echo "║     • kubectl create configmap my-config --from-literal=key=value"
                                echo "║     • kubectl describe configmap my-config"
                                echo "║     • kubectl get configmap my-config -o yaml"
                                ;;
                            "Secrets")
                                echo "║     • kubectl get secrets"
                                echo "║     • kubectl create secret generic my-secret --from-literal=password=secret"
                                echo "║     • kubectl describe secret my-secret"
                                echo "║     • kubectl get secret my-secret -o yaml"
                                ;;
                            "Ingress")
                                echo "║     • kubectl get ingress"
                                echo "║     • kubectl apply -f ingress.yaml"
                                echo "║     • kubectl describe ingress my-ingress"
                                echo "║     • kubectl get ingress my-ingress -o yaml"
                                ;;
                            "All Concepts")
                                echo "║     • kubectl get all"
                                echo "║     • kubectl get pods,services,deployments"
                                echo "║     • kubectl get configmaps,secrets"
                                echo "║     • kubectl get ingress"
                                ;;
                        esac
                        
                        echo "║"
                        echo "║  ✅ Interactive demo completed successfully!"
                        echo "║  💡 These commands would work in a real Kubernetes cluster"
                    '''
                    
                    echo "╚══════════════════════════════════════════════════════════════════════════════╝"
                    
                    // Update progress
                    env.LEARNING_PROGRESS = '40'
                    env.ACHIEVEMENTS += ', 🎮 Demo Completed'
                }
            }
        }
        
        stage('🔬 Hands-on Lab Exercise') {
            when {
                expression { params.HANDS_ON_LAB == true }
            }
            steps {
                script {
                    echo "🔬 Starting Hands-on Lab Exercise..."
                    echo ""
                    echo "╔══════════════════════════════════════════════════════════════════════════════╗"
                    echo "║                    🔬 HANDS-ON LAB EXERCISE                                 ║"
                    echo "╠══════════════════════════════════════════════════════════════════════════════╣"
                    
                    // Create lab exercise files
                        sh '''
                        echo "║  🎯 Lab Exercise: ${CURRENT_CONCEPT} Practice"
                        echo "║  📦 Namespace: ${NAMESPACE}"
                        echo "║"
                        echo "║  📝 Creating lab exercise files..."
                        
                        mkdir -p k8s-lab
                        
                        # Create YAML files based on concept
                        case "${CURRENT_CONCEPT}" in
                            "Pods")
                                cat > k8s-lab/pod-example.yaml << 'EOF'
apiVersion: v1
kind: Pod
metadata:
  name: nginx-pod
  labels:
    app: nginx
spec:
  containers:
  - name: nginx
    image: nginx:latest
    ports:
    - containerPort: 80
EOF
                                echo "║     • Created pod-example.yaml"
                                ;;
                            "Services")
                                cat > k8s-lab/service-example.yaml << 'EOF'
apiVersion: v1
kind: Service
metadata:
  name: nginx-service
spec:
  selector:
    app: nginx
  ports:
  - port: 80
    targetPort: 80
  type: ClusterIP
EOF
                                echo "║     • Created service-example.yaml"
                                ;;
                            "Deployments")
                                cat > k8s-lab/deployment-example.yaml << 'EOF'
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:latest
        ports:
        - containerPort: 80
EOF
                                echo "║     • Created deployment-example.yaml"
                                ;;
                            "ConfigMaps")
                                cat > k8s-lab/configmap-example.yaml << 'EOF'
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
data:
  database_url: "mysql://localhost:3306/mydb"
  debug_mode: "true"
  max_connections: "100"
EOF
                                echo "║     • Created configmap-example.yaml"
                                ;;
                            "Secrets")
                                cat > k8s-lab/secret-example.yaml << 'EOF'
apiVersion: v1
kind: Secret
metadata:
  name: app-secret
type: Opaque
data:
  username: YWRtaW4=  # base64 encoded 'admin'
  password: cGFzc3dvcmQ=  # base64 encoded 'password'
EOF
                                echo "║     • Created secret-example.yaml"
                                ;;
                            "Ingress")
                                cat > k8s-lab/ingress-example.yaml << 'EOF'
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: app-ingress
spec:
  rules:
  - host: myapp.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: nginx-service
            port:
              number: 80
EOF
                                echo "║     • Created ingress-example.yaml"
                                ;;
                            "All Concepts")
                                # Create all example files
                                echo "║     • Creating comprehensive lab with all concepts..."
                                echo "║     • This would include Pods, Services, Deployments,"
                                echo "║     • ConfigMaps, Secrets, and Ingress examples"
                                ;;
                        esac
                        
                        echo "║"
                        echo "║  📋 Lab Instructions:"
                        echo "║     1. Review the generated YAML files"
                        echo "║     2. Understand the structure and fields"
                        echo "║     3. Try applying them to a K8s cluster:"
                        echo "║        kubectl apply -f k8s-lab/"
                        echo "║     4. Verify with: kubectl get all"
                        echo "║"
                        echo "║  ✅ Lab exercise files created successfully!"
                    '''
                    
                    echo "╚══════════════════════════════════════════════════════════════════════════════╝"
                    
                    // Update progress
                    env.LEARNING_PROGRESS = '60'
                    env.ACHIEVEMENTS += ', 🔬 Lab Completed'
                }
            }
        }
        
        stage('🌐 Interactive Learning Dashboard') {
            steps {
                script {
                    echo "🌐 Generating Interactive Learning Dashboard..."
                    echo ""
                    echo "╔══════════════════════════════════════════════════════════════════════════════╗"
                    echo "║                🌐 INTERACTIVE LEARNING DASHBOARD                           ║"
                    echo "╠══════════════════════════════════════════════════════════════════════════════╣"
                    
                    // Find available port starting from 8081
                        sh '''
                        echo "║  🎯 Creating interactive learning dashboard..."
                        mkdir -p dashboard
                        
                        # Use Flask default port 5000 (avoiding Jenkins on 8080)
                        DASHBOARD_PORT=5000
                        while netstat -tuln 2>/dev/null | grep -q ":$DASHBOARD_PORT " || docker ps --format "{{.Ports}}" 2>/dev/null | grep -q ":$DASHBOARD_PORT"; do
                            DASHBOARD_PORT=$((DASHBOARD_PORT + 1))
                            if [ $DASHBOARD_PORT -gt 5010 ]; then
                                echo "║  ❌ No available ports found (5000-5010)"
                                exit 1
                            fi
                        done
                        
                        echo "║  🌐 Using port: $DASHBOARD_PORT"
                        
                        # Create dynamic Python web application
                        cat > dashboard/app.py << 'EOF'
#!/usr/bin/env python3
import os
import json
import time
from datetime import datetime
from flask import Flask, render_template_string, jsonify

app = Flask(__name__)

# Get Jenkins environment variables
K8S_CONCEPT = os.environ.get('CURRENT_CONCEPT', 'Pods')
LEARNING_LEVEL = os.environ.get('LEARNING_LEVEL', 'Beginner')
NAMESPACE = os.environ.get('NAMESPACE', 'k8s-learning')
K8S_VERSION = os.environ.get('K8S_VERSION', '1.28')
INTERACTIVE_DEMO = os.environ.get('INTERACTIVE_DEMO', 'true').lower() == 'true'
HANDS_ON_LAB = os.environ.get('HANDS_ON_LAB', 'true').lower() == 'true'

# Learning progress tracking
LEARNING_PROGRESS = 0
ACHIEVEMENTS = ['🚀 K8s Commander Started']

def update_progress(progress, achievement):
    global LEARNING_PROGRESS, ACHIEVEMENTS
    LEARNING_PROGRESS = progress
    if achievement not in ACHIEVEMENTS:
        ACHIEVEMENTS.append(achievement)

# Simulate learning progression
update_progress(20, '📚 Concepts Learned')
update_progress(40, '🎮 Demo Completed')
update_progress(60, '🔬 Lab Completed')
update_progress(80, '🌐 Dashboard Created')
update_progress(100, '🎓 Mastery Achieved')

HTML_TEMPLATE = """<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>K8s Commander - Learning Dashboard</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }
        .container { max-width: 1200px; margin: 0 auto; padding: 20px; }
        .header {
            text-align: center;
            margin-bottom: 30px;
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }
        .header h1 { font-size: 3em; margin-bottom: 10px; color: white; text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3); }
        .progress-bar {
            width: 100%;
            height: 20px;
            background: rgba(255, 255, 255, 0.2);
            border-radius: 10px;
            overflow: hidden;
            margin: 20px 0;
        }
        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #4CAF50, #8BC34A);
            transition: width 0.3s ease;
        }
        .dashboard { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; }
        .card {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            backdrop-filter: blur(10px);
            transition: transform 0.3s ease;
        }
        .card:hover { transform: translateY(-5px); }
        .achievement { display: inline-block; margin: 5px; padding: 5px 10px; background: #4CAF50; color: white; border-radius: 15px; font-size: 0.9em; }
        .concept-highlight { color: #2196F3; font-weight: bold; }
        .level-badge { display: inline-block; padding: 5px 15px; border-radius: 20px; font-weight: bold; }
        .beginner { background: #4CAF50; color: white; }
        .intermediate { background: #FF9800; color: white; }
        .advanced { background: #F44336; color: white; }
        .live-indicator {
            display: inline-block;
            width: 10px;
            height: 10px;
            background: #4CAF50;
            border-radius: 50%;
            animation: pulse 2s infinite;
        }
        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🚀 K8s Commander</h1>
            <p>Your Kubernetes Learning Journey</p>
            <div class="progress-bar">
                <div class="progress-fill" id="progressBar" style="width: {{ progress }}%"></div>
            </div>
            <p>Progress: <span id="progressText">{{ progress }}</span>% Complete <span class="live-indicator"></span></p>
        </div>
        
        <div class="dashboard">
            <div class="card">
                <h3>🎯 Current Focus</h3>
                <p><strong>Concept:</strong> <span class="concept-highlight">{{ concept }}</span></p>
                <p><strong>Level:</strong> <span class="level-badge {{ level_class }}">{{ level }}</span></p>
                <p><strong>Namespace:</strong> {{ namespace }}</p>
                <p><strong>K8s Version:</strong> {{ k8s_version }}</p>
            </div>
            
            <div class="card">
                <h3>🏆 Achievements</h3>
                <div id="achievements">
                    {% for achievement in achievements %}
                    <span class="achievement">{{ achievement }}</span>
                    {% endfor %}
                </div>
            </div>
            
            <div class="card">
                <h3>📚 Learning Path</h3>
                <ul>
                    <li>✅ Kubernetes Concepts Overview</li>
                    <li>✅ Interactive Demo</li>
                    <li>✅ Hands-on Lab</li>
                    <li>🔄 Learning Dashboard</li>
                    <li>⏳ Next: Advanced K8s Patterns</li>
                </ul>
            </div>
            
            <div class="card">
                <h3>🎮 Interactive Features</h3>
                <p><strong>Demo Mode:</strong> {{ '✅ Enabled' if interactive_demo else '❌ Disabled' }}</p>
                <p><strong>Lab Mode:</strong> {{ '✅ Enabled' if hands_on_lab else '❌ Disabled' }}</p>
                <p><strong>Real-time Updates:</strong> ✅ Active</p>
            </div>
            
            <div class="card">
                <h3>📊 Live Metrics</h3>
                <p><strong>Current Time:</strong> <span id="currentTime">{{ current_time }}</span></p>
                <p><strong>Learning Duration:</strong> <span id="duration">{{ duration }}</span></p>
                <p><strong>Pipeline Status:</strong> <span style="color: #4CAF50;">✅ Running</span></p>
            </div>
        </div>
    </div>
    
    <script>
        // Real-time updates
        function updateProgress() {
            fetch('/api/progress')
                .then(response => response.json())
                .then(data => {
                    document.getElementById('progressBar').style.width = data.progress + '%';
                    document.getElementById('progressText').textContent = data.progress;
                });
        }
        
        function updateTime() {
            const now = new Date();
            document.getElementById('currentTime').textContent = now.toLocaleTimeString();
        }
        
        // Update every 2 seconds
        setInterval(updateProgress, 2000);
        setInterval(updateTime, 1000);
        
        // Initial update
        updateProgress();
        updateTime();
    </script>
</body>
</html>"""

@app.route('/')
def dashboard():
    level_class = LEARNING_LEVEL.lower()
    current_time = datetime.now().strftime('%H:%M:%S')
    duration = 'Active'
    
    return render_template_string(HTML_TEMPLATE,
        concept=K8S_CONCEPT,
        level=LEARNING_LEVEL,
        level_class=level_class,
        namespace=NAMESPACE,
        k8s_version=K8S_VERSION,
        progress=LEARNING_PROGRESS,
        achievements=ACHIEVEMENTS,
        interactive_demo=INTERACTIVE_DEMO,
        hands_on_lab=HANDS_ON_LAB,
        current_time=current_time,
        duration=duration
    )

@app.route('/api/progress')
def api_progress():
    return jsonify({
        'progress': LEARNING_PROGRESS,
        'achievements': ACHIEVEMENTS,
        'concept': K8S_CONCEPT,
        'level': LEARNING_LEVEL,
        'timestamp': time.time()
    })

if __name__ == '__main__':
    import sys
    port = int(sys.argv[1]) if len(sys.argv) > 1 else 5000
    app.run(host='0.0.0.0', port=port, debug=False)
EOF

                        # Create requirements.txt for Flask
                        cat > dashboard/requirements.txt << 'EOF'
Flask==2.3.3
Werkzeug==2.3.7
EOF

                        # Install Flask and start the application
                        echo "║  📦 Installing Flask dependencies..."
                        pip3 install -r dashboard/requirements.txt
        
                        echo "║  🚀 Starting dynamic K8s Commander dashboard..."
                        echo "║     • Interactive dashboard created"
                        echo "║     • Real-time progress tracking enabled"
                        echo "║     • Achievement system active"
                        echo "║"
                        echo "║  🌐 Dashboard Features:"
                        echo "║     • Live progress tracking"
                        echo "║     • Achievement badges"
                        echo "║     • Learning path visualization"
                        echo "║     • Interactive concept exploration"
                        echo "║     • Real-time updates"
                        
                        # Start Flask web server in background
                        echo "║  🚀 Starting Flask web server on port $DASHBOARD_PORT..."
                        cd dashboard
                        chmod +x app.py
                        
                        # Set environment variables for Flask app
                        export CURRENT_CONCEPT="${CURRENT_CONCEPT}"
                        export LEARNING_LEVEL="${LEARNING_LEVEL}"
                        export NAMESPACE="${NAMESPACE}"
                        export K8S_VERSION="${K8S_VERSION}"
                        export INTERACTIVE_DEMO="${INTERACTIVE_DEMO}"
                        export HANDS_ON_LAB="${HANDS_ON_LAB}"
                        
                        nohup python3 app.py $DASHBOARD_PORT > ../dashboard.log 2>&1 &
                        WEB_SERVER_PID=$!
                        echo $WEB_SERVER_PID > ../dashboard.pid
                        
                        # Test if Flask app can start
                        echo "║  🧪 Testing Flask app startup..."
                        python3 -c "import app; print('Flask app imports successfully')" 2>&1 || echo "Flask app import failed"
                        
                        # Create a simple fallback Flask app if the main one fails
                        cat > simple_app.py << 'SIMPLE_EOF'
#!/usr/bin/env python3
from flask import Flask
import sys

app = Flask(__name__)

@app.route('/')
def hello():
    return """
    <html>
    <head><title>K8s Commander - Simple Dashboard</title></head>
    <body style="font-family: Arial; text-align: center; padding: 50px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white;">
        <h1>🚀 K8s Commander Dashboard</h1>
        <p>Jenkins Pipeline: Working!</p>
        <p>Port: """ + str(sys.argv[1] if len(sys.argv) > 1 else 5000) + """</p>
        <p>Status: ✅ Active</p>
    </body>
    </html>
    """

if __name__ == '__main__':
    port = int(sys.argv[1]) if len(sys.argv) > 1 else 5000
    app.run(host='0.0.0.0', port=port, debug=False)
SIMPLE_EOF
                        
                        # Verify the server started
                        sleep 3
                        if ps -p $WEB_SERVER_PID > /dev/null 2>&1; then
                            echo "║  ✅ Flask server started successfully (PID: $WEB_SERVER_PID)"
                            # Test if server responds
                            sleep 2
                            if curl -s http://localhost:$DASHBOARD_PORT/ > /dev/null 2>&1; then
                                echo "║  ✅ Flask server is responding to requests"
                            else
                                echo "║  ⚠️  Flask server started but not responding to requests"
                            fi
                        else
                            echo "║  ❌ Main Flask server failed to start. Trying fallback..."
                            cat ../dashboard.log
                            
                            # Kill any existing process and try simple app
                            kill $WEB_SERVER_PID 2>/dev/null || true
                            sleep 1
                            
                            echo "║  🔄 Starting simple fallback Flask app..."
                            chmod +x simple_app.py
                            nohup python3 simple_app.py $DASHBOARD_PORT > ../dashboard.log 2>&1 &
                            WEB_SERVER_PID=$!
                            echo $WEB_SERVER_PID > ../dashboard.pid
                            
                            sleep 3
                            if ps -p $WEB_SERVER_PID > /dev/null 2>&1; then
                                echo "║  ✅ Fallback Flask server started successfully (PID: $WEB_SERVER_PID)"
                            else
                                echo "║  ❌ Both Flask servers failed to start"
                                cat ../dashboard.log
                            fi
                        fi
                        
                        # Wait a moment for server to start
                        sleep 2
                        
                        # Get host IP
                        HOST_IP=$(hostname -I | awk '{print $1}')
                        
                        echo "║  ✅ Dashboard started successfully!"
                        echo "║  🌐 Access URLs:"
                        echo "║     • Local: http://localhost:$DASHBOARD_PORT/"
                        echo "║     • Network: http://$HOST_IP:$DASHBOARD_PORT/"
                        echo "║  🆔 Process ID: $WEB_SERVER_PID"
                    '''
                    
                    echo "╚══════════════════════════════════════════════════════════════════════════════╝"
                    
                    // Update progress
                    env.LEARNING_PROGRESS = '80'
                    env.ACHIEVEMENTS += ', 🌐 Dashboard Created'
                }
            }
        }
        
        stage('🎓 K8s Mastery Assessment') {
            steps {
                script {
                    echo "🎓 Conducting K8s Mastery Assessment..."
                    echo ""
                    echo "╔══════════════════════════════════════════════════════════════════════════════╗"
                    echo "║                    🎓 K8S MASTERY ASSESSMENT                               ║"
                    echo "╠══════════════════════════════════════════════════════════════════════════════╣"
                    
                    sh '''
                        echo "║  📊 Assessment Results:"
                        echo "║     • Concept Understanding: ✅ Excellent"
                        echo "║     • Hands-on Practice: ✅ Completed"
                        echo "║     • Interactive Learning: ✅ Engaged"
                        echo "║     • Progress Tracking: ✅ ${LEARNING_PROGRESS}%"
                        echo "║"
                        echo "║  🏆 Mastery Level Achieved:"
                        case "${LEARNING_LEVEL}" in
                            "Beginner")
                                echo "║     • 🥉 Bronze Level - K8s Explorer"
                                echo "║     • Ready for: Basic K8s operations"
                                echo "║     • Next: Intermediate concepts"
                                ;;
                            "Intermediate")
                                echo "║     • 🥈 Silver Level - K8s Practitioner"
                                echo "║     • Ready for: Production deployments"
                                echo "║     • Next: Advanced patterns"
                                ;;
                            "Advanced")
                                echo "║     • 🥇 Gold Level - K8s Master"
                                echo "║     • Ready for: Complex architectures"
                                echo "║     • Next: K8s administration"
                                ;;
                        esac
                        echo "║"
                        echo "║  🎯 Key Learnings:"
                        echo "║     • Kubernetes concepts through Jenkins"
                        echo "║     • YAML configuration understanding"
                        echo "║     • kubectl command familiarity"
                        echo "║     • Real-world application patterns"
                        echo "║"
                        echo "║  🚀 Next Steps:"
                        echo "║     • Practice with real K8s cluster"
                        echo "║     • Explore advanced K8s features"
                        echo "║     • Learn K8s administration"
                        echo "║     • Master CI/CD with K8s"
                    '''
                    
                    echo "╚══════════════════════════════════════════════════════════════════════════════╝"
                    
                    // Final progress update
                    env.LEARNING_PROGRESS = '100'
                    env.ACHIEVEMENTS += ', 🎓 Mastery Achieved'
                }
            }
        }
    }
    
    post {
        always {
            script {
                // Cleanup web server
                sh '''
                    if [ -f dashboard.pid ]; then
                        DASHBOARD_PORT=$(cat dashboard.pid)
                        WEB_SERVER_PID=$(ps aux | grep "python3 app.py $DASHBOARD_PORT" | grep -v grep | awk '{print $2}')
                        if [ ! -z "$WEB_SERVER_PID" ]; then
                            echo "🛑 Stopping K8s Commander dashboard (PID: $WEB_SERVER_PID)..."
                            kill $WEB_SERVER_PID
                            sleep 1
                            if kill -0 $WEB_SERVER_PID 2>/dev/null; then
                                kill -9 $WEB_SERVER_PID
                            fi
                            echo "✅ K8s Commander dashboard stopped"
                        fi
                        rm -f dashboard.pid
                    fi
                '''
                
                echo ""
                echo "╔══════════════════════════════════════════════════════════════════════════════╗"
                echo "║                    🎉 K8S COMMANDER COMPLETED!                               ║"
                echo "╠══════════════════════════════════════════════════════════════════════════════╣"
                echo "║  🎯 Learning Journey Summary:"
                echo "║     • Concept Explored: ${params.K8S_CONCEPT}"
                echo "║     • Learning Level: ${params.LEARNING_LEVEL}"
                echo "║     • Progress Achieved: ${env.LEARNING_PROGRESS}%"
                echo "║     • Achievements: ${env.ACHIEVEMENTS}"
                echo "║"
                sh '''
                    if [ -f dashboard.pid ]; then
                        DASHBOARD_PORT=$(cat dashboard.pid)
                        HOST_IP=$(hostname -I | awk '{print $1}')
                        echo "║  🌐 Dashboard was available at:"
                        echo "║     • Local: http://localhost:$DASHBOARD_PORT/"
                        echo "║     • Network: http://$HOST_IP:$DASHBOARD_PORT/"
                    else
                        echo "║  🌐 Dashboard was available during pipeline execution"
                    fi
                '''
                echo "║  📁 Generated files: dashboard/ directory with Flask app"
                echo "║  📋 Lab files: k8s-lab/ directory with YAML examples"
                echo "║"
                echo "║  🚀 Ready for Next Level:"
                echo "║     • Scenario 5: Jenkins CI/CD Mastery"
                echo "║     • Advanced Jenkins features"
                echo "║     • Production-ready CI/CD patterns"
                echo "║     • Then: Full Kubernetes deployment"
                echo "╚══════════════════════════════════════════════════════════════════════════════╝"
            }
        }
        success {
            script {
                echo "🎉 K8s Commander learning journey completed successfully!"
                echo "🏆 You've mastered Kubernetes concepts through Jenkins!"
            }
        }
        failure {
            script {
                echo "❌ K8s Commander encountered issues, but learning continues!"
                echo "🔄 Retry the pipeline to continue your journey."
            }
        }
    }
}