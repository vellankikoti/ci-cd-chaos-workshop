pipeline {
    agent any
    
    options {
        // Keep only the last 10 builds
        buildDiscarder(logRotator(numToKeepStr: '10'))
        // Add timestamps to console output
        timestamps()
        // Timeout after 30 minutes
        timeout(time: 30, unit: 'MINUTES')
    }
    
    stages {
        stage('üê≥ Welcome to Docker Ninja') {
            steps {
                echo 'Welcome to Docker Ninja - Advanced Container Orchestration!'
                echo 'This pipeline demonstrates advanced Docker techniques in Jenkins.'
            }
        }
        
        stage('üì¶ Setup Environment') {
            steps {
                echo 'Setting up the Docker environment...'
                sh 'python3 --version'
                sh 'pip3 --version'
                sh 'docker --version'
                sh 'docker-compose --version'
            }
        }
        
        stage('üîß Install Dependencies') {
            steps {
                echo 'Installing Python dependencies...'
                sh 'python3 -m pip install -r requirements.txt'
            }
        }
        
        stage('üß™ Run Application Tests') {
            steps {
                echo 'Running basic application tests...'
                sh 'python3 -m pytest tests/test_app.py -v --tb=short'
            }
            post {
                always {
                    echo 'Application tests completed!'
                }
            }
        }
        
        stage('üê≥ Build Docker Image') {
            steps {
                echo 'Building multi-stage Docker image...'
                script {
                    def image = docker.build("docker-ninja:${env.BUILD_NUMBER}", "--no-cache .")
                    echo "Docker image built: ${image.id}"
                }
            }
            post {
                always {
                    echo 'Docker image build completed!'
                }
            }
        }
        
        stage('üîí Security Scan') {
            steps {
                echo 'Running security scan on Docker image...'
                sh 'python security-scan.py'
            }
            post {
                always {
                    echo 'Security scan completed!'
                }
            }
        }
        
        stage('üß™ Run Docker Tests') {
            steps {
                echo 'Running Docker-specific tests...'
                sh 'python3 -m pytest tests/test_docker.py -v --tb=short'
            }
            post {
                always {
                    echo 'Docker tests completed!'
                }
            }
        }
        
        stage('üöÄ Test Container Run') {
            steps {
                echo 'Testing Docker container execution...'
                script {
                    def container = docker.run("docker-ninja:${env.BUILD_NUMBER}", "-d", "-p", "5000:5000", "--name", "docker-ninja-test")
                    echo "Container started: ${container.id}"
                    
                    // Wait for container to be ready
                    sh 'sleep 10'
                    
                    // Test health endpoint
                    sh 'curl -f http://localhost:5000/health'
                    sh 'curl -f http://localhost:5000/metrics'
                    
                    // Clean up
                    container.stop()
                    container.remove()
                }
            }
            post {
                always {
                    echo 'Container test completed!'
                }
            }
        }
        
        stage('üê≥ Docker Compose Test') {
            steps {
                echo 'Testing Docker Compose orchestration...'
                sh 'docker-compose up -d'
                sh 'sleep 15'
                sh 'curl -f http://localhost:80/health'
                sh 'curl -f http://localhost:5001/health'
                sh 'curl -f http://localhost:5002/health'
            }
            post {
                always {
                    echo 'Cleaning up Docker Compose...'
                    sh 'docker-compose down'
                }
            }
        }
        
        stage('üìä Image Analysis') {
            steps {
                echo 'Analyzing Docker image...'
                sh 'docker images docker-ninja:${BUILD_NUMBER} --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}\t{{.CreatedAt}}"'
                sh 'docker history docker-ninja:${BUILD_NUMBER} --format "table {{.CreatedBy}}\t{{.Size}}"'
            }
            post {
                always {
                    echo 'Image analysis completed!'
                }
            }
        }
        
        stage('‚úÖ Docker Ninja Success!') {
            steps {
                echo 'üéâ Congratulations! You have mastered Docker Ninja techniques!'
                echo 'You have learned:'
                echo '  - Multi-stage Docker builds for optimization'
                echo '  - Security scanning and hardening'
                echo '  - Blue-green deployment strategy'
                echo '  - Container orchestration with Docker Compose'
                echo '  - Advanced Docker testing patterns'
                echo ''
                echo 'Ready for the next challenge? Move to Scenario 4!'
            }
        }
    }
    
    post {
        always {
            echo 'Docker Ninja pipeline execution completed!'
            
            // Clean up any remaining containers
            sh 'docker ps -q --filter "name=docker-ninja" | xargs -r docker stop'
            sh 'docker ps -aq --filter "name=docker-ninja" | xargs -r docker rm'
        }
        success {
            echo 'üéä Docker Ninja completed successfully!'
            echo 'You are now a Docker ninja!'
        }
        failure {
            echo '‚ùå Pipeline failed - check the logs above'
        }
    }
}
