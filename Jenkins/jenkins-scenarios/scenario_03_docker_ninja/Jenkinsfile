pipeline {
    agent any
    
    options {
        // Keep only the last 10 builds
        buildDiscarder(logRotator(numToKeepStr: '10'))
        // Add timestamps to console output
        timestamps()
        // Timeout after 30 minutes
        timeout(time: 30, unit: 'MINUTES')
    }
    
    stages {
        stage('üê≥ Welcome to Docker Ninja') {
            steps {
                echo 'Welcome to Docker Ninja - Advanced Container Orchestration!'
                echo 'This pipeline demonstrates advanced Docker techniques in Jenkins.'
            }
        }
        
        stage('üì¶ Setup Environment') {
            steps {
                echo 'Setting up the Docker environment...'
                sh 'python3 --version'
                sh 'pip3 --version'
                sh 'docker --version'
                sh 'docker-compose --version'
            }
        }
        
        stage('üîß Install Dependencies') {
            steps {
                echo 'Installing Python dependencies...'
                dir('Jenkins/jenkins-scenarios/scenario_03_docker_ninja') {
                    sh 'python3 -m pip install -r requirements.txt'
                }
            }
        }
        
        stage('üß™ Run Application Tests') {
            steps {
                echo 'Running basic application tests...'
                dir('Jenkins/jenkins-scenarios/scenario_03_docker_ninja') {
                    sh 'python3 -m pytest tests/test_app.py -v --tb=short'
                }
            }
            post {
                always {
                    echo 'Application tests completed!'
                }
            }
        }
        
        stage('üê≥ Build Docker Image') {
            steps {
                echo 'Building optimized Docker image...'
                dir('Jenkins/jenkins-scenarios/scenario_03_docker_ninja') {
                    script {
                        def image = docker.build("docker-ninja:${env.BUILD_NUMBER}", "--no-cache .")
                        echo "Docker image built: ${image.id}"
                    }
                }
            }
        }
        
        stage('üîí Security Scan') {
            steps {
                echo 'Running security scan on Docker image...'
                dir('Jenkins/jenkins-scenarios/scenario_03_docker_ninja') {
                    sh 'python3 security-scan.py'
                }
            }
        }
        
        stage('üß™ Run Docker Tests') {
            steps {
                echo 'Running Docker integration tests...'
                dir('Jenkins/jenkins-scenarios/scenario_03_docker_ninja') {
                    sh 'python3 -m pytest tests/test_docker.py -v --tb=short'
                }
            }
            post {
                always {
                    echo 'Docker tests completed!'
                }
            }
        }
        
        stage('üìä Generate Reports') {
            steps {
                echo 'Generating test and security reports...'
                dir('Jenkins/jenkins-scenarios/scenario_03_docker_ninja') {
                    sh '''
                        echo "Docker Ninja Build Report" > build-report.txt
                        echo "=========================" >> build-report.txt
                        echo "Build Number: ${BUILD_NUMBER}" >> build-report.txt
                        echo "Build Time: $(date)" >> build-report.txt
                        echo "Docker Image: docker-ninja:${BUILD_NUMBER}" >> build-report.txt
                        echo "" >> build-report.txt
                        echo "Docker Images:" >> build-report.txt
                        docker images | grep docker-ninja >> build-report.txt || echo "No docker-ninja images found" >> build-report.txt
                        echo "" >> build-report.txt
                        echo "Security Scan Results:" >> build-report.txt
                        echo "Image size optimization completed" >> build-report.txt
                        echo "Multi-stage build successful" >> build-report.txt
                        echo "Security scan completed" >> build-report.txt
                        
                        cat build-report.txt
                    '''
                }
            }
        }
        
        stage('‚úÖ Success!') {
            steps {
                echo 'üéâ Congratulations! Docker Ninja pipeline completed successfully!'
                echo 'You have mastered:'
                echo '  - Advanced Docker workflows'
                echo '  - Multi-stage builds'
                echo '  - Security scanning'
                echo '  - Container optimization'
                echo '  - CI/CD integration'
                echo ''
                echo 'Ready for the next challenge? Move to Scenario 4!'
            }
        }
    }
    
    post {
        always {
            echo 'Pipeline execution completed!'
        }
        success {
            echo 'üéä Docker Ninja pipeline completed successfully!'
            echo 'You are now a Docker Ninja!'
        }
        failure {
            echo '‚ùå Pipeline failed - check the logs above'
        }
    }
}