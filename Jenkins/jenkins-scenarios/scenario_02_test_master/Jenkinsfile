pipeline {
    agent any
    
    options {
        // Keep only the last 10 builds
        buildDiscarder(logRotator(numToKeepStr: '10'))
        // Add timestamps to console output
        timestamps()
        // Timeout after 30 minutes
        timeout(time: 30, unit: 'MINUTES')
    }
    
    stages {
        stage('🧪 Welcome to Test Master') {
            steps {
                echo 'Welcome to Test Master - Advanced Testing with TestContainers!'
                echo 'This pipeline demonstrates real database testing in Jenkins.'
            }
        }
        
        stage('📦 Setup Environment') {
            steps {
                echo 'Setting up the testing environment...'
                sh 'python3 --version'
                sh 'pip3 --version'
                sh 'docker --version'
            }
        }
        
        stage('🔧 Install Dependencies') {
            steps {
                echo 'Installing Python dependencies including TestContainers...'
                dir('Jenkins/jenkins-scenarios/scenario_02_test_master') {
                    sh 'python3 -m pip install -r requirements.txt'
                }
            }
        }
        
        stage('🧪 Run Basic Tests') {
            steps {
                echo 'Running basic application tests...'
                dir('Jenkins/jenkins-scenarios/scenario_02_test_master') {
                    sh 'python3 -m pytest tests/test_app.py -v --tb=short'
                }
            }
            post {
                always {
                    echo 'Basic tests completed!'
                }
            }
        }
        
        stage('🐘 Test with PostgreSQL') {
            steps {
                echo 'Running PostgreSQL integration tests...'
                dir('Jenkins/jenkins-scenarios/scenario_02_test_master') {
                    sh 'python3 -m pytest tests/test_containers.py::test_postgres -v -s'
                }
            }
            post {
                always {
                    echo 'PostgreSQL tests completed!'
                }
            }
        }
        
        stage('🐬 Test with MySQL') {
            steps {
                echo 'Running MySQL integration tests...'
                dir('Jenkins/jenkins-scenarios/scenario_02_test_master') {
                    sh 'python3 -m pytest tests/test_containers.py::test_mysql -v -s'
                }
            }
            post {
                always {
                    echo 'MySQL tests completed!'
                }
            }
        }
        
        stage('🔴 Test with Redis') {
            steps {
                echo 'Running Redis integration tests...'
                dir('Jenkins/jenkins-scenarios/scenario_02_test_master') {
                    sh 'python3 -m pytest tests/test_containers.py::test_redis -v -s'
                }
            }
            post {
                always {
                    echo 'Redis tests completed!'
                }
            }
        }
        
        stage('⚡ Parallel Container Tests') {
            steps {
                echo 'Running parallel container tests...'
                dir('Jenkins/jenkins-scenarios/scenario_02_test_master') {
                    sh 'python3 -m pytest tests/test_containers.py::test_parallel_containers -v -s'
                }
            }
            post {
                always {
                    echo 'Parallel container tests completed!'
                }
            }
        }
        
        stage('🐳 Build Docker Image') {
            steps {
                echo 'Building Docker image for Test Master...'
                dir('Jenkins/jenkins-scenarios/scenario_02_test_master') {
                    script {
                        def image = docker.build("test-master:${env.BUILD_NUMBER}", "--no-cache .")
                        echo "Docker image built: ${image.id}"
                    }
                }
            }
        }
        
        stage('📊 Generate Test Reports') {
            steps {
                echo 'Generating comprehensive test reports...'
                dir('Jenkins/jenkins-scenarios/scenario_02_test_master') {
                    sh '''
                        echo "Test Master Report" > test-report.txt
                        echo "==================" >> test-report.txt
                        echo "Build Number: ${BUILD_NUMBER}" >> test-report.txt
                        echo "Test Time: $(date)" >> test-report.txt
                        echo "Docker Image: test-master:${BUILD_NUMBER}" >> test-report.txt
                        echo "" >> test-report.txt
                        echo "Test Results:" >> test-report.txt
                        echo "  - Application tests: PASSED" >> test-report.txt
                        echo "  - PostgreSQL tests: PASSED" >> test-report.txt
                        echo "  - MySQL tests: PASSED" >> test-report.txt
                        echo "  - Redis tests: PASSED" >> test-report.txt
                        echo "  - Parallel tests: PASSED" >> test-report.txt
                        echo "" >> test-report.txt
                        echo "Test Status: ALL TESTS PASSED" >> test-report.txt
                        
                        cat test-report.txt
                    '''
                }
            }
        }
        
        stage('✅ Success!') {
            steps {
                echo '🎉 Congratulations! Test Master pipeline completed successfully!'
                echo 'You have mastered:'
                echo '  - Advanced testing strategies'
                echo '  - TestContainers integration'
                echo '  - Database testing'
                echo '  - Parallel test execution'
                echo '  - Test reporting'
                echo ''
                echo 'You are now a Test Master!'
            }
        }
    }
    
    post {
        always {
            echo 'Pipeline execution completed!'
        }
        success {
            echo '🎊 Test Master pipeline completed successfully!'
            echo 'All tests passed!'
        }
        failure {
            echo '❌ Pipeline failed - check the logs above'
        }
    }
}