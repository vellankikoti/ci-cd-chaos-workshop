pipeline {
    agent any
    
    // Production-grade options
    options {
        timeout(time: 15, unit: 'MINUTES')
        timestamps()
        buildDiscarder(logRotator(numToKeepStr: '10'))
        skipDefaultCheckout()
    }
    
    // Environment variables
    environment {
        APP_NAME = 'parameterized-microservice'
        BUILD_TIMESTAMP = "${new Date().format('yyyyMMdd-HHmmss')}"
    }
    
    // Parameterized build parameters
    parameters {
        choice(
            name: 'ENVIRONMENT',
            choices: ['Development', 'Staging', 'Production'],
            description: 'Select the deployment environment'
        )
        string(
            name: 'VERSION',
            defaultValue: '1.0.0',
            description: 'Specify the application version'
        )
        booleanParam(
            name: 'RUN_TESTS',
            defaultValue: true,
            description: 'Run automated tests before deployment?'
        )
        choice(
            name: 'FEATURES',
            choices: ['Basic', 'Advanced', 'Enterprise'],
            description: 'Select feature set to deploy'
        )
        string(
            name: 'DEPLOYMENT_NOTES',
            defaultValue: 'Standard deployment',
            description: 'Add deployment notes (optional)'
        )
    }
    
    stages {
        stage('📋 Parameter Validation') {
            steps {
                sh '''
                    echo ""
                    echo "╔══════════════════════════════════════════════════════════════════════════════╗"
                    echo "║                    📋 PARAMETER VALIDATION                                  ║"
                    echo "╠══════════════════════════════════════════════════════════════════════════════╣"
                    echo "║  🎯 User Input Parameters:"
                    echo "║     • Environment: ${ENVIRONMENT}"
                    echo "║     • Version: ${VERSION}"
                    echo "║     • Run Tests: ${RUN_TESTS}"
                    echo "║     • Features: ${FEATURES}"
                    echo "║     • Deployment Notes: ${DEPLOYMENT_NOTES}"
                    
                    # System information
                    HOSTNAME=$(hostname)
                    IP_ADDRESS=$(hostname -I | awk '{print $1}')
                    CURRENT_TIME=$(date)
                    
                    echo "║"
                    echo "║  🖥️  System Information:"
                    echo "║     • Build host: $HOSTNAME"
                    echo "║     • IP address: $IP_ADDRESS"
                    echo "║     • Build time: $CURRENT_TIME"
                    echo "║     • Build number: ${BUILD_NUMBER}"
                    
                    # Parameter validation
                    echo "║"
                    echo "║  ✅ Parameter Validation:"
                    if [ "${ENVIRONMENT}" = "Production" ]; then
                        echo "║     • ⚠️  PRODUCTION DEPLOYMENT DETECTED"
                        echo "║     • Extra validation steps will be performed"
                    else
                        echo "║     • Environment: ${ENVIRONMENT} (Safe for testing)"
                    fi
                    
                    if [ "${RUN_TESTS}" = "true" ]; then
                        echo "║     • Tests will be executed before deployment"
                    else
                        echo "║     • Tests will be skipped (user choice)"
                    fi
                    
                    echo "║     • Feature set: ${FEATURES}"
                    echo "║     • Version: ${VERSION}"
                    
                    echo "╚══════════════════════════════════════════════════════════════════════════════╝"
                    echo ""
                '''
            }
        }
        
        stage('🔍 Environment Analysis') {
            steps {
                sh '''
                    echo ""
                    echo "╔══════════════════════════════════════════════════════════════════════════════╗"
                    echo "║                    🔍 ENVIRONMENT ANALYSIS                                   ║"
                    echo "╠══════════════════════════════════════════════════════════════════════════════╣"
                    
                    # Environment-specific configuration
                    case "${ENVIRONMENT}" in
                        "Development")
                            echo "║  🛠️  Development Environment:"
                            echo "║     • Purpose: Development and testing"
                            echo "║     • Database: Local SQLite"
                            echo "║     • Logging: Debug level"
                            echo "║     • Monitoring: Basic"
                            echo "║     • Security: Relaxed"
                            ;;
                        "Staging")
                            echo "║  🧪 Staging Environment:"
                            echo "║     • Purpose: Pre-production testing"
                            echo "║     • Database: Production-like"
                            echo "║     • Logging: Info level"
                            echo "║     • Monitoring: Full"
                            echo "║     • Security: Production-like"
                            ;;
                        "Production")
                            echo "║  🚀 Production Environment:"
                            echo "║     • Purpose: Live user traffic"
                            echo "║     • Database: Production cluster"
                            echo "║     • Logging: Warning level"
                            echo "║     • Monitoring: Full + Alerts"
                            echo "║     • Security: Maximum"
                            ;;
                    esac
                    
                    # Feature-specific configuration
                    echo "║"
                    echo "║  🎛️  Feature Configuration:"
                    case "${FEATURES}" in
                        "Basic")
                            echo "║     • Features: Core functionality only"
                            echo "║     • Resources: 1 CPU, 512MB RAM"
                            echo "║     • Scaling: Manual"
                            echo "║     • Support: Community"
                            ;;
                        "Advanced")
                            echo "║     • Features: Core + Advanced features"
                            echo "║     • Resources: 2 CPU, 1GB RAM"
                            echo "║     • Scaling: Auto-scaling"
                            echo "║     • Support: Business hours"
                            ;;
                        "Enterprise")
                            echo "║     • Features: All features + Premium"
                            echo "║     • Resources: 4 CPU, 4GB RAM"
                            echo "║     • Scaling: Multi-region"
                            echo "║     • Support: 24/7"
                            ;;
                    esac
                    
                    # System resources
                    echo "║"
                    echo "║  💻 Available Resources:"
                    CPU_CORES=$(nproc)
                    TOTAL_MEM=$(free -h | grep Mem | awk '{print $2}')
                    USED_MEM=$(free -h | grep Mem | awk '{print $3}')
                    AVAIL_MEM=$(free -h | grep Mem | awk '{print $7}')
                    DISK_AVAIL=$(df -h . | tail -1 | awk '{print $4}')
                    
                    echo "║     • CPU cores: $CPU_CORES"
                    echo "║     • Total memory: $TOTAL_MEM"
                    echo "║     • Used memory: $USED_MEM"
                    echo "║     • Available memory: $AVAIL_MEM"
                    echo "║     • Available disk: $DISK_AVAIL"
                    
                    echo "╚══════════════════════════════════════════════════════════════════════════════╝"
                    echo ""
                '''
            }
        }
        
        stage('🧪 Conditional Testing') {
            when {
                expression { params.RUN_TESTS == true }
            }
            steps {
                sh '''
                    echo ""
                    echo "╔══════════════════════════════════════════════════════════════════════════════╗"
                    echo "║                    🧪 CONDITIONAL TESTING                                   ║"
                    echo "╠══════════════════════════════════════════════════════════════════════════════╣"
                    echo "║  🚀 Running tests (user requested)..."
                    
                    # Test execution based on environment
                    case "${ENVIRONMENT}" in
                        "Development")
                            echo "║     • Running: Unit tests only"
                            echo "║     • Test scope: Basic functionality"
                            echo "║     • Coverage: 80% minimum"
                            ;;
                        "Staging")
                            echo "║     • Running: Unit + Integration tests"
                            echo "║     • Test scope: Full functionality"
                            echo "║     • Coverage: 90% minimum"
                            ;;
                        "Production")
                            echo "║     • Running: Full test suite"
                            echo "║     • Test scope: All features + Performance"
                            echo "║     • Coverage: 95% minimum"
                            ;;
                    esac
                    
                    # Simulate test execution
                    echo "║"
                    echo "║  📊 Test Results:"
                    echo "║     • Unit tests: ✅ PASSED (45/45)"
                    echo "║     • Integration tests: ✅ PASSED (12/12)"
                    echo "║     • Code coverage: 92.3%"
                    echo "║     • Performance tests: ✅ PASSED"
                    echo "║     • Security tests: ✅ PASSED"
                    
                    echo "║"
                    echo "║  ✅ All tests passed successfully!"
                    echo "╚══════════════════════════════════════════════════════════════════════════════╝"
                    echo ""
                '''
            }
        }
        
        stage('🐳 Dynamic Container Build') {
            steps {
                sh '''
                    echo ""
                    echo "╔══════════════════════════════════════════════════════════════════════════════╗"
                    echo "║                  🐳 DYNAMIC CONTAINER BUILD                                 ║"
                    echo "╠══════════════════════════════════════════════════════════════════════════════╣"
                    echo "║  🏗️  Building container with parameters..."
                    
                    # Dynamic image tagging
                    IMAGE_TAG="${VERSION}-${ENVIRONMENT,,}-${FEATURES,,}-${BUILD_NUMBER}"
                    echo "║     • Image: ${APP_NAME}:${IMAGE_TAG}"
                    echo "║     • Version: ${VERSION}"
                    echo "║     • Environment: ${ENVIRONMENT}"
                    echo "║     • Features: ${FEATURES}"
                    
                    # Build environment info
                    BUILD_TIME=$(date)
                    BUILD_HOST=$(hostname)
                    DOCKER_VER=$(docker --version 2>/dev/null || echo 'Docker not available')
                    
                    echo "║"
                    echo "║  📊 Build Environment:"
                    echo "║     • Build time: $BUILD_TIME"
                    echo "║     • Build host: $BUILD_HOST"
                    echo "║     • Docker version: $DOCKER_VER"
                    
                    # Feature-specific build steps
                    echo "║"
                    echo "║  🔧 Build Configuration:"
                    case "${FEATURES}" in
                        "Basic")
                            echo "║     • Base image: alpine:latest"
                            echo "║     • Dependencies: Minimal"
                            echo "║     • Size: ~50MB"
                            ;;
                        "Advanced")
                            echo "║     • Base image: ubuntu:20.04"
                            echo "║     • Dependencies: Standard"
                            echo "║     • Size: ~200MB"
                            ;;
                        "Enterprise")
                            echo "║     • Base image: ubuntu:20.04"
                            echo "║     • Dependencies: Full stack"
                            echo "║     • Size: ~500MB"
                            ;;
                    esac
                    
                    # Environment-specific configuration
                    echo "║"
                    echo "║  🌍 Environment Configuration:"
                    case "${ENVIRONMENT}" in
                        "Development")
                            echo "║     • Debug mode: Enabled"
                            echo "║     • Logging: Verbose"
                            echo "║     • Hot reload: Enabled"
                            ;;
                        "Staging")
                            echo "║     • Debug mode: Disabled"
                            echo "║     • Logging: Standard"
                            echo "║     • Performance: Optimized"
                            ;;
                        "Production")
                            echo "║     • Debug mode: Disabled"
                            echo "║     • Logging: Minimal"
                            echo "║     • Performance: Maximum"
                            echo "║     • Security: Hardened"
                            ;;
                    esac
                    
                    echo "║"
                    echo "║  ✅ Container build completed successfully!"
                    echo "╚══════════════════════════════════════════════════════════════════════════════╝"
                    echo ""
                '''
            }
        }
        
        stage('🚀 Smart Deployment') {
            steps {
                sh '''
                    echo ""
                    echo "╔══════════════════════════════════════════════════════════════════════════════╗"
                    echo "║                    🚀 SMART DEPLOYMENT                                      ║"
                    echo "╠══════════════════════════════════════════════════════════════════════════════╣"
                    echo "║  🎯 Deploying to ${ENVIRONMENT} environment..."
                    
                    # Deployment details
                    DEPLOY_TIME=$(date)
                    DEPLOY_USER=$(whoami)
                    HOSTNAME=$(hostname)
                    IP_ADDRESS=$(hostname -I | awk '{print $1}')
                    
                    echo "║     • Target: ${ENVIRONMENT}"
                    echo "║     • Version: ${VERSION}"
                    echo "║     • Features: ${FEATURES}"
                    echo "║     • Deploy time: $DEPLOY_TIME"
                    echo "║     • Deploy user: $DEPLOY_USER"
                    echo "║     • Target host: $HOSTNAME"
                    echo "║     • IP address: $IP_ADDRESS"
                    
                    # Environment-specific deployment steps
                    echo "║"
                    echo "║  🔄 Deployment Steps:"
                    case "${ENVIRONMENT}" in
                        "Development")
                            echo "║     • Step 1: Quick deployment"
                            echo "║     • Step 2: Basic health check"
                            echo "║     • Step 3: Development tools setup"
                            ;;
                        "Staging")
                            echo "║     • Step 1: Blue-green deployment"
                            echo "║     • Step 2: Full health check"
                            echo "║     • Step 3: Smoke tests"
                            echo "║     • Step 4: Performance validation"
                            ;;
                        "Production")
                            echo "║     • Step 1: Backup current version"
                            echo "║     • Step 2: Blue-green deployment"
                            echo "║     • Step 3: Comprehensive health check"
                            echo "║     • Step 4: Load testing"
                            echo "║     • Step 5: Monitoring setup"
                            echo "║     • Step 6: Rollback preparation"
                            ;;
                    esac
                    
                    # Feature-specific deployment
                    echo "║"
                    echo "║  🎛️  Feature Deployment:"
                    case "${FEATURES}" in
                        "Basic")
                            echo "║     • Deploying: Core features only"
                            echo "║     • Resources: 1 CPU, 512MB RAM"
                            echo "║     • Scaling: Manual"
                            ;;
                        "Advanced")
                            echo "║     • Deploying: Core + Advanced features"
                            echo "║     • Resources: 2 CPU, 1GB RAM"
                            echo "║     • Scaling: Auto-scaling enabled"
                            ;;
                        "Enterprise")
                            echo "║     • Deploying: All features + Premium"
                            echo "║     • Resources: 4 CPU, 4GB RAM"
                            echo "║     • Scaling: Multi-region enabled"
                            echo "║     • High availability: Enabled"
                            ;;
                    esac
                    
                    # System state after deployment
                    echo "║"
                    echo "║  📊 Post-Deployment State:"
                    RUNNING_PROCS=$(ps aux | wc -l)
                    echo "║     • Running processes: $RUNNING_PROCS"
                    echo "║     • Service status: Running"
                    echo "║     • Health check: ✅ PASSED"
                    echo "║     • Monitoring: Active"
                    
                    echo "║"
                    echo "║  ✅ Deployment to ${ENVIRONMENT} completed successfully!"
                    echo "╚══════════════════════════════════════════════════════════════════════════════╝"
                    echo ""
                '''
            }
        }
        
        stage('📊 Parameterized Monitoring') {
            steps {
                sh '''
                    echo ""
                    echo "╔══════════════════════════════════════════════════════════════════════════════╗"
                    echo "║                📊 PARAMETERIZED MONITORING                                 ║"
                    echo "╠══════════════════════════════════════════════════════════════════════════════╣"
                    echo "║  🔧 Monitoring Configuration:"
                    echo "║     • Environment: ${ENVIRONMENT}"
                    echo "║     • Version: ${VERSION}"
                    echo "║     • Features: ${FEATURES}"
                    echo "║     • Health endpoints: /health, /ready"
                    
                    # Environment-specific monitoring
                    echo "║"
                    echo "║  📈 Environment-Specific Monitoring:"
                    case "${ENVIRONMENT}" in
                        "Development")
                            echo "║     • Logging: Debug level"
                            echo "║     • Metrics: Basic"
                            echo "║     • Alerts: None"
                            echo "║     • Dashboard: Simple"
                            ;;
                        "Staging")
                            echo "║     • Logging: Info level"
                            echo "║     • Metrics: Full"
                            echo "║     • Alerts: Email only"
                            echo "║     • Dashboard: Standard"
                            ;;
                        "Production")
                            echo "║     • Logging: Warning level"
                            echo "║     • Metrics: Full + Custom"
                            echo "║     • Alerts: Email + SMS + PagerDuty"
                            echo "║     • Dashboard: Advanced + Real-time"
                            ;;
                    esac
                    
                    # Feature-specific monitoring
                    echo "║"
                    echo "║  🎛️  Feature-Specific Monitoring:"
                    case "${FEATURES}" in
                        "Basic")
                            echo "║     • CPU monitoring: Basic"
                            echo "║     • Memory monitoring: Basic"
                            echo "║     • Custom metrics: None"
                            ;;
                        "Advanced")
                            echo "║     • CPU monitoring: Advanced"
                            echo "║     • Memory monitoring: Advanced"
                            echo "║     • Custom metrics: Business metrics"
                            echo "║     • Performance monitoring: Enabled"
                            ;;
                        "Enterprise")
                            echo "║     • CPU monitoring: Enterprise"
                            echo "║     • Memory monitoring: Enterprise"
                            echo "║     • Custom metrics: Full suite"
                            echo "║     • Performance monitoring: Advanced"
                            echo "║     • Security monitoring: Enabled"
                            echo "║     • Compliance monitoring: Enabled"
                            ;;
                    esac
                    
                    # System status
                    echo "║"
                    echo "║  🖥️  Current System Status:"
                    SYSTEM_UPTIME=$(uptime -p)
                    CURRENT_TIME=$(date)
                    HOSTNAME=$(hostname)
                    IP_ADDRESS=$(hostname -I | awk '{print $1}')
                    
                    echo "║     • System uptime: $SYSTEM_UPTIME"
                    echo "║     • Current time: $CURRENT_TIME"
                    echo "║     • Hostname: $HOSTNAME"
                    echo "║     • IP address: $IP_ADDRESS"
                    
                    # Resource usage
                    CPU_CORES=$(nproc)
                    TOTAL_MEM=$(free -h | grep Mem | awk '{print $2}')
                    USED_MEM=$(free -h | grep Mem | awk '{print $3}')
                    AVAIL_MEM=$(free -h | grep Mem | awk '{print $7}')
                    
                    echo "║"
                    echo "║  💻 Resource Usage:"
                    echo "║     • CPU cores: $CPU_CORES"
                    echo "║     • Total memory: $TOTAL_MEM"
                    echo "║     • Used memory: $USED_MEM"
                    echo "║     • Available memory: $AVAIL_MEM"
                    
                    echo "║"
                    echo "║  ✅ Monitoring configured for ${ENVIRONMENT} with ${FEATURES} features!"
                    echo "╚══════════════════════════════════════════════════════════════════════════════╝"
                    echo ""
                '''
            }
        }
    }
    
    post {
        always {
            script {
                def gitCommit = env.GIT_COMMIT ? env.GIT_COMMIT[0..7] : 'unknown'
                echo ""
                echo "╔══════════════════════════════════════════════════════════════════════════════╗"
                echo "║                    📊 PARAMETERIZED BUILD SUMMARY                            ║"
                echo "╠══════════════════════════════════════════════════════════════════════════════╣"
                echo "║  🎯 Build Parameters:"
                echo "║     • Environment: ${params.ENVIRONMENT}"
                echo "║     • Version: ${params.VERSION}"
                echo "║     • Features: ${params.FEATURES}"
                echo "║     • Run Tests: ${params.RUN_TESTS}"
                echo "║     • Build Number: ${env.BUILD_NUMBER}"
                echo "║     • Git Commit: ${gitCommit}"
                echo "║     • Build Time: ${currentBuild.durationString}"
                echo "║     • Status: ${currentBuild.result ?: 'SUCCESS'}"
                echo "╚══════════════════════════════════════════════════════════════════════════════╝"
                echo ""
            }
        }
        
        success {
            echo ""
            echo "╔══════════════════════════════════════════════════════════════════════════════╗"
            echo "║                    🎉 PARAMETERIZED DEPLOYMENT SUCCESS!                      ║"
            echo "╠══════════════════════════════════════════════════════════════════════════════╣"
            echo "║  ✅ Deployment to ${params.ENVIRONMENT} completed successfully!"
            echo "║  🎛️  Features: ${params.FEATURES} deployed"
            echo "║  📊 Version: ${params.VERSION} is now live"
            echo "║  🔧 Monitoring: Active and configured"
            echo "╚══════════════════════════════════════════════════════════════════════════════╝"
            echo ""
        }
        
        failure {
            echo ""
            echo "╔══════════════════════════════════════════════════════════════════════════════╗"
            echo "║                    ❌ PARAMETERIZED DEPLOYMENT FAILED!                       ║"
            echo "╠══════════════════════════════════════════════════════════════════════════════╣"
            echo "║  🚨 Deployment to ${params.ENVIRONMENT} failed!"
            echo "║  🔄 Rollback initiated automatically"
            echo "║  📞 On-call engineer notified"
            echo "║  📊 Check logs for details"
            echo "╚══════════════════════════════════════════════════════════════════════════════╝"
            echo ""
        }
    }
}
