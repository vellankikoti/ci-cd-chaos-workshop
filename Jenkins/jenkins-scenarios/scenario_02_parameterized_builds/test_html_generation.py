#!/usr/bin/env python3
import os
import sys
from datetime import datetime

# Set test environment variables
os.environ['ENVIRONMENT'] = 'Development'
os.environ['VERSION'] = '1.0.0'
os.environ['FEATURES'] = 'Basic'
os.environ['RUN_TESTS'] = 'true'
os.environ['DEPLOYMENT_NOTES'] = 'Test deployment'
os.environ['BUILD_NUMBER'] = '1'
os.environ['GIT_COMMIT'] = 'abc12345'

# Get environment variables
environment = os.environ.get('ENVIRONMENT', 'Development')
version = os.environ.get('VERSION', '1.0.0')
features = os.environ.get('FEATURES', 'Basic')
run_tests = os.environ.get('RUN_TESTS', 'true')
deployment_notes = os.environ.get('DEPLOYMENT_NOTES', 'Standard deployment')
build_number = os.environ.get('BUILD_NUMBER', '1')
git_commit = os.environ.get('GIT_COMMIT', 'unknown')[:8]

# Environment-specific configurations
env_configs = {
    "Development": {"color": "#28a745", "icon": "üõ†Ô∏è", "desc": "Development Environment", "db": "Local SQLite", "logging": "Debug", "monitoring": "Basic", "security": "Relaxed"},
    "Staging": {"color": "#ffc107", "icon": "üß™", "desc": "Staging Environment", "db": "PostgreSQL", "logging": "Info", "monitoring": "Full", "security": "Standard"},
    "Production": {"color": "#dc3545", "icon": "üöÄ", "desc": "Production Environment", "db": "PostgreSQL Cluster", "logging": "Warning", "monitoring": "Advanced", "security": "Strict"}
}

# Feature-specific configurations
feature_configs = {
    "Basic": {"caps": ["User Auth", "Basic CRUD", "Simple Dashboard"], "cpu": "1 Core", "mem": "512MB", "price": "Free", "scaling": "Manual"},
    "Advanced": {"caps": ["Analytics", "API Integration", "Custom Dashboards"], "cpu": "2 Cores", "mem": "1GB", "price": "$99/month", "scaling": "Auto"},
    "Enterprise": {"caps": ["AI/ML", "Multi-tenant", "Custom Workflows"], "cpu": "4 Cores", "mem": "4GB", "price": "Custom", "scaling": "Auto"}
}

env_config = env_configs[environment]
feature_config = feature_configs[features]

# Generate feature list HTML
feature_list_html = ''.join([f'<li>{cap}</li>' for cap in feature_config['caps']])

print(f"Environment: {environment} -> {env_config['icon']} {env_config['desc']}")
print(f"Features: {features} -> {feature_config['caps']}")
print(f"Feature list HTML: {feature_list_html}")
print(f"Color: {env_config['color']}")
print(f"CPU: {feature_config['cpu']}")
print(f"Memory: {feature_config['mem']}")
print("‚úÖ HTML generation logic works!")

# Create webapp directory and generate HTML
os.makedirs('webapp', exist_ok=True)

# Generate HTML content
html_content = f"""<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Jenkins Parameterized Build Demo - {environment}</title>
    <style>
        body {{ background: {env_config['color']}20; }}
        .header {{ background: {env_config['color']}; color: white; padding: 20px; text-align: center; }}
        .content {{ padding: 20px; }}
    </style>
</head>
<body>
    <div class="header">
        <h1>{env_config['icon']} {env_config['desc']}</h1>
        <p>Version {version} - Generated by Jenkins Parameterized Build</p>
    </div>
    <div class="content">
        <h2>Environment: {environment}</h2>
        <h3>Features: {features}</h3>
        <ul>{feature_list_html}</ul>
        <p>CPU: {feature_config['cpu']}</p>
        <p>Memory: {feature_config['mem']}</p>
        <p>Price: {feature_config['price']}</p>
    </div>
</body>
</html>"""

# Write HTML file
with open('webapp/index.html', 'w') as f:
    f.write(html_content)

print("‚úÖ HTML file generated successfully!")
print("üìÅ File: webapp/index.html")
