#!/usr/bin/env python3
"""
Manual webapp starter for Jenkins Scenario 2
Starts the webapp server manually for testing
"""

import os
import sys
import subprocess
import time
import signal
import atexit

def cleanup_process(pid):
    """Cleanup function to stop process on exit"""
    try:
        os.kill(pid, signal.SIGTERM)
        print(f"\nüõë Stopped webapp server (PID: {pid})")
    except ProcessLookupError:
        pass

def start_webapp():
    """Start the webapp server"""
    print("üöÄ Starting Jenkins Scenario 2 Webapp...")
    
    # Create webapp directory if it doesn't exist
    if not os.path.exists("webapp"):
        print("üìÅ Creating webapp directory...")
        os.makedirs("webapp")
    
    # Generate a simple HTML file
    html_content = """<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Jenkins Parameterized Build Demo - Development</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #28a74520 0%, #f8f9fa 100%);
            min-height: 100vh;
            padding: 20px;
        }
        .container {
            max-width: 1000px;
            margin: 0 auto;
            background: white;
            border-radius: 15px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        .header {
            background: linear-gradient(135deg, #28a745 0%, #2c3e50 100%);
            color: white;
            padding: 30px;
            text-align: center;
        }
        .header h1 { font-size: 2.5em; margin-bottom: 10px; }
        .header p { font-size: 1.2em; opacity: 0.9; }
        .content { padding: 40px; }
        .info-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        .info-card {
            background: #f8f9fa;
            border: 2px solid #28a74530;
            border-radius: 10px;
            padding: 20px;
            transition: all 0.3s ease;
        }
        .info-card:hover { transform: translateY(-5px); box-shadow: 0 10px 25px rgba(0,0,0,0.1); }
        .info-card h3 { color: #28a745; margin-bottom: 15px; font-size: 1.3em; }
        .feature-list { list-style: none; padding: 0; }
        .feature-list li { padding: 8px 0; border-bottom: 1px solid #e9ecef; }
        .feature-list li:before { content: '‚úÖ'; margin-right: 10px; }
        .metrics {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 15px;
            margin-top: 15px;
        }
        .metric { text-align: center; padding: 15px; background: white; border-radius: 8px; border: 2px solid #28a74520; }
        .metric-value { font-size: 1.5em; font-weight: bold; color: #28a745; }
        .metric-label { font-size: 0.9em; color: #6c757d; margin-top: 5px; }
        .demo-section {
            background: linear-gradient(135deg, #28a74510 0%, #f8f9fa 100%);
            border: 2px solid #28a74530;
            border-radius: 15px;
            padding: 30px;
            margin: 30px 0;
            text-align: center;
        }
        .footer { background: #f8f9fa; padding: 20px; text-align: center; color: #6c757d; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üõ†Ô∏è Development Environment</h1>
            <p>Version 1.0.0 - Generated by Jenkins Parameterized Build</p>
        </div>
        
        <div class="content">
            <div class="info-grid">
                <div class="info-card">
                    <h3>üåç Environment: Development</h3>
                    <ul class="feature-list">
                        <li>Environment: Development</li>
                        <li>Version: 1.0.0</li>
                        <li>Features: Basic</li>
                        <li>Tests: true</li>
                        <li>Notes: Standard deployment</li>
                    </ul>
                    <div class="metrics">
                        <div class="metric">
                            <div class="metric-value">1 Core</div>
                            <div class="metric-label">CPU</div>
                        </div>
                        <div class="metric">
                            <div class="metric-value">512MB</div>
                            <div class="metric-label">Memory</div>
                        </div>
                        <div class="metric">
                            <div class="metric-value">Free</div>
                            <div class="metric-label">Pricing</div>
                        </div>
                    </div>
                </div>
                
                <div class="info-card">
                    <h3>üéõÔ∏è Features: Basic</h3>
                    <ul class="feature-list">
                        <li>User Auth</li>
                        <li>Basic CRUD</li>
                        <li>Simple Dashboard</li>
                    </ul>
                </div>
            </div>
            
            <div class="demo-section">
                <h3>üéÆ Interactive Demo</h3>
                <p>This web application was generated by Jenkins parameterized builds!</p>
                <p><strong>Parameters used:</strong> Development + Basic + 1.0.0</p>
                <div style="background: #28a74520; padding: 15px; border-radius: 8px; margin-top: 15px;">
                    <strong>Jenkins Action:</strong> Successfully deployed Basic features to Development environment
                </div>
            </div>
        </div>
        
        <div class="footer">
            <p>Generated by Jenkins Parameterized Build - {}</p>
        </div>
    </div>
</body>
</html>""".format(time.strftime('%Y-%m-%d %H:%M:%S'))
    
    # Write HTML file
    with open("webapp/index.html", "w") as f:
        f.write(html_content)
    
    print("‚úÖ HTML file generated")
    
    # Find available port
    port = 8081
    while True:
        try:
            result = subprocess.run(['netstat', '-tuln'], capture_output=True, text=True)
            if f":{port} " not in result.stdout:
                break
            port += 1
        except:
            break
    
    print(f"üîå Using port {port}")
    
    # Start server
    print("üöÄ Starting web server...")
    try:
        process = subprocess.Popen([
            'python3', '-m', 'http.server', str(port), '--bind', '0.0.0.0'
        ], cwd='webapp')
        
        # Register cleanup
        atexit.register(cleanup_process, process.pid)
        
        # Save PID and port
        with open("webapp/webapp.pid", "w") as f:
            f.write(str(process.pid))
        with open("webapp/webapp.port", "w") as f:
            f.write(str(port))
        
        print(f"‚úÖ Web server started (PID: {process.pid})")
        print(f"üåê Access URLs:")
        print(f"   ‚Ä¢ http://localhost:{port}")
        print(f"   ‚Ä¢ http://127.0.0.1:{port}")
        print(f"   ‚Ä¢ http://0.0.0.0:{port}")
        
        # Get Docker host IP
        try:
            result = subprocess.run(['ip', 'route', 'show', 'default'], 
                                  capture_output=True, text=True, timeout=5)
            if result.returncode == 0:
                docker_host_ip = result.stdout.split()[2]
                print(f"   ‚Ä¢ http://{docker_host_ip}:{port}")
        except:
            pass
        
        print(f"\n‚èπÔ∏è  Press Ctrl+C to stop the server")
        
        # Wait for process
        try:
            process.wait()
        except KeyboardInterrupt:
            print(f"\nüõë Stopping web server...")
            process.terminate()
            process.wait()
            print("‚úÖ Web server stopped")
        
    except Exception as e:
        print(f"‚ùå Error starting web server: {e}")
        return False
    
    return True

if __name__ == "__main__":
    success = start_webapp()
    sys.exit(0 if success else 1)
