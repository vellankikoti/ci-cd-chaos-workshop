pipeline {
    agent any
    
    // Production-grade options
    options {
        timeout(time: 45, unit: 'MINUTES')           // Longer timeout for multi-env
        timestamps()                                  // Every log line timestamped
        ansiColor('xterm')                           // Colored output for readability
        buildDiscarder(logRotator(numToKeepStr: '20')) // Keep more builds for multi-env
        skipDefaultCheckout()                         // We'll checkout manually
    }
    
    // Parameters for multi-environment deployment
    parameters {
        choice(
            name: 'ENVIRONMENT',
            choices: ['dev', 'staging', 'production'],
            description: 'Target deployment environment'
        )
        choice(
            name: 'DEPLOYMENT_STRATEGY',
            choices: ['rolling', 'blue-green', 'canary'],
            description: 'Deployment strategy for this environment'
        )
        booleanParam(
            name: 'RUN_TESTS',
            defaultValue: true,
            description: 'Run automated tests'
        )
        choice(
            name: 'NOTIFICATION_CHANNEL',
            choices: ['slack', 'email', 'teams', 'none'],
            description: 'Notification channel for this deployment'
        )
        string(
            name: 'VERSION_TAG',
            defaultValue: 'latest',
            description: 'Version tag for this deployment'
        )
        booleanParam(
            name: 'ENABLE_MONITORING',
            defaultValue: true,
            description: 'Enable monitoring for this deployment'
        )
    }
    
    // Environment variables
    environment {
        APP_NAME = 'multi-environment-microservice'
        DOCKER_REGISTRY = 'your-registry.com'
        BUILD_TIMESTAMP = "${new Date().format('yyyyMMdd-HHmmss')}"
    }
    
    stages {
        stage('üîß Environment Configuration') {
            steps {
                script {
                    echo "üîß Configuring for ${params.ENVIRONMENT} environment..."
                    
                    // Environment-specific configurations
                    def configs = [
                        'dev': [
                            replicas: 1,
                            resources: 'small',
                            database: 'dev-db',
                            monitoring: 'basic',
                            backup: false,
                            domain: 'dev.company.com',
                            ssl: false
                        ],
                        'staging': [
                            replicas: 2,
                            resources: 'medium', 
                            database: 'staging-db',
                            monitoring: 'enhanced',
                            backup: true,
                            domain: 'staging.company.com',
                            ssl: true
                        ],
                        'production': [
                            replicas: 5,
                            resources: 'large',
                            database: 'prod-db',
                            monitoring: 'full',
                            backup: true,
                            domain: 'company.com',
                            ssl: true
                        ]
                    ]
                    
                    def envConfig = configs[params.ENVIRONMENT]
                    echo "üìä Environment Configuration:"
                    echo "  ‚Ä¢ Replicas: ${envConfig.replicas}"
                    echo "  ‚Ä¢ Resources: ${envConfig.resources}"
                    echo "  ‚Ä¢ Database: ${envConfig.database}"
                    echo "  ‚Ä¢ Monitoring: ${envConfig.monitoring}"
                    echo "  ‚Ä¢ Backup: ${envConfig.backup}"
                    echo "  ‚Ä¢ Domain: ${envConfig.domain}"
                    echo "  ‚Ä¢ SSL: ${envConfig.ssl}"
                    
                    // Set environment-specific variables
                    env.REPLICAS = envConfig.replicas
                    env.RESOURCES = envConfig.resources
                    env.DATABASE = envConfig.database
                    env.MONITORING = envConfig.monitoring
                    env.BACKUP = envConfig.backup
                    env.DOMAIN = envConfig.domain
                    env.SSL = envConfig.ssl
                }
            }
        }
        
        stage('üîç Code Quality & Security') {
            steps {
                script {
                    echo "üîç Running environment-specific quality checks..."
                    
                    checkout scm
                    
                    // Environment-specific quality gates
                    switch(params.ENVIRONMENT) {
                        case 'dev':
                            echo "üè† Development Quality Checks:"
                            echo "  ‚Ä¢ Basic syntax validation"
                            echo "  ‚Ä¢ Code style checks"
                            echo "  ‚Ä¢ Quick security scan"
                            break
                        case 'staging':
                            echo "üß™ Staging Quality Checks:"
                            echo "  ‚Ä¢ Full code analysis"
                            echo "  ‚Ä¢ Security vulnerability scan"
                            echo "  ‚Ä¢ Dependency audit"
                            echo "  ‚Ä¢ Performance baseline check"
                            break
                        case 'production':
                            echo "üöÄ Production Quality Checks:"
                            echo "  ‚Ä¢ Complete security audit"
                            echo "  ‚Ä¢ OWASP Top 10 scan"
                            echo "  ‚Ä¢ License compliance check"
                            echo "  ‚Ä¢ Performance regression test"
                            echo "  ‚Ä¢ Compliance validation"
                            break
                    }
                }
            }
        }
        
        stage('üß™ Environment-Specific Testing') {
            when {
                expression { params.RUN_TESTS == true }
            }
            steps {
                script {
                    echo "üß™ Running tests for ${params.ENVIRONMENT} environment..."
                    
                    switch(params.ENVIRONMENT) {
                        case 'dev':
                            echo "üè† Development Testing:"
                            echo "  ‚Ä¢ Unit tests only (fast)"
                            echo "  ‚Ä¢ Quick smoke tests"
                            echo "  ‚Ä¢ No performance testing"
                            echo "  ‚Ä¢ Mock external services"
                            break
                        case 'staging':
                            echo "üß™ Staging Testing:"
                            echo "  ‚Ä¢ Full unit test suite"
                            echo "  ‚Ä¢ Integration tests"
                            echo "  ‚Ä¢ API contract tests"
                            echo "  ‚Ä¢ Performance testing"
                            echo "  ‚Ä¢ Security testing"
                            echo "  ‚Ä¢ End-to-end tests"
                            break
                        case 'production':
                            echo "üöÄ Production Testing:"
                            echo "  ‚Ä¢ Complete test suite"
                            echo "  ‚Ä¢ Load testing"
                            echo "  ‚Ä¢ Stress testing"
                            echo "  ‚Ä¢ Security audit"
                            echo "  ‚Ä¢ Compliance checks"
                            echo "  ‚Ä¢ Disaster recovery tests"
                            break
                    }
                }
            }
        }
        
        stage('üê≥ Environment-Specific Container Build') {
            steps {
                script {
                    def imageTag = "${params.VERSION_TAG}-${params.ENVIRONMENT}-${env.BUILD_NUMBER}"
                    
                    echo "üê≥ Building container for ${params.ENVIRONMENT}..."
                    echo "  ‚Ä¢ Image tag: ${imageTag}"
                    echo "  ‚Ä¢ Environment: ${params.ENVIRONMENT}"
                    echo "  ‚Ä¢ Resources: ${env.RESOURCES}"
                    
                    // Environment-specific build optimizations
                    switch(params.ENVIRONMENT) {
                        case 'dev':
                            echo "üè† Development Build:"
                            echo "  ‚Ä¢ Debug symbols included"
                            echo "  ‚Ä¢ Development tools included"
                            echo "  ‚Ä¢ Hot reload enabled"
                            break
                        case 'staging':
                            echo "üß™ Staging Build:"
                            echo "  ‚Ä¢ Production-like optimization"
                            echo "  ‚Ä¢ Monitoring tools included"
                            echo "  ‚Ä¢ Debug logging enabled"
                            break
                        case 'production':
                            echo "üöÄ Production Build:"
                            echo "  ‚Ä¢ Maximum optimization"
                            echo "  ‚Ä¢ Minimal attack surface"
                            echo "  ‚Ä¢ Security hardened"
                            echo "  ‚Ä¢ Performance tuned"
                            break
                    }
                }
            }
        }
        
        stage('üöÄ Smart Deployment') {
            steps {
                script {
                    def deploymentStrategy = params.DEPLOYMENT_STRATEGY
                    def environment = params.ENVIRONMENT
                    
                    echo "üöÄ Deploying to ${environment} using ${deploymentStrategy} strategy..."
                    
                    // Deployment strategy explanation
                    switch(deploymentStrategy) {
                        case 'rolling':
                            echo "üîÑ Rolling Deployment:"
                            echo "  ‚Ä¢ Zero downtime deployment"
                            echo "  ‚Ä¢ Gradual rollout (one pod at a time)"
                            echo "  ‚Ä¢ Automatic rollback on failure"
                            echo "  ‚Ä¢ Health checks between rollouts"
                            break
                        case 'blue-green':
                            echo "üîµüü¢ Blue-Green Deployment:"
                            echo "  ‚Ä¢ Instant switchover"
                            echo "  ‚Ä¢ Full testing on green environment"
                            echo "  ‚Ä¢ Quick rollback capability"
                            echo "  ‚Ä¢ Traffic routing switch"
                            break
                        case 'canary':
                            echo "üê¶ Canary Deployment:"
                            echo "  ‚Ä¢ 5% traffic to new version"
                            echo "  ‚Ä¢ Gradual increase based on metrics"
                            echo "  ‚Ä¢ Automatic rollback on issues"
                            echo "  ‚Ä¢ A/B testing capabilities"
                            break
                    }
                    
                    // Environment-specific deployment
                    switch(environment) {
                        case 'dev':
                            echo "üè† Deploying to Development:"
                            echo "  ‚Ä¢ Single instance deployment"
                            echo "  ‚Ä¢ Basic monitoring enabled"
                            echo "  ‚Ä¢ Auto-deploy on commit"
                            echo "  ‚Ä¢ Development tools accessible"
                            break
                        case 'staging':
                            echo "üß™ Deploying to Staging:"
                            echo "  ‚Ä¢ Production-like setup"
                            echo "  ‚Ä¢ Enhanced monitoring"
                            echo "  ‚Ä¢ Manual approval required"
                            echo "  ‚Ä¢ QA testing environment"
                            break
                        case 'production':
                            echo "üöÄ Deploying to Production:"
                            echo "  ‚Ä¢ High availability setup"
                            echo "  ‚Ä¢ Full monitoring + alerting"
                            echo "  ‚Ä¢ Multiple approvals required"
                            echo "  ‚Ä¢ Disaster recovery enabled"
                            break
                    }
                }
            }
        }
        
        stage('üìä Environment Monitoring Setup') {
            when {
                expression { params.ENABLE_MONITORING == true }
            }
            steps {
                script {
                    echo "üìä Setting up monitoring for ${params.ENVIRONMENT}..."
                    
                    switch(params.ENVIRONMENT) {
                        case 'dev':
                            echo "üè† Development Monitoring:"
                            echo "  ‚Ä¢ Basic health checks"
                            echo "  ‚Ä¢ Error logging"
                            echo "  ‚Ä¢ Simple metrics"
                            break
                        case 'staging':
                            echo "üß™ Staging Monitoring:"
                            echo "  ‚Ä¢ Enhanced monitoring"
                            echo "  ‚Ä¢ Performance metrics"
                            echo "  ‚Ä¢ Alert thresholds"
                            echo "  ‚Ä¢ Dashboard access"
                            break
                        case 'production':
                            echo "üöÄ Production Monitoring:"
                            echo "  ‚Ä¢ Full monitoring suite"
                            echo "  ‚Ä¢ Real-time alerting"
                            echo "  ‚Ä¢ Performance analytics"
                            echo "  ‚Ä¢ SLA monitoring"
                            echo "  ‚Ä¢ PagerDuty integration"
                            break
                    }
                }
            }
        }
        
        stage('üì¢ Smart Notifications') {
            steps {
                script {
                    def channel = params.NOTIFICATION_CHANNEL
                    def environment = params.ENVIRONMENT
                    
                    if (channel != 'none') {
                        echo "üì¢ Sending notifications via ${channel}..."
                        
                        switch(channel) {
                            case 'slack':
                                echo "üí¨ Slack Notification:"
                                echo "  ‚Ä¢ Channel: #deployments-${environment}"
                                echo "  ‚Ä¢ Rich formatting with build status"
                                echo "  ‚Ä¢ Direct links to logs and dashboards"
                                echo "  ‚Ä¢ Environment-specific emoji reactions"
                                break
                            case 'email':
                                echo "üìß Email Notification:"
                                echo "  ‚Ä¢ To: devops-team@company.com"
                                echo "  ‚Ä¢ CC: ${environment}-team@company.com"
                                echo "  ‚Ä¢ Detailed deployment report"
                                echo "  ‚Ä¢ Environment-specific content"
                                break
                            case 'teams':
                                echo "üì± Teams Notification:"
                                echo "  ‚Ä¢ Channel: ${environment}-deployments"
                                echo "  ‚Ä¢ Interactive cards with status"
                                echo "  ‚Ä¢ One-click access to monitoring"
                                echo "  ‚Ä¢ Environment-specific actions"
                                break
                        }
                        
                        // Environment-specific notification content
                        switch(environment) {
                            case 'dev':
                                echo "  ‚Ä¢ Notify: Development team only"
                                echo "  ‚Ä¢ Content: Quick status update"
                                echo "  ‚Ä¢ Priority: Low"
                                break
                            case 'staging':
                                echo "  ‚Ä¢ Notify: QA + DevOps teams"
                                echo "  ‚Ä¢ Content: Testing instructions"
                                echo "  ‚Ä¢ Priority: Medium"
                                break
                            case 'production':
                                echo "  ‚Ä¢ Notify: Entire engineering team"
                                echo "  ‚Ä¢ Content: Full deployment report"
                                echo "  ‚Ä¢ Include: Performance metrics"
                                echo "  ‚Ä¢ Priority: High"
                                break
                        }
                    } else {
                        echo "üì¢ Notifications disabled for this deployment"
                    }
                }
            }
        }
    }
    
    post {
        always {
            script {
                echo "üìä Multi-Environment Deployment Summary:"
                echo "  ‚Ä¢ Environment: ${params.ENVIRONMENT}"
                echo "  ‚Ä¢ Strategy: ${params.DEPLOYMENT_STRATEGY}"
                echo "  ‚Ä¢ Version: ${params.VERSION_TAG}"
                echo "  ‚Ä¢ Build Number: ${env.BUILD_NUMBER}"
                echo "  ‚Ä¢ Build Time: ${currentBuild.durationString}"
                echo "  ‚Ä¢ Status: ${currentBuild.result ?: 'SUCCESS'}"
            }
        }
        
        success {
            echo "üéâ Multi-environment deployment successful!"
            echo "‚úÖ Service deployed to ${params.ENVIRONMENT}"
            echo "üìä Monitoring: ${params.ENABLE_MONITORING ? 'Enabled' : 'Disabled'}"
            echo "üì¢ Notifications: ${params.NOTIFICATION_CHANNEL}"
        }
        
        failure {
            echo "‚ùå Multi-environment deployment failed!"
            echo "üö® Rollback initiated for ${params.ENVIRONMENT}"
            echo "üìû ${params.ENVIRONMENT} team notified"
            echo "üìä Check logs for environment-specific details"
        }
    }
}
