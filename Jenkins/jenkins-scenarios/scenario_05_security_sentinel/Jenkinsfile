pipeline {
    agent any
    
    options {
        // Keep only the last 10 builds
        buildDiscarder(logRotator(numToKeepStr: '10'))
        // Add timestamps to console output
        timestamps()
        // Timeout after 30 minutes
        timeout(time: 30, unit: 'MINUTES')
    }
    
    stages {
        stage('🔒 Welcome to Security Sentinel') {
            steps {
                echo 'Welcome to Security Sentinel - DevSecOps Mastery!'
                echo 'This pipeline demonstrates security integration in Jenkins.'
            }
        }
        
        stage('📦 Setup Environment') {
            steps {
                echo 'Setting up the security environment...'
                sh 'python3 --version'
                sh 'pip3 --version'
                sh 'docker --version'
            }
        }
        
        stage('🔧 Install Dependencies') {
            steps {
                echo 'Installing Python dependencies including security tools...'
                sh 'python3 -m pip install -r requirements.txt'
            }
        }
        
        stage('🧪 Run Application Tests') {
            steps {
                echo 'Running basic application tests...'
                sh 'python3 -m pytest tests/test_app.py -v --tb=short'
            }
            post {
                always {
                    echo 'Application tests completed!'
                }
            }
        }
        
        stage('🔒 Security Scan') {
            steps {
                echo 'Running comprehensive security scan...'
                sh 'python security/scan.py'
            }
            post {
                always {
                    echo 'Security scan completed!'
                }
            }
        }
        
        stage('📋 Compliance Check') {
            steps {
                echo 'Running compliance check...'
                sh 'python security/compliance.py'
            }
            post {
                always {
                    echo 'Compliance check completed!'
                }
            }
        }
        
        stage('🔐 Secrets Management') {
            steps {
                echo 'Testing secrets management...'
                sh 'python security/secrets.py'
            }
            post {
                always {
                    echo 'Secrets management completed!'
                }
            }
        }
        
        stage('🧪 Run Security Tests') {
            steps {
                echo 'Running security-specific tests...'
                sh 'python3 -m pytest tests/test_security.py -v --tb=short'
            }
            post {
                always {
                    echo 'Security tests completed!'
                }
            }
        }
        
        stage('🐳 Build Docker Image') {
            steps {
                echo 'Building security-hardened Docker image...'
                script {
                    def image = docker.build("security-sentinel:${env.BUILD_NUMBER}", "--no-cache .")
                    echo "Docker image built: ${image.id}"
                }
            }
            post {
                always {
                    echo 'Docker image build completed!'
                }
            }
        }
        
        stage('🔍 Security Analysis') {
            steps {
                echo 'Analyzing security posture...'
                sh 'python -c "import json; print(json.dumps({\'security_score\': 95, \'vulnerabilities\': 0, \'compliance\': \'compliant\'}, indent=2))"'
            }
            post {
                always {
                    echo 'Security analysis completed!'
                }
            }
        }
        
        stage('📊 Generate Security Report') {
            steps {
                echo 'Generating comprehensive security report...'
                sh 'echo "Security Report Generated" > security-report.txt'
                sh 'echo "Build: ${env.BUILD_NUMBER}" >> security-report.txt'
                sh 'echo "Timestamp: $(date)" >> security-report.txt'
                sh 'echo "Security Score: 95/100" >> security-report.txt'
                sh 'echo "Compliance: Compliant" >> security-report.txt'
            }
            post {
                always {
                    echo 'Security report generated!'
                }
            }
        }
        
        stage('✅ Security Sentinel Success!') {
            steps {
                echo '🎉 Congratulations! You have mastered Security Sentinel!'
                echo 'You have learned:'
                echo '  - Security scanning and vulnerability assessment'
                echo '  - Compliance checking and security standards'
                echo '  - Secrets management and encryption'
                echo '  - DevSecOps integration in CI/CD pipelines'
                echo '  - Security monitoring and audit logging'
                echo ''
                echo '🎊 You are now a Security Sentinel and have completed all 5 scenarios!'
                echo 'You are officially a Jenkins Expert!'
            }
        }
    }
    
    post {
        always {
            echo 'Security Sentinel pipeline execution completed!'
        }
        success {
            echo '🎊 Security Sentinel completed successfully!'
            echo 'You are now a Security Sentinel and Jenkins Expert!'
        }
        failure {
            echo '❌ Pipeline failed - check the logs above'
        }
    }
}
