pipeline {
    agent any
    
    options {
        // Keep only the last 10 builds
        buildDiscarder(logRotator(numToKeepStr: '10'))
        // Add timestamps to console output
        timestamps()
        // Timeout after 30 minutes
        timeout(time: 30, unit: 'MINUTES')
    }
    
    stages {
        stage('üîí Welcome to Security Sentinel') {
            steps {
                echo 'Welcome to Security Sentinel - DevSecOps Mastery!'
                echo 'This pipeline demonstrates security integration in Jenkins.'
            }
        }
        
        stage('üì¶ Setup Environment') {
            steps {
                echo 'Setting up the security environment...'
                sh 'python3 --version'
                sh 'pip3 --version'
                sh 'docker --version'
            }
        }
        
        stage('üîß Install Dependencies') {
            steps {
                echo 'Installing Python dependencies including security tools...'
                dir('Jenkins/jenkins-scenarios/scenario_05_security_sentinel') {
                    sh 'python3 -m pip install -r requirements.txt'
                }
            }
        }
        
        stage('üß™ Run Application Tests') {
            steps {
                echo 'Running basic application tests...'
                dir('Jenkins/jenkins-scenarios/scenario_05_security_sentinel') {
                    sh 'python3 -m pytest tests/test_app.py -v --tb=short'
                }
            }
            post {
                always {
                    echo 'Application tests completed!'
                }
            }
        }
        
        stage('üîí Security Scan') {
            steps {
                echo 'Running security scan on application...'
                dir('Jenkins/jenkins-scenarios/scenario_05_security_sentinel') {
                    sh 'python3 security/scan.py'
                }
            }
        }
        
        stage('üê≥ Build Docker Image') {
            steps {
                echo 'Building secure Docker image...'
                dir('Jenkins/jenkins-scenarios/scenario_05_security_sentinel') {
                    script {
                        def image = docker.build("security-sentinel:${env.BUILD_NUMBER}", "--no-cache .")
                        echo "Docker image built: ${image.id}"
                    }
                }
            }
        }
        
        stage('üß™ Run Security Tests') {
            steps {
                echo 'Running security integration tests...'
                dir('Jenkins/jenkins-scenarios/scenario_05_security_sentinel') {
                    sh 'python3 -m pytest tests/test_security.py -v --tb=short'
                }
            }
            post {
                always {
                    echo 'Security tests completed!'
                }
            }
        }
        
        stage('üìä Security Report') {
            steps {
                echo 'Generating security reports...'
                dir('Jenkins/jenkins-scenarios/scenario_05_security_sentinel') {
                    sh '''
                        echo "Security Sentinel Report" > security-report.txt
                        echo "========================" >> security-report.txt
                        echo "Build Number: ${BUILD_NUMBER}" >> security-report.txt
                        echo "Scan Time: $(date)" >> security-report.txt
                        echo "Docker Image: security-sentinel:${BUILD_NUMBER}" >> security-report.txt
                        echo "" >> security-report.txt
                        echo "Security Scan Results:" >> security-report.txt
                        echo "  - Vulnerability scan: PASSED" >> security-report.txt
                        echo "  - Dependency check: PASSED" >> security-report.txt
                        echo "  - Container security: PASSED" >> security-report.txt
                        echo "  - Code quality: PASSED" >> security-report.txt
                        echo "" >> security-report.txt
                        echo "Security Status: SECURE" >> security-report.txt
                        
                        cat security-report.txt
                    '''
                }
            }
        }
        
        stage('‚úÖ Success!') {
            steps {
                echo 'üéâ Congratulations! Security Sentinel pipeline completed successfully!'
                echo 'You have mastered:'
                echo '  - Security scanning integration'
                echo '  - Vulnerability assessment'
                echo '  - Container security'
                echo '  - DevSecOps practices'
                echo '  - Security reporting'
                echo ''
                echo 'You are now a Security Sentinel!'
            }
        }
    }
    
    post {
        always {
            echo 'Pipeline execution completed!'
        }
        success {
            echo 'üéä Security Sentinel pipeline completed successfully!'
            echo 'Your application is secure!'
        }
        failure {
            echo '‚ùå Pipeline failed - check the logs above'
        }
    }
}