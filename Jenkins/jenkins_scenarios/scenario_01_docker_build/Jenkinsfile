pipeline {
    agent any

    parameters {
        string(
            name: 'APP_VERSION',
            defaultValue: '1',
            description: 'Which app version (1-5) do you want to build and run?'
        )
    }

    environment {
        CONTAINER_NAME = "chaos-app-v${params.APP_VERSION}"
        IMAGE_TAG = "ci-cd-chaos-app:v${params.APP_VERSION}"
        DOCKERFILE_PATH = "Jenkins/jenkins_scenarios/scenario_01_docker_build/Dockerfile"
    }

    stages {
        stage('Checkout Repo') {
            steps {
                git(
                    url: 'https://github.com/vellankikoti/ci-cd-chaos-workshop.git',
                    branch: '<your-branch>',
                    credentialsId: '<your-creds-id-if-needed>'
                )
            }
        }

        stage('Verify Workspace') {
            steps {
                sh '''
                    echo "=== WORKSPACE ==="
                    pwd
                    echo "=== Repo contents ==="
                    ls -la
                    echo "=== Checking Dockerfile path ==="
                    ls -la Jenkins/jenkins_scenarios/scenario_01_docker_build
                    cat Jenkins/jenkins_scenarios/scenario_01_docker_build/Dockerfile
                '''
            }
        }

        stage('Validate Version') {
            steps {
                script {
                    def allowedVersions = ['1','2','3','4','5']
                    if (!allowedVersions.contains(params.APP_VERSION)) {
                        echo '''
üö´ CHAOS AGENT STRIKES AGAIN! üö´
Invalid version!
'''
                        error("Invalid APP_VERSION: ${params.APP_VERSION}")
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                sh """
                    docker build -t $IMAGE_TAG \\
                        --build-arg APP_VERSION=${params.APP_VERSION} \\
                        -f $DOCKERFILE_PATH \\
                        .
                """
            }
        }

        stage('Full Cleanup') {
            steps {
                sh """
                    docker ps -q --filter publish=3000 | xargs -r docker rm -f || true
                    docker ps -a --filter "name=$CONTAINER_NAME" -q | xargs -r docker rm -f || true
                """
            }
        }

        stage('Run App Container') {
            steps {
                sh """
                    docker run -d --name $CONTAINER_NAME \\
                        -p 3000:3000 \\
                        $IMAGE_TAG
                """
            }
        }

        stage('Test App HTTP Response') {
            steps {
                script {
                    def result = sh(
                        script: '''
                            sleep 3
                            STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000)
                            echo "HTTP Status: $STATUS_CODE"
                            if [ "$STATUS_CODE" -ne 200 ]; then
                                echo "‚ùå App did not respond correctly!"
                                exit 1
                            else
                                echo "‚úÖ App responded successfully!"
                            fi
                        ''',
                        returnStatus: true
                    )
                    if (result != 0) {
                        error("App HTTP test failed!")
                    }
                }
            }
        }

        stage('Final Cleanup') {
            steps {
                sh "docker rm -f $CONTAINER_NAME || true"
            }
        }
    }

    post {
        always {
            echo "‚ú® Chaos Agent defeated‚Ä¶ for now! Pipeline finished."
        }
    }
}
