pipeline {
    agent any

    environment {
        // Use dynamic workspace path instead of hardcoded
        SCENARIO_PATH = "${WORKSPACE}/Jenkins/jenkins_scenarios/scenario_02_testcontainers"
        IMAGE_NAME = "chaos-workshop-testcontainers"
        BUILD_TAG = "${BUILD_NUMBER}"
        TESTCONTAINERS_RYUK_DISABLED = 'true'
    }

    parameters {
        choice(
            name: 'TEST_MODE',
            choices: ['fail', 'pass'],
            description: 'Run failing tests or fixed tests?'
        )
    }

    stages {
        stage('🔧 Setup Docker Permissions') {
            steps {
                sh '''
                    echo "🔧 Setting up Docker permissions..."
                    
                    # Ensure Docker socket is accessible
                    if [ ! -S /var/run/docker.sock ]; then
                        echo "ERROR: Docker socket not found at /var/run/docker.sock!"
                        echo "Make sure Docker is running and the socket is mounted in Jenkins container"
                        exit 1
                    fi
                    
                    # Check current user and Docker socket permissions
                    echo "Current user: $(whoami)"
                    echo "Docker socket permissions: $(ls -la /var/run/docker.sock)"
                    
                    # Try to fix permissions if needed (ignore errors if no sudo access)
                    sudo chmod 666 /var/run/docker.sock 2>/dev/null || echo "Note: Could not change socket permissions (no sudo access)"
                    
                    # Test Docker access
                    if docker ps > /dev/null 2>&1; then
                        echo "✅ Docker access verified successfully"
                        docker --version
                    else
                        echo "❌ ERROR: Cannot access Docker daemon"
                        echo "Please ensure:"
                        echo "1. Docker is running"
                        echo "2. Jenkins container has Docker socket mounted: -v /var/run/docker.sock:/var/run/docker.sock"
                        echo "3. Jenkins user has Docker permissions"
                        exit 1
                    fi
                '''
            }
        }

        stage('📁 Verify Local Workspace') {
            steps {
                sh '''
                    echo "=== WORKSPACE VERIFICATION ==="
                    echo "Current working directory: $(pwd)"
                    echo "WORKSPACE environment variable: ${WORKSPACE}"
                    echo "SCENARIO_PATH: ${SCENARIO_PATH}"
                    
                    echo "=== Workspace contents ==="
                    ls -la
                    
                    echo "=== Checking for Jenkins directory ==="
                    if [ -d "Jenkins" ]; then
                        echo "✅ Jenkins directory found"
                        ls -la Jenkins/
                    else
                        echo "❌ Jenkins directory not found in workspace"
                        echo "Available directories:"
                        ls -la
                        exit 1
                    fi
                    
                    echo "=== Checking scenario directory ==="
                    if [ -d "${SCENARIO_PATH}" ]; then
                        echo "✅ Scenario directory found: ${SCENARIO_PATH}"
                        ls -la "${SCENARIO_PATH}/"
                    else
                        echo "❌ Scenario directory not found: ${SCENARIO_PATH}"
                        echo "Checking if Jenkins scenarios exist..."
                        find . -name "scenario_02_testcontainers" -type d
                        exit 1
                    fi

                    echo "=== Checking required files ==="
                    for file in requirements.txt; do
                        if [ -f "${SCENARIO_PATH}/${file}" ]; then
                            echo "✅ ${file} found"
                        else
                            echo "❌ ${file} not found in ${SCENARIO_PATH}"
                            echo "Contents of scenario directory:"
                            ls -la "${SCENARIO_PATH}/"
                            exit 1
                        fi
                    done
                    
                    echo "=== Checking tests directory ==="
                    if [ -d "${SCENARIO_PATH}/tests" ]; then
                        echo "✅ Tests directory found"
                        ls -la "${SCENARIO_PATH}/tests/"
                    else
                        echo "❌ Tests directory not found"
                        exit 1
                    fi
                    
                    echo "✅ All workspace verification checks passed!"
                '''
            }
        }

        stage('🔧 Install Python and Dependencies') {
            steps {
                sh '''
                    echo "🔧 Installing Python and dependencies..."
                    
                    # Check Python availability
                    if command -v python3 &> /dev/null; then
                        echo "✅ Python3 found: $(python3 --version)"
                    else
                        echo "Installing Python3..."
                        # Try different package managers based on OS
                        if command -v apt-get &> /dev/null; then
                            apt-get update && apt-get install -y python3 python3-pip python3-venv
                        elif command -v yum &> /dev/null; then
                            yum install -y python3 python3-pip
                        elif command -v apk &> /dev/null; then
                            apk add --no-cache python3 py3-pip
                        else
                            echo "❌ Cannot install Python3 - unknown package manager"
                            exit 1
                        fi
                    fi
                    
                    # Create virtual environment (remove if exists)
                    echo "Creating virtual environment..."
                    VENV_PATH="/tmp/testenv_${BUILD_NUMBER}"
                    rm -rf "${VENV_PATH}"
                    python3 -m venv "${VENV_PATH}" || {
                        echo "❌ Failed to create virtual environment"
                        echo "Trying without venv..."
                        VENV_PATH=""
                    }
                    
                    # Install requirements
                    echo "Installing requirements..."
                    cd "${SCENARIO_PATH}"
                    
                    if [ -n "${VENV_PATH}" ]; then
                        echo "Activating virtual environment..."
                        . "${VENV_PATH}/bin/activate"
                    fi
                    
                    # Check if requirements.txt has content
                    if [ -s requirements.txt ]; then
                        echo "Installing from requirements.txt..."
                        pip3 install --no-cache-dir --upgrade pip
                        pip3 install --no-cache-dir -r requirements.txt || {
                            echo "❌ Failed to install requirements"
                            echo "Requirements file contents:"
                            cat requirements.txt
                            exit 1
                        }
                    else
                        echo "requirements.txt is empty, installing common dependencies..."
                        pip3 install --no-cache-dir --upgrade pip
                        pip3 install pytest testcontainers sqlalchemy psycopg2-binary redis pymongo
                    fi
                    
                    # Store venv path for later stages
                    echo "${VENV_PATH}" > /tmp/venv_path_${BUILD_NUMBER}
                    
                    echo "✅ Dependencies installed successfully!"
                    echo "Installed packages:"
                    pip3 list | grep -E "(pytest|testcontainers|sqlalchemy|redis|pymongo)"
                '''
            }
        }

        stage('🧹 Pre-Cleanup') {
            steps {
                sh '''
                    echo "🔪 Pre-cleanup: Killing leftover containers..."
                    docker ps -q --filter name=testcontainers | xargs -r docker rm -f || true
                '''
            }
        }

        stage('📊 Run Tests') {
            steps {
                script {
                    if (params.TEST_MODE == 'fail') {
                        echo "🧨 Chaos Agent is laughing… we're running failing tests!"
                        sh '''
                            cd "${SCENARIO_PATH}"
                            echo "=== Running failing tests ==="
                            
                            # Get venv path
                            VENV_PATH=$(cat /tmp/venv_path_${BUILD_NUMBER} 2>/dev/null || echo "")
                            
                            # Activate virtual environment if exists
                            if [ -n "${VENV_PATH}" ] && [ -d "${VENV_PATH}" ]; then
                                echo "Activating virtual environment: ${VENV_PATH}"
                                . "${VENV_PATH}/bin/activate"
                            fi
                            
                            # Check for test files and run them
                            echo "Available test files:"
                            find tests/ -name "*.py" | head -10
                            
                            # Run failing tests if they exist
                            FAIL_TESTS=$(find tests/ -name "*fail*.py" | head -5 | tr '\n' ' ')
                            if [ -n "${FAIL_TESTS}" ]; then
                                echo "Running failing tests: ${FAIL_TESTS}"
                                pytest -v ${FAIL_TESTS} || echo "Tests failed as expected (chaos mode)"
                            else
                                echo "No failing test files found, running all tests in fail mode"
                                pytest tests/ -k "fail" || echo "Tests failed as expected (chaos mode)"
                            fi
                        '''
                    } else {
                        echo "⚔️ Deploying TestContainers — Chaos Agent's defeat is imminent!"
                        sh '''
                            cd "${SCENARIO_PATH}"
                            echo "=== Running passing tests ==="
                            
                            # Get venv path
                            VENV_PATH=$(cat /tmp/venv_path_${BUILD_NUMBER} 2>/dev/null || echo "")
                            
                            # Activate virtual environment if exists
                            if [ -n "${VENV_PATH}" ] && [ -d "${VENV_PATH}" ]; then
                                echo "Activating virtual environment: ${VENV_PATH}"
                                . "${VENV_PATH}/bin/activate"
                            fi
                            
                            # Check for test files and run them
                            echo "Available test files:"
                            find tests/ -name "*.py" | head -10
                            
                            # Run passing tests if they exist
                            PASS_TESTS=$(find tests/ -name "*pass*.py" | head -5 | tr '\n' ' ')
                            if [ -n "${PASS_TESTS}" ]; then
                                echo "Running passing tests: ${PASS_TESTS}"
                                pytest -v ${PASS_TESTS}
                            else
                                echo "No passing test files found, running all tests"
                                pytest tests/ --tb=short
                            fi
                            
                            echo "✅ Tests completed successfully!"
                        '''
                    }
                }
            }
        }
    }

    post {
        always {
            echo "✨ Chaos Agent defeated… or plotting his next move!"
        }
        success {
            echo "🎉 All TestContainers tests completed successfully!"
        }
        failure {
            echo "💥 Some TestContainers tests failed - Chaos Agent strikes again!"
        }
    }
}
