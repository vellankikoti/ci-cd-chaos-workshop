pipeline {
    agent any

    parameters {
        choice(
            name: 'TEST_MODE',
            choices: ['fail', 'pass'],
            description: 'Run failing tests or fixed tests?'
        )
    }

    environment {
        CUSTOM_IMAGE_TAG = 'ci-cd-chaos-python:latest'
        TEST_SCENARIO_DIR = "Jenkins/jenkins_scenarios/scenario_02_testcontainers"
    }

    stages {

        stage('Checkout Repo') {
            steps {
                sh '''
                    rm -rf repo
                    git clone --single-branch --branch phase-3-jenkins https://github.com/vellankikoti/ci-cd-chaos-workshop.git repo
                '''
            }
        }

        stage('Build Custom Python Image') {
            steps {
                sh '''
                    echo "=== Building custom Python image ==="
                    docker build -t $CUSTOM_IMAGE_TAG \
                        -f repo/Jenkins/jenkins_scenarios/scenario_02_testcontainers/Dockerfile \
                        repo
                '''
            }
        }

        stage('Pre-Cleanup') {
            steps {
                sh '''
                    echo "ðŸ”ª Pre-cleanup: Killing any leftover testcontainers..."

                    docker ps -q --filter name=testcontainers | xargs -r docker rm -f || true
                '''
            }
        }

        stage('Run Inside Custom Python Image') {
            agent {
                docker {
                    image "${CUSTOM_IMAGE_TAG}"
                    args '-u root'
                }
            }
            steps {
                script {
                    def testFiles = []

                    if (params.TEST_MODE == 'fail') {
                        testFiles = [
                            'tests/test_postgres_fail.py',
                            'tests/test_redis_fail.py'
                        ]
                        echo "Chaos Agent is laughingâ€¦ weâ€™re running failing tests!"
                    } else {
                        testFiles = [
                            'tests/test_postgres_pass.py',
                            'tests/test_redis_pass.py'
                        ]
                        echo "Deploying TestContainers â€” Chaos Agentâ€™s defeat is imminent!"
                    }

                    // Install Python requirements
                    sh """
                        cd repo
                        pip install --no-cache-dir -r requirements.txt
                    """

                    // Run each test file separately for clarity
                    testFiles.each { testFile ->
                        sh """
                            cd repo
                            echo "=== Running test: ${testFile} ==="
                            pytest Jenkins/jenkins_scenarios/scenario_02_testcontainers/${testFile}
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            echo "âœ¨ Chaos Agent defeatedâ€¦ or plotting his next move!"
        }
    }
}
