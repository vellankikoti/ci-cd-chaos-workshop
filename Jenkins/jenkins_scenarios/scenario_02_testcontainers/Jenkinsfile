pipeline {
    agent any

    environment {
        SCENARIO_PATH = '/workspace/ci-cd-chaos-workshop/Jenkins/jenkins_scenarios/scenario_02_testcontainers'
        IMAGE_NAME = "chaos-workshop-testcontainers"
        BUILD_TAG = "${BUILD_NUMBER}"
        TESTCONTAINERS_RYUK_DISABLED = 'true'
    }

    parameters {
        choice(
            name: 'TEST_MODE',
            choices: ['fail', 'pass'],
            description: 'Run failing tests or fixed tests?'
        )
    }

    stages {
        stage('Verify Local Workspace') {
            steps {
                sh '''
                    echo "=== WORKSPACE ==="
                    pwd
                    echo "=== Workspace contents ==="
                    ls -la
                    echo "=== Checking scenario directory ==="
                    ls -la ${SCENARIO_PATH}

                    if [ ! -f ${SCENARIO_PATH}/requirements.txt ]; then
                        echo "ERROR: requirements.txt missing!"
                        exit 1
                    else
                        echo "âœ… requirements.txt found!"
                    fi
                '''
            }
        }

        stage('ðŸ”§ Install Python and Dependencies') {
            steps {
                sh '''
                    echo "ðŸ”§ Installing Python and dependencies..."
                    cd ${SCENARIO_PATH}
                    
                    # Install Python and pip if not available
                    if ! command -v python3 &> /dev/null; then
                        echo "Installing Python3..."
                        apt-get update
                        apt-get install -y python3 python3-pip python3-venv
                    fi
                    
                    # Create virtual environment (remove if exists)
                    echo "Creating virtual environment..."
                    rm -rf /tmp/testenv
                    python3 -m venv /tmp/testenv
                    . /tmp/testenv/bin/activate
                    
                    # Install requirements
                    echo "Installing requirements..."
                    pip install --no-cache-dir -r requirements.txt
                    # Ensure SQLAlchemy is available for TestContainers
                    pip install sqlalchemy==2.0.23
                    
                    echo "âœ… Dependencies installed successfully!"
                '''
            }
        }

        stage('ðŸ§¹ Pre-Cleanup') {
            steps {
                sh '''
                    echo "ðŸ”ª Pre-cleanup: Killing leftover containers..."
                    docker ps -q --filter name=testcontainers | xargs -r docker rm -f || true
                '''
            }
        }

        stage('ðŸ“Š Run Tests') {
            steps {
                script {
                    if (params.TEST_MODE == 'fail') {
                        echo "Chaos Agent is laughingâ€¦ we're running failing tests!"
                        sh '''
                            cd ${SCENARIO_PATH}
                            echo "=== Running failing tests ==="
                            
                            # Activate virtual environment and run tests
                            . /tmp/testenv/bin/activate
                            pytest tests/test_postgres_fail.py tests/test_redis_fail.py
                        '''
                    } else {
                        echo "Deploying TestContainers â€” Chaos Agent's defeat is imminent!"
                        sh '''
                            cd ${SCENARIO_PATH}
                            echo "=== Running passing tests ==="
                            
                            # Activate virtual environment and run tests
                            . /tmp/testenv/bin/activate
                            pytest tests/test_postgres_pass.py tests/test_redis_pass.py
                        '''
                    }
                }
            }
        }
    }

    post {
        always {
            echo "âœ¨ Chaos Agent defeatedâ€¦ or plotting his next move!"
        }
        success {
            echo "ðŸŽ‰ All TestContainers tests completed successfully!"
        }
        failure {
            echo "ðŸ’¥ Some TestContainers tests failed - Chaos Agent strikes again!"
        }
    }
}
