pipeline {
    agent any
    
    // Build options
    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        timeout(time: 1, unit: 'HOURS')
        skipDefaultCheckout(true)
        timestamps()
    }
    
    parameters {
        choice(
            name: 'TEST_MODE',
            choices: ['pass', 'fail'],
            description: 'Run passing tests or failing tests?'
        )
    }
    
    environment {
        DOCKER_BUILDKIT = '1'
        PYTHONUNBUFFERED = '1'
        SCENARIO_NAME = 'scenario_03_html_reports'
        IMAGE_NAME = "chaos-workshop-scenario-03"
        BUILD_TAG = "${BUILD_NUMBER}"
        REPORTS_DIR = 'reports'
        SCENARIO_PATH = '/workspace/ci-cd-chaos-workshop/Jenkins/jenkins_scenarios/scenario_03_html_reports'
    }
    
    stages {
        stage('Verify Local Workspace') {
            steps {
                sh '''
                    echo "=== WORKSPACE ==="
                    pwd
                    echo "=== Workspace contents ==="
                    ls -la
                    echo "=== Checking scenario directory ==="
                    ls -la ${SCENARIO_PATH}

                    if [ ! -f ${SCENARIO_PATH}/Dockerfile ]; then
                        echo "ERROR: Dockerfile missing!"
                        exit 1
                    else
                        echo "‚úÖ Dockerfile found!"
                    fi
                '''
            }
        }

        stage('üîß Build Docker Image') {
            steps {
                script {
                    // Ensure report_generator.py is present in the scenario directory
                    sh '''
                        echo "Checking for report_generator.py in scenario directory..."
                        if [ ! -f "${SCENARIO_PATH}/report_generator.py" ]; then
                          echo "report_generator.py missing, attempting to copy from repo root..."
                          cp /workspace/ci-cd-chaos-workshop/Jenkins/jenkins_scenarios/scenario_03_html_reports/report_generator.py "${SCENARIO_PATH}/" || true
                        fi
                        echo "Contents of scenario directory before build:"
                        ls -la "${SCENARIO_PATH}"
                    '''
                }
                sh """
                    echo "üõ†Ô∏è Building Docker image: ${IMAGE_NAME}"
                    docker build \
                        --no-cache \
                        -t ${IMAGE_NAME}:${BUILD_TAG} \
                        -f ${SCENARIO_PATH}/Dockerfile \
                        ${SCENARIO_PATH}
                """
            }
        }

        stage('üßπ Pre-Cleanup') {
            steps {
                sh '''
                    echo "üî™ Pre-cleanup: Killing leftover containers..."
                    docker ps -q --filter name=testcontainers | xargs -r docker rm -f || true
                    docker ps -q --filter name=chaos-workshop | xargs -r docker rm -f || true
                '''
            }
        }

        stage('üìä Run Test Scenarios') {
            steps {
                script {
                    def testMode = params.TEST_MODE
                    sh """
                        echo "=== Running tests in Docker container ==="
                        docker run --rm \\
                            -v /var/run/docker.sock:/var/run/docker.sock \\
                            -v \$(pwd)/reports:/app/reports \\
                            ${IMAGE_NAME}:${BUILD_TAG} \\
                            sh -c "
                                cd /app
                                echo 'Debug: Checking test files...'
                                ls -la tests/
                                echo 'Running config validation tests...'
                                pytest tests/test_config_validation_${testMode}.py -v --json-report --json-report-file=reports/config_validation_${testMode}.json || echo 'Config validation tests failed'
                                echo 'Running API health tests...'
                                pytest tests/test_api_health_${testMode}.py -v --json-report --json-report-file=reports/api_health_${testMode}.json || echo 'API health tests failed'
                                echo 'Running PostgreSQL tests...'
                                pytest tests/test_postgres_${testMode}.py -v --json-report --json-report-file=reports/postgres_${testMode}.json || echo 'PostgreSQL tests failed'
                                echo 'Running Redis tests...'
                                pytest tests/test_redis_${testMode}.py -v --json-report --json-report-file=reports/redis_${testMode}.json || echo 'Redis tests failed'
                                echo 'Running secret scan tests...'
                                pytest tests/test_secret_scan_${testMode}.py -v --json-report --json-report-file=reports/secret_scan_${testMode}.json || echo 'Secret scan tests failed'
                                echo 'Generating HTML report...'
                                python report_generator.py || echo 'Report generation failed'
                            "
                    """
                }
            }
        }

        stage('üì¶ Archive Reports') {
            steps {
                sh """
                    echo "üì¶ Archiving reports..."
                    ls -la reports/ || echo "Reports directory not found"
                """
                archiveArtifacts artifacts: 'reports/*.html', allowEmptyArchive: true
            }
        }
    }

    post {
        always {
            echo "‚ú® Chaos Agent defeated‚Ä¶ or plotting his next move!"
        }
        success {
            echo "üéâ All tests completed successfully!"
        }
        failure {
            echo "üí• Some tests failed - Chaos Agent strikes again!"
        }
    }
}
