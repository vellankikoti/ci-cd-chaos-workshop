pipeline {
    agent any

    environment {
        PYTHONUNBUFFERED = '1'
        PIP_DISABLE_PIP_VERSION_CHECK = '1'
        REPO_DIR = 'repo'
    }

    parameters {
        string(name: 'REPO_URL', defaultValue: 'https://github.com/vellankikoti/ci-cd-chaos-workshop.git', description: 'GitHub repository URL')
        string(name: 'REPO_BRANCH', defaultValue: 'phase-3-jenkins', description: 'Branch to clone')

        booleanParam(name: 'RUN_API_HEALTH_PASS', defaultValue: true, description: 'Run passing API health check test')
        booleanParam(name: 'RUN_API_HEALTH_FAIL', defaultValue: false, description: 'Run failing API health check test')

        booleanParam(name: 'RUN_POSTGRES_PASS', defaultValue: true, description: 'Run passing Postgres connectivity test')
        booleanParam(name: 'RUN_POSTGRES_FAIL', defaultValue: false, description: 'Run failing Postgres connectivity test')

        booleanParam(name: 'RUN_REDIS_PASS', defaultValue: true, description: 'Run passing Redis connectivity test')
        booleanParam(name: 'RUN_REDIS_FAIL', defaultValue: false, description: 'Run failing Redis connectivity test')

        booleanParam(name: 'RUN_SECRET_SCAN_PASS', defaultValue: true, description: 'Run passing secret scanning test')
        booleanParam(name: 'RUN_SECRET_SCAN_FAIL', defaultValue: false, description: 'Run failing secret scanning test')

        booleanParam(name: 'RUN_CONFIG_VALIDATION_PASS', defaultValue: true, description: 'Run passing config validation test')
        booleanParam(name: 'RUN_CONFIG_VALIDATION_FAIL', defaultValue: false, description: 'Run failing config validation test')
    }

    stages {
        stage('Pre-Cleanup') {
            steps {
                echo "‚ú® Cleaning workspace and containers..."
                sh '''
                    docker ps -q --filter name=testcontainers | xargs -r docker rm -f || true
                    rm -rf ${REPO_DIR} reports
                    mkdir -p reports
                '''
            }
        }

        stage('Clone Repo Outside Docker') {
            steps {
                sh """
                    git clone --single-branch --branch ${params.REPO_BRANCH} ${params.REPO_URL} ${REPO_DIR}
                """
            }
        }

        stage('Build Docker Image') {
            steps {
                sh """
                    docker build -t ci-cd-chaos-html:latest ${REPO_DIR}/Jenkins/jenkins_scenarios/scenario_03_html_reports
                """
            }
        }

        stage('Run Selected Tests Inside Docker') {
            steps {
                script {
                    def relativeTests = []

                    if (params.RUN_API_HEALTH_PASS) {
                        relativeTests << "Jenkins/jenkins_scenarios/scenario_03_html_reports/tests/test_api_health_pass.py"
                    }
                    if (params.RUN_API_HEALTH_FAIL) {
                        relativeTests << "Jenkins/jenkins_scenarios/scenario_03_html_reports/tests/test_api_health_fail.py"
                    }

                    if (params.RUN_POSTGRES_PASS) {
                        relativeTests << "Jenkins/jenkins_scenarios/scenario_03_html_reports/tests/test_postgres_pass.py"
                    }
                    if (params.RUN_POSTGRES_FAIL) {
                        relativeTests << "Jenkins/jenkins_scenarios/scenario_03_html_reports/tests/test_postgres_fail.py"
                    }

                    if (params.RUN_REDIS_PASS) {
                        relativeTests << "Jenkins/jenkins_scenarios/scenario_03_html_reports/tests/test_redis_pass.py"
                    }
                    if (params.RUN_REDIS_FAIL) {
                        relativeTests << "Jenkins/jenkins_scenarios/scenario_03_html_reports/tests/test_redis_fail.py"
                    }

                    if (params.RUN_SECRET_SCAN_PASS) {
                        relativeTests << "Jenkins/jenkins_scenarios/scenario_03_html_reports/tests/test_secret_scan_pass.py"
                    }
                    if (params.RUN_SECRET_SCAN_FAIL) {
                        relativeTests << "Jenkins/jenkins_scenarios/scenario_03_html_reports/tests/test_secret_scan_fail.py"
                    }

                    if (params.RUN_CONFIG_VALIDATION_PASS) {
                        relativeTests << "Jenkins/jenkins_scenarios/scenario_03_html_reports/tests/test_config_validation_pass.py"
                    }
                    if (params.RUN_CONFIG_VALIDATION_FAIL) {
                        relativeTests << "Jenkins/jenkins_scenarios/scenario_03_html_reports/tests/test_config_validation_fail.py"
                    }

                    if (relativeTests.size() == 0) {
                        error "‚ö†Ô∏è No tests selected. Chaos Agent cannot be defeated without tests!"
                    }

                    docker.image('ci-cd-chaos-html:latest').inside(
                        "-u root -v ${env.WORKSPACE}/${env.REPO_DIR}:/tests -v ${env.WORKSPACE}/reports:/reports"
                    ) {
                        sh """
                            echo '=== Verify test files exist ==='
                            ls -R /tests/Jenkins/jenkins_scenarios/scenario_03_html_reports/tests || true

                            cd /tests

                            pytest \
                                --html=/reports/scenario_03_report.html \
                                --self-contained-html \
                                --json-report \
                                --json-report-file=/reports/scenario_03_report.json \
                                ${relativeTests.join(' ')}
                        """
                    }
                }
            }
        }

        stage('Parse Test Results') {
            steps {
                script {
                    def jsonPath = "reports/scenario_03_report.json"

                    if (fileExists(jsonPath)) {
                        def report = readJSON file: jsonPath
                        def summary = report.get("summary", [:])
                        def failed = summary.get("failed", 0)
                        def passed = summary.get("passed", 0)
                        def total = summary.get("total", 0)

                        echo "üîé Total Tests: ${total}"
                        echo "‚úÖ Passed: ${passed}"
                        echo "‚ùå Failed: ${failed}"

                        if (failed > 0) {
                            error "‚ùå Chaos Agent strikes again! Some tests failed. Check the HTML report for details."
                        } else {
                            echo "‚úÖ Chaos Agent defeated ‚Äî all tests passed!"
                        }
                    } else {
                        error "‚ö†Ô∏è Test report JSON not found. Something went wrong."
                    }
                }
            }
        }
    }

    post {
        always {
            echo "‚ú® Archiving Chaos Report Artifacts..."
            archiveArtifacts artifacts: 'reports/**/*.html', fingerprint: true
            archiveArtifacts artifacts: 'reports/**/*.json', fingerprint: true
        }
    }
}
