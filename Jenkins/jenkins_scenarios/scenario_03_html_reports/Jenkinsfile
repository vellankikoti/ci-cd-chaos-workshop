pipeline {
    agent any
    
    // Build options
    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        timeout(time: 1, unit: 'HOURS')
        skipDefaultCheckout(true)
        timestamps()
    }
    
    parameters {
        // Enable/Disable each mini-scenario
        booleanParam(
            name: 'RUN_CONFIG_VALIDATION', 
            defaultValue: true, 
            description: '⚙️ Run Config Validation Tests'
        )
        booleanParam(
            name: 'RUN_API_HEALTH', 
            defaultValue: true, 
            description: '🏥 Run API Health Check Tests'
        )
        booleanParam(
            name: 'RUN_POSTGRES', 
            defaultValue: true, 
            description: '🐘 Run Postgres Database Tests'
        )
        booleanParam(
            name: 'RUN_REDIS', 
            defaultValue: true, 
            description: '📦 Run Redis Cache Tests'
        )
        booleanParam(
            name: 'RUN_SECRET_SCAN', 
            defaultValue: true, 
            description: '🔐 Run Secret Scanning Tests'
        )
        
        // Pass/Fail mode for each mini-scenario
        booleanParam(
            name: 'CONFIG_VALIDATION_PASS', 
            defaultValue: true, 
            description: '✅ Config Validation: Pass (true) or Fail (false)'
        )
        booleanParam(
            name: 'API_HEALTH_PASS', 
            defaultValue: true, 
            description: '✅ API Health: Pass (true) or Fail (false)'
        )
        booleanParam(
            name: 'POSTGRES_PASS', 
            defaultValue: true, 
            description: '✅ Postgres: Pass (true) or Fail (false)'
        )
        booleanParam(
            name: 'REDIS_PASS', 
            defaultValue: true, 
            description: '✅ Redis: Pass (true) or Fail (false)'
        )
        booleanParam(
            name: 'SECRET_SCAN_PASS', 
            defaultValue: true, 
            description: '✅ Secret Scan: Pass (true) or Fail (false)'
        )
    }
    
    environment {
        DOCKER_BUILDKIT = '1'
        PYTHONUNBUFFERED = '1'
        SCENARIO_NAME = 'scenario_03_html_reports'
        IMAGE_NAME = "chaos-workshop-scenario-03"
        BUILD_TAG = "${BUILD_NUMBER}"
        REPORTS_DIR = 'reports'
        GIT_REPO = 'https://github.com/vellankikoti/ci-cd-chaos-workshop.git'
        GIT_BRANCH = 'phase-3-jenkins'
        SCENARIO_PATH = 'Jenkins/jenkins_scenarios/scenario_03_html_reports'
    }
    
    stages {
        stage('🔄 Checkout and Verify') {
            steps {
                script {
                    echo """
╔══════════════════════════════════════════════════════════════════════════════╗
║                            🔄 CHECKING OUT CODE                             ║
╠══════════════════════════════════════════════════════════════════════════════╣
║  Repository: ${env.GIT_REPO}                                                 ║
║  Branch: ${env.GIT_BRANCH}                                                   ║
║  Scenario: ${env.SCENARIO_NAME}                                              ║
╚══════════════════════════════════════════════════════════════════════════════╝
                    """
                    
                    // Checkout the repository
                    checkout scm
                    
                    // Verify scenario files exist
                    sh '''
                        echo "📁 Verifying scenario files..."
                        
                        # Check if scenario directory exists
                        if [ -d "${SCENARIO_PATH}" ]; then
                            echo "✅ Scenario directory found: ${SCENARIO_PATH}"
                            ls -la "${SCENARIO_PATH}/"
                        else
                            echo "❌ Scenario directory not found: ${SCENARIO_PATH}"
                            echo "📂 Available directories in Jenkins/jenkins_scenarios/:"
                            ls -la Jenkins/jenkins_scenarios/ || echo "Jenkins/jenkins_scenarios/ not found"
                            exit 1
                        fi
                        
                        # Check for Dockerfile
                        if [ -f "${SCENARIO_PATH}/Dockerfile" ]; then
                            echo "✅ Dockerfile found"
                        else
                            echo "❌ Dockerfile not found in ${SCENARIO_PATH}"
                            exit 1
                        fi
                        
                        # Check for requirements.txt
                        if [ -f "${SCENARIO_PATH}/requirements.txt" ]; then
                            echo "✅ requirements.txt found"
                        else
                            echo "❌ requirements.txt not found in ${SCENARIO_PATH}"
                            exit 1
                        fi
                        
                        # Check for tests directory
                        if [ -d "${SCENARIO_PATH}/tests" ]; then
                            echo "✅ Tests directory found"
                            echo "📋 Test files:"
                            ls -la "${SCENARIO_PATH}/tests/" | grep "test_.*\\.py" || echo "No test files found"
                        else
                            echo "❌ Tests directory not found"
                            exit 1
                        fi
                        
                        # Check Docker is available
                        if command -v docker >/dev/null 2>&1; then
                            echo "✅ Docker is available"
                            docker --version
                        else
                            echo "❌ Docker not found"
                            exit 1
                        fi
                    '''
                }
            }
        }
        
        stage('🎪 Initialize Scenario 03') {
            steps {
                script {
                    echo """
╔══════════════════════════════════════════════════════════════════════════════╗
║                   📊 SCENARIO 03: HTML REPORTS CHAOS                        ║
╠══════════════════════════════════════════════════════════════════════════════╣
║  🎯 MISSION: Master HTML test reporting under chaotic conditions            ║
║  📋 MINI-SCENARIOS TO EXECUTE:                                              ║
║  • Config Validation: ${params.RUN_CONFIG_VALIDATION ? '✅ ENABLED' : '❌ DISABLED'} (${params.CONFIG_VALIDATION_PASS ? 'PASS' : 'FAIL'} mode)   ║
║  • API Health Check: ${params.RUN_API_HEALTH ? '✅ ENABLED' : '❌ DISABLED'} (${params.API_HEALTH_PASS ? 'PASS' : 'FAIL'} mode)    ║
║  • Postgres Database: ${params.RUN_POSTGRES ? '✅ ENABLED' : '❌ DISABLED'} (${params.POSTGRES_PASS ? 'PASS' : 'FAIL'} mode)     ║
║  • Redis Cache: ${params.RUN_REDIS ? '✅ ENABLED' : '❌ DISABLED'} (${params.REDIS_PASS ? 'PASS' : 'FAIL'} mode)          ║
║  • Secret Scanning: ${params.RUN_SECRET_SCAN ? '✅ ENABLED' : '❌ DISABLED'} (${params.SECRET_SCAN_PASS ? 'PASS' : 'FAIL'} mode)    ║
╚══════════════════════════════════════════════════════════════════════════════╝
                    """
                    
                    // Create reports directory
                    sh """
                        echo "📁 Creating reports directory..."
                        mkdir -p ${REPORTS_DIR}
                        chmod 755 ${REPORTS_DIR}
                    """
                    
                    // Clean up any existing containers and images
                    sh """
                        echo "🧹 Cleaning up previous Docker resources..."
                        docker container prune -f || true
                        docker image rm ${IMAGE_NAME}:${BUILD_TAG} || true
                        docker system prune -f || true
                    """
                }
            }
        }
        
        stage('🐳 Build Docker Image') {
            steps {
                script {
                    echo """
╔══════════════════════════════════════════════════════════════════════════════╗
║                            🐳 DOCKER BUILD PHASE                            ║
╚══════════════════════════════════════════════════════════════════════════════╝
                    """
                    
                    dir("${env.SCENARIO_PATH}") {
                        sh """
                            echo "🏗️ Building Docker image: ${IMAGE_NAME}:${BUILD_TAG}"
                            echo "📂 Current directory: \$(pwd)"
                            echo "📋 Files in directory:"
                            ls -la
                            
                            # Build the Docker image
                            docker build --no-cache -t ${IMAGE_NAME}:${BUILD_TAG} .
                            
                            echo "✅ Docker build completed successfully"
                            
                            # Verify image was built
                            docker images | grep ${IMAGE_NAME} || echo "Warning: Image not found in docker images"
                            
                            # Test the image
                            docker run --rm ${IMAGE_NAME}:${BUILD_TAG} python --version
                            docker run --rm ${IMAGE_NAME}:${BUILD_TAG} pytest --version
                        """
                    }
                }
            }
        }
        
        stage('⚙️ Config Validation Tests') {
            when {
                expression { return params.RUN_CONFIG_VALIDATION }
            }
            steps {
                script {
                    def testType = params.CONFIG_VALIDATION_PASS ? 'pass' : 'fail'
                    def status = params.CONFIG_VALIDATION_PASS ? '✅ PASS' : '❌ FAIL'
                    
                    echo """
╔══════════════════════════════════════════════════════════════════════════════╗
║                        ⚙️ CONFIG VALIDATION TESTS                           ║
║  Status: ${status}                                                      ║
║  Test Mode: ${testType.toUpperCase()}                                                       ║
╚══════════════════════════════════════════════════════════════════════════════╝
                    """
                    
                    try {
                        sh """
                            echo "🧪 Running Config Validation tests (${testType})..."
                            docker run --rm \
                                -v \$(pwd)/${REPORTS_DIR}:/app/reports \
                                -w /app \
                                ${IMAGE_NAME}:${BUILD_TAG} \
                                bash -c "
                                    pytest tests/test_config_validation_${testType}.py \
                                        --html=reports/config_validation_${testType}_report.html \
                                        --self-contained-html \
                                        --json-report \
                                        --json-report-file=reports/config_validation_${testType}_report.json \
                                        -v --tb=short --color=yes
                                "
                        """
                        echo "✅ Config Validation tests completed successfully"
                    } catch (Exception e) {
                        echo "❌ Config Validation tests failed (this might be intentional for learning)"
                        if (!params.CONFIG_VALIDATION_PASS) {
                            echo "💡 This failure was intentional to demonstrate config validation issues!"
                        }
                        // Don't fail the pipeline for educational failures
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }
        
        stage('🏥 API Health Check Tests') {
            when {
                expression { return params.RUN_API_HEALTH }
            }
            steps {
                script {
                    def testType = params.API_HEALTH_PASS ? 'pass' : 'fail'
                    def status = params.API_HEALTH_PASS ? '✅ PASS' : '❌ FAIL'
                    
                    echo """
╔══════════════════════════════════════════════════════════════════════════════╗
║                          🏥 API HEALTH CHECK TESTS                          ║
║  Status: ${status}                                                      ║
║  Test Mode: ${testType.toUpperCase()}                                                       ║
╚══════════════════════════════════════════════════════════════════════════════╝
                    """
                    
                    try {
                        sh """
                            echo "🧪 Running API Health Check tests (${testType})..."
                            docker run --rm \
                                -v \$(pwd)/${REPORTS_DIR}:/app/reports \
                                -w /app \
                                ${IMAGE_NAME}:${BUILD_TAG} \
                                bash -c "
                                    pytest tests/test_api_health_${testType}.py \
                                        --html=reports/api_health_${testType}_report.html \
                                        --self-contained-html \
                                        --json-report \
                                        --json-report-file=reports/api_health_${testType}_report.json \
                                        -v --tb=short --color=yes
                                "
                        """
                        echo "✅ API Health Check tests completed successfully"
                    } catch (Exception e) {
                        echo "❌ API Health Check tests failed (this might be intentional for learning)"
                        if (!params.API_HEALTH_PASS) {
                            echo "💡 This failure was intentional to demonstrate API health check issues!"
                        }
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }
        
        stage('🐘 Postgres Database Tests') {
            when {
                expression { return params.RUN_POSTGRES }
            }
            steps {
                script {
                    def testType = params.POSTGRES_PASS ? 'pass' : 'fail'
                    def status = params.POSTGRES_PASS ? '✅ PASS' : '❌ FAIL'
                    
                    echo """
╔══════════════════════════════════════════════════════════════════════════════╗
║                         🐘 POSTGRES DATABASE TESTS                          ║
║  Status: ${status}                                                      ║
║  Test Mode: ${testType.toUpperCase()}                                                       ║
╚══════════════════════════════════════════════════════════════════════════════╝
                    """
                    
                    try {
                        sh """
                            echo "🧪 Running Postgres Database tests (${testType})..."
                            docker run --rm \
                                -v /var/run/docker.sock:/var/run/docker.sock \
                                -v \$(pwd)/${REPORTS_DIR}:/app/reports \
                                -w /app \
                                ${IMAGE_NAME}:${BUILD_TAG} \
                                bash -c "
                                    pytest tests/test_postgres_${testType}.py \
                                        --html=reports/postgres_${testType}_report.html \
                                        --self-contained-html \
                                        --json-report \
                                        --json-report-file=reports/postgres_${testType}_report.json \
                                        -v --tb=short --color=yes
                                "
                        """
                        echo "✅ Postgres Database tests completed successfully"
                    } catch (Exception e) {
                        echo "❌ Postgres Database tests failed (this might be intentional for learning)"
                        if (!params.POSTGRES_PASS) {
                            echo "💡 This failure was intentional to demonstrate database connectivity issues!"
                        }
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }
        
        stage('📦 Redis Cache Tests') {
            when {
                expression { return params.RUN_REDIS }
            }
            steps {
                script {
                    def testType = params.REDIS_PASS ? 'pass' : 'fail'
                    def status = params.REDIS_PASS ? '✅ PASS' : '❌ FAIL'
                    
                    echo """
╔══════════════════════════════════════════════════════════════════════════════╗
║                           📦 REDIS CACHE TESTS                              ║
║  Status: ${status}                                                      ║
║  Test Mode: ${testType.toUpperCase()}                                                       ║
╚══════════════════════════════════════════════════════════════════════════════╝
                    """
                    
                    try {
                        sh """
                            echo "🧪 Running Redis Cache tests (${testType})..."
                            docker run --rm \
                                -v /var/run/docker.sock:/var/run/docker.sock \
                                -v \$(pwd)/${REPORTS_DIR}:/app/reports \
                                -w /app \
                                ${IMAGE_NAME}:${BUILD_TAG} \
                                bash -c "
                                    pytest tests/test_redis_${testType}.py \
                                        --html=reports/redis_${testType}_report.html \
                                        --self-contained-html \
                                        --json-report \
                                        --json-report-file=reports/redis_${testType}_report.json \
                                        -v --tb=short --color=yes
                                "
                        """
                        echo "✅ Redis Cache tests completed successfully"
                    } catch (Exception e) {
                        echo "❌ Redis Cache tests failed (this might be intentional for learning)"
                        if (!params.REDIS_PASS) {
                            echo "💡 This failure was intentional to demonstrate cache connectivity issues!"
                        }
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }
        
        stage('🔐 Secret Scanning Tests') {
            when {
                expression { return params.RUN_SECRET_SCAN }
            }
            steps {
                script {
                    def testType = params.SECRET_SCAN_PASS ? 'pass' : 'fail'
                    def status = params.SECRET_SCAN_PASS ? '✅ PASS' : '❌ FAIL'
                    
                    echo """
╔══════════════════════════════════════════════════════════════════════════════╗
║                          🔐 SECRET SCANNING TESTS                           ║
║  Status: ${status}                                                      ║
║  Test Mode: ${testType.toUpperCase()}                                                       ║
╚══════════════════════════════════════════════════════════════════════════════╝
                    """
                    
                    try {
                        sh """
                            echo "🧪 Running Secret Scanning tests (${testType})..."
                            docker run --rm \
                                -v \$(pwd)/${REPORTS_DIR}:/app/reports \
                                -w /app \
                                -e SECRET_API_KEY="demo-secret-key-12345" \
                                -e DATABASE_PASSWORD="super-secret-password" \
                                ${IMAGE_NAME}:${BUILD_TAG} \
                                bash -c "
                                    pytest tests/test_secret_scan_${testType}.py \
                                        --html=reports/secret_scan_${testType}_report.html \
                                        --self-contained-html \
                                        --json-report \
                                        --json-report-file=reports/secret_scan_${testType}_report.json \
                                        -v --tb=short --color=yes
                                "
                        """
                        echo "✅ Secret Scanning tests completed successfully"
                    } catch (Exception e) {
                        echo "❌ Secret Scanning tests failed (this might be intentional for learning)"
                        if (!params.SECRET_SCAN_PASS) {
                            echo "💡 This failure was intentional to demonstrate secret security issues!"
                        }
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }
        
        stage('📊 Generate Consolidated Report') {
            steps {
                script {
                    echo """
╔══════════════════════════════════════════════════════════════════════════════╗
║                      📊 GENERATING CONSOLIDATED REPORT                      ║
╚══════════════════════════════════════════════════════════════════════════════╝
                    """
                    
                    // Generate consolidated HTML report
                    sh '''
                        echo "📊 Creating consolidated report..."
                        
                        cat > reports/scenario_03_consolidated_report.html << 'REPORT_EOF'
<!DOCTYPE html>
<html>
<head>
    <title>📊 Scenario 03: HTML Reports Chaos - Consolidated Report</title>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        body { 
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
            margin: 0; 
            padding: 40px; 
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }
        .container { 
            max-width: 1200px; 
            margin: 0 auto; 
            background: white; 
            padding: 40px; 
            border-radius: 15px; 
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
        }
        h1 { 
            color: #2c3e50; 
            text-align: center; 
            margin-bottom: 40px; 
            font-size: 2.5em;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
        }
        .test-section { 
            margin: 30px 0; 
            padding: 25px; 
            border: 2px solid #ecf0f1; 
            border-radius: 10px; 
            background: #f8f9fa;
            transition: all 0.3s ease;
        }
        .test-section:hover {
            border-color: #3498db;
            box-shadow: 0 5px 15px rgba(52, 152, 219, 0.1);
        }
        .test-section h3 { 
            color: #3498db; 
            margin-top: 0; 
            font-size: 1.5em;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        .status { 
            padding: 8px 16px; 
            border-radius: 25px; 
            color: white; 
            font-weight: bold; 
            font-size: 0.9em;
            display: inline-block;
            margin-left: auto;
        }
        .pass { background: linear-gradient(45deg, #27ae60, #2ecc71); }
        .fail { background: linear-gradient(45deg, #e74c3c, #c0392b); }
        .skip { background: linear-gradient(45deg, #95a5a6, #7f8c8d); }
        a { 
            color: #3498db; 
            text-decoration: none; 
            font-weight: 500;
            transition: color 0.3s ease;
        }
        a:hover { 
            text-decoration: underline; 
            color: #2980b9;
        }
        .summary { 
            background: linear-gradient(45deg, #f39c12, #e67e22); 
            color: white; 
            padding: 25px; 
            border-radius: 10px; 
            margin-bottom: 40px;
            text-align: center;
        }
        .summary h2 {
            margin: 0 0 15px 0;
            font-size: 1.8em;
        }
        .footer { 
            text-align: center; 
            margin-top: 50px; 
            color: #7f8c8d; 
            font-style: italic;
        }
        .icon { font-size: 1.2em; }
        .build-info {
            background: #ecf0f1;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 30px;
            text-align: center;
            color: #2c3e50;
        }
        .git-info {
            background: #3498db;
            color: white;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            text-align: center;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>📊 Scenario 03: HTML Reports Chaos</h1>
        
        <div class="git-info">
            <strong>🔄 Repository:</strong> https://github.com/vellankikoti/ci-cd-chaos-workshop.git<br>
            <strong>🌿 Branch:</strong> phase-3-jenkins
        </div>
        
        <div class="build-info">
            <strong>🏗️ Build #''' + env.BUILD_NUMBER + '''</strong> | Generated on ''' + new Date().toString() + '''
        </div>
        
        <div class="summary">
            <h2>🎯 Mission Summary</h2>
            <p>Testing HTML report generation under chaotic conditions across 5 critical enterprise scenarios.</p>
        </div>
REPORT_EOF

                        # Add test sections based on enabled parameters
                        if [ "''' + params.RUN_CONFIG_VALIDATION + '''" = "true" ]; then
                            cat >> reports/scenario_03_consolidated_report.html << 'SECTION_EOF'
        <div class="test-section">
            <h3>
                <span class="icon">⚙️</span> Config Validation Tests
                <span class="status ''' + (params.CONFIG_VALIDATION_PASS ? 'pass">✅ PASSED' : 'fail">❌ FAILED') + '''</span>
            </h3>
            <p>Validates application configuration files, environment variables, and system settings.</p>
            <a href="config_validation_''' + (params.CONFIG_VALIDATION_PASS ? 'pass' : 'fail') + '''_report.html">📊 View Detailed Report</a>
        </div>
SECTION_EOF
                        fi

                        if [ "''' + params.RUN_API_HEALTH + '''" = "true" ]; then
                            cat >> reports/scenario_03_consolidated_report.html << 'SECTION_EOF'
        <div class="test-section">
            <h3>
                <span class="icon">🏥</span> API Health Check Tests
                <span class="status ''' + (params.API_HEALTH_PASS ? 'pass">✅ PASSED' : 'fail">❌ FAILED') + '''</span>
            </h3>
            <p>Verifies API endpoints, response times, and service availability.</p>
            <a href="api_health_''' + (params.API_HEALTH_PASS ? 'pass' : 'fail') + '''_report.html">📊 View Detailed Report</a>
        </div>
SECTION_EOF
                        fi

                        if [ "''' + params.RUN_POSTGRES + '''" = "true" ]; then
                            cat >> reports/scenario_03_consolidated_report.html << 'SECTION_EOF'
        <div class="test-section">
            <h3>
                <span class="icon">🐘</span> Postgres Database Tests
                <span class="status ''' + (params.POSTGRES_PASS ? 'pass">✅ PASSED' : 'fail">❌ FAILED') + '''</span>
            </h3>
            <p>Tests database connectivity, queries, and data integrity using testcontainers.</p>
            <a href="postgres_''' + (params.POSTGRES_PASS ? 'pass' : 'fail') + '''_report.html">📊 View Detailed Report</a>
        </div>
SECTION_EOF
                        fi

                        if [ "''' + params.RUN_REDIS + '''" = "true" ]; then
                            cat >> reports/scenario_03_consolidated_report.html << 'SECTION_EOF'
        <div class="test-section">
            <h3>
                <span class="icon">📦</span> Redis Cache Tests
                <span class="status ''' + (params.REDIS_PASS ? 'pass">✅ PASSED' : 'fail">❌ FAILED') + '''</span>
            </h3>
            <p>Validates caching mechanisms, Redis connectivity, and data persistence.</p>
            <a href="redis_''' + (params.REDIS_PASS ? 'pass' : 'fail') + '''_report.html">📊 View Detailed Report</a>
        </div>
SECTION_EOF
                        fi

                        if [ "''' + params.RUN_SECRET_SCAN + '''" = "true" ]; then
                            cat >> reports/scenario_03_consolidated_report.html << 'SECTION_EOF'
        <div class="test-section">
            <h3>
                <span class="icon">🔐</span> Secret Scanning Tests
                <span class="status ''' + (params.SECRET_SCAN_PASS ? 'pass">✅ PASSED' : 'fail">❌ FAILED') + '''</span>
            </h3>
            <p>Scans for exposed secrets, credentials, and security vulnerabilities.</p>
            <a href="secret_scan_''' + (params.SECRET_SCAN_PASS ? 'pass' : 'fail') + '''_report.html">📊 View Detailed Report</a>
        </div>
SECTION_EOF
                        fi

                        cat >> reports/scenario_03_consolidated_report.html << 'FOOTER_EOF'
        
        <div class="footer">
            <p>🎪 CI/CD Chaos Workshop - Scenario 03 Complete!</p>
            <p>Ready to tackle real-world HTML reporting challenges? 🚀</p>
        </div>
    </div>
</body>
</html>
FOOTER_EOF

                        echo "✅ Consolidated report generated successfully"
                        
                        # List generated reports
                        echo "📋 Generated reports:"
                        ls -la reports/ || echo "No reports directory found"
                    '''
                }
            }
        }
    }
    
    post {
        always {
            script {
                echo """
╔══════════════════════════════════════════════════════════════════════════════╗
║                        📊 ARCHIVING REPORTS & CLEANUP                       ║
╚══════════════════════════════════════════════════════════════════════════════╝
                """
                
                // Archive all reports
                archiveArtifacts artifacts: 'reports/**/*', allowEmptyArchive: true, fingerprint: true
                
                // Since HTML Publisher plugin is not available, we'll use a workaround
                // The reports are archived and can be downloaded from Jenkins artifacts
                echo """
📊 REPORTS ARCHIVED SUCCESSFULLY!

🎯 How to view your reports:
1. Go to this build's page in Jenkins
2. Click on "Artifacts" 
3. Download and open the HTML files:
   • scenario_03_consolidated_report.html (Main report)
   • Individual test reports in the reports/ folder

📋 Available reports:
                """
                
                // List available reports
                sh '''
                    if [ -d "reports" ]; then
                        echo "📁 Reports generated:"
                        find reports -name "*.html" -exec echo "   📊 {}" \\;
                        echo ""
                        echo "📄 JSON reports:"
                        find reports -name "*.json" -exec echo "   📋 {}" \\;
                    else
                        echo "❌ No reports directory found"
                    fi
                '''
                
                echo """
🎉 SUCCESS! Your Scenario 03 chaos workshop has completed!

📖 What you accomplished:
• Built Docker images for isolated testing
• Executed multiple chaos testing scenarios
• Generated beautiful HTML reports
• Learned about CI/CD resilience patterns

🚀 Next steps:
• Download and review the HTML reports
• Experiment with different parameter combinations
• Try running some scenarios in FAIL mode for learning
• Apply these patterns to your real-world pipelines

💡 Pro tip: The consolidated report gives you a great overview,
   then dive into individual scenario reports for details!
                """
                
                // Clean up Docker resources
                sh '''
                    echo "🧹 Cleaning up Docker resources..."
                    docker container prune -f || true
                    docker image rm ${IMAGE_NAME}:${BUILD_TAG} || true
                    docker system prune -f || true
                '''
            }
        }
        success {
            echo """
╔══════════════════════════════════════════════════════════════════════════════╗
║                     🎉 SCENARIO 03 COMPLETED SUCCESSFULLY! 🎉               ║
║  All enabled mini-scenarios have completed their test execution.            ║
║  Download the archived reports to see beautiful HTML insights!              ║
║  Your HTML reporting pipeline is now bulletproof! 📊✨                      ║
╚══════════════════════════════════════════════════════════════════════════════╝
            """
        }
        failure {
            echo """
╔══════════════════════════════════════════════════════════════════════════════╗
║                    ⚠️ SCENARIO 03 ENCOUNTERED FAILURES ⚠️                   ║
║  Some mini-scenarios failed - this might be intentional for learning!      ║
║  Download the archived reports to understand what went wrong.               ║
║  Remember: Every failure is a learning opportunity! 💪📊                    ║
╚══════════════════════════════════════════════════════════════════════════════╝
            """
        }
        unstable {
            echo """
╔══════════════════════════════════════════════════════════════════════════════╗
║                          🔶 SCENARIO 03 UNSTABLE BUILD 🔶                   ║
║  Some tests were unstable - perfect for learning edge cases!               ║
║  Download the archived reports for detailed analysis.                       ║
║  Keep experimenting and learning! 🔬                                         ║
╚══════════════════════════════════════════════════════════════════════════════╝
            """
        }
    }
}