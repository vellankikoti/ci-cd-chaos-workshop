pipeline {
    agent any
    
    // Build options
    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        timeout(time: 1, unit: 'HOURS')
        skipDefaultCheckout(true)
        timestamps()
    }
    
    parameters {
        choice(
            name: 'TEST_MODE',
            choices: ['pass', 'fail'],
            description: 'Run passing tests or failing tests?'
        )
    }
    
    environment {
        DOCKER_BUILDKIT = '1'
        PYTHONUNBUFFERED = '1'
        SCENARIO_NAME = 'scenario_03_html_reports'
        IMAGE_NAME = "chaos-workshop-scenario-03"
        BUILD_TAG = "${BUILD_NUMBER}"
        REPORTS_DIR = 'reports'
        // Use dynamic workspace path instead of hardcoded
        SCENARIO_PATH = "${WORKSPACE}/Jenkins/jenkins_scenarios/scenario_03_html_reports"
    }
    
    stages {
        stage('üîß Setup Docker Permissions') {
            steps {
                sh '''
                    echo "üîß Setting up Docker permissions..."
                    
                    # Ensure Docker socket is accessible
                    if [ ! -S /var/run/docker.sock ]; then
                        echo "ERROR: Docker socket not found at /var/run/docker.sock!"
                        echo "Make sure Docker is running and the socket is mounted in Jenkins container"
                        exit 1
                    fi
                    
                    # Check current user and Docker socket permissions
                    echo "Current user: $(whoami)"
                    echo "Docker socket permissions: $(ls -la /var/run/docker.sock)"
                    
                    # Try to fix permissions if needed (ignore errors if no sudo access)
                    sudo chmod 666 /var/run/docker.sock 2>/dev/null || echo "Note: Could not change socket permissions (no sudo access)"
                    
                    # Test Docker access
                    if docker ps > /dev/null 2>&1; then
                        echo "‚úÖ Docker access verified successfully"
                        docker --version
                    else
                        echo "‚ùå ERROR: Cannot access Docker daemon"
                        echo "Please ensure:"
                        echo "1. Docker is running"
                        echo "2. Jenkins container has Docker socket mounted: -v /var/run/docker.sock:/var/run/docker.sock"
                        echo "3. Jenkins user has Docker permissions"
                        exit 1
                    fi
                '''
            }
        }

        stage('üìÅ Verify Local Workspace') {
            steps {
                sh '''
                    echo "=== WORKSPACE VERIFICATION ==="
                    echo "Current working directory: $(pwd)"
                    echo "WORKSPACE environment variable: ${WORKSPACE}"
                    echo "SCENARIO_PATH: ${SCENARIO_PATH}"
                    
                    echo "=== Workspace contents ==="
                    ls -la
                    
                    echo "=== Checking for Jenkins directory ==="
                    if [ -d "Jenkins" ]; then
                        echo "‚úÖ Jenkins directory found"
                        ls -la Jenkins/
                    else
                        echo "‚ùå Jenkins directory not found in workspace"
                        echo "Available directories:"
                        ls -la
                        exit 1
                    fi
                    
                    echo "=== Checking scenario directory ==="
                    if [ -d "${SCENARIO_PATH}" ]; then
                        echo "‚úÖ Scenario directory found: ${SCENARIO_PATH}"
                        ls -la "${SCENARIO_PATH}/"
                    else
                        echo "‚ùå Scenario directory not found: ${SCENARIO_PATH}"
                        echo "Checking if Jenkins scenarios exist..."
                        find . -name "scenario_03_html_reports" -type d
                        exit 1
                    fi

                    echo "=== Checking required files ==="
                    for file in Dockerfile report_generator.py; do
                        if [ -f "${SCENARIO_PATH}/${file}" ]; then
                            echo "‚úÖ ${file} found"
                        else
                            echo "‚ùå ${file} not found in ${SCENARIO_PATH}"
                            echo "Contents of scenario directory:"
                            ls -la "${SCENARIO_PATH}/"
                            exit 1
                        fi
                    done
                    
                    echo "=== Checking tests directory ==="
                    if [ -d "${SCENARIO_PATH}/tests" ]; then
                        echo "‚úÖ Tests directory found"
                        ls -la "${SCENARIO_PATH}/tests/"
                    else
                        echo "‚ùå Tests directory not found"
                        exit 1
                    fi
                    
                    echo "=== Creating reports directory ==="
                    mkdir -p "${WORKSPACE}/reports"
                    echo "‚úÖ Reports directory ready: ${WORKSPACE}/reports"
                    
                    echo "‚úÖ All workspace verification checks passed!"
                '''
            }
        }

        stage('üîß Build Docker Image') {
            steps {
                sh """
                    echo "üõ†Ô∏è Building Docker image: ${IMAGE_NAME}:${BUILD_TAG}"
                    echo "Current directory: \$(pwd)"
                    echo "Using Dockerfile: ${SCENARIO_PATH}/Dockerfile"
                    echo "Build context: ${SCENARIO_PATH}"
                    
                    # Verify all required files are present
                    echo "=== Verifying build context files ==="
                    ls -la "${SCENARIO_PATH}/"
                    
                    # Show Dockerfile content for debugging
                    echo "=== Dockerfile content ==="
                    cat "${SCENARIO_PATH}/Dockerfile"
                    
                    # Build the Docker image
                    docker build \
                        --no-cache \
                        -t ${IMAGE_NAME}:${BUILD_TAG} \
                        -f "${SCENARIO_PATH}/Dockerfile" \
                        "${SCENARIO_PATH}" || {
                        echo "‚ùå Docker build failed!"
                        echo "Build context contents:"
                        ls -la "${SCENARIO_PATH}/"
                        exit 1
                    }
                    
                    echo "‚úÖ Docker image built successfully: ${IMAGE_NAME}:${BUILD_TAG}"
                    docker images | grep "${IMAGE_NAME}" || echo "Warning: Image not found in docker images output"
                """
            }
        }

        stage('üßπ Pre-Cleanup') {
            steps {
                sh '''
                    echo "üî™ Pre-cleanup: Killing leftover containers..."
                    docker ps -q --filter name=testcontainers | xargs -r docker rm -f || true
                    docker ps -q --filter name=chaos-workshop | xargs -r docker rm -f || true
                '''
            }
        }

        stage('üìä Run Test Scenarios') {
            steps {
                script {
                    def testMode = params.TEST_MODE
                    sh """
                        echo "=== Running tests in Docker container ==="
                        echo "Test mode: ${testMode}"
                        
                        # Ensure reports directory exists and is accessible
                        mkdir -p "${WORKSPACE}/reports"
                        chmod 777 "${WORKSPACE}/reports"
                        
                        # Run tests in container
                        docker run --rm \\
                            -v /var/run/docker.sock:/var/run/docker.sock \\
                            -v "${WORKSPACE}/reports:/app/reports" \\
                            ${IMAGE_NAME}:${BUILD_TAG} \\
                            sh -c "
                                cd /app
                                echo '=== Container Environment Check ==='
                                pwd
                                ls -la
                                echo 'Python version:' && python --version
                                echo 'Pytest version:' && pytest --version
                                
                                echo '=== Debug: Checking test files ==='
                                if [ -d tests/ ]; then
                                    ls -la tests/
                                    echo 'Available test files:'
                                    find tests/ -name '*.py' | head -10
                                else
                                    echo 'Tests directory not found!'
                                    exit 1
                                fi
                                
                                echo '=== Running Tests ==='
                                # Find and run appropriate test files based on mode
                                TEST_FILES=\$(find tests/ -name '*${testMode}*.py' | tr '\n' ' ')
                                
                                if [ -n \"\$TEST_FILES\" ]; then
                                    echo \"Running test files: \$TEST_FILES\"
                                    for test_file in \$TEST_FILES; do
                                        test_name=\$(basename \"\$test_file\" .py)
                                        echo \"Running \$test_file...\"
                                        pytest \"\$test_file\" -v --json-report --json-report-file=\"reports/\${test_name}.json\" || echo \"Test \$test_file failed\"
                                    done
                                else
                                    echo \"No specific test files found for mode ${testMode}, running all tests\"
                                    pytest tests/ -v --json-report --json-report-file=\"reports/all_tests_${testMode}.json\" || echo \"Some tests failed\"
                                fi
                                
                                echo '=== Generating HTML Report ==='
                                if [ -f report_generator.py ]; then
                                    python report_generator.py || echo 'Report generation failed'
                                else
                                    echo 'report_generator.py not found, creating basic report'
                                    echo '<h1>Test Results</h1><p>Tests completed in ${testMode} mode</p>' > reports/test_report.html
                                fi
                                
                                echo '=== Report Files Generated ==='
                                ls -la reports/
                            "
                    """
                }
            }
        }

        stage('üì¶ Archive Reports') {
            steps {
                sh """
                    echo "üì¶ Archiving reports..."
                    ls -la reports/ || echo "Reports directory not found"
                """
                archiveArtifacts artifacts: 'reports/*.html', allowEmptyArchive: true
            }
        }
    }

    post {
        always {
            echo "‚ú® Chaos Agent defeated‚Ä¶ or plotting his next move!"
        }
        success {
            echo "üéâ All tests completed successfully!"
        }
        failure {
            echo "üí• Some tests failed - Chaos Agent strikes again!"
        }
    }
}
