pipeline {
    agent any
    
    // Build options
    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        timeout(time: 1, unit: 'HOURS')
        skipDefaultCheckout(true)
        timestamps()
    }
    
    parameters {
        // Enable/Disable each mini-scenario
        booleanParam(
            name: 'RUN_CONFIG_VALIDATION', 
            defaultValue: true, 
            description: '⚙️ Run Config Validation Tests'
        )
        booleanParam(
            name: 'RUN_API_HEALTH', 
            defaultValue: true, 
            description: '🏥 Run API Health Check Tests'
        )
        booleanParam(
            name: 'RUN_POSTGRES', 
            defaultValue: true, 
            description: '🐘 Run Postgres Database Tests'
        )
        booleanParam(
            name: 'RUN_REDIS', 
            defaultValue: true, 
            description: '📦 Run Redis Cache Tests'
        )
        booleanParam(
            name: 'RUN_SECRET_SCAN', 
            defaultValue: true, 
            description: '🔐 Run Secret Scanning Tests'
        )
        
        // Pass/Fail mode for each mini-scenario
        booleanParam(
            name: 'CONFIG_VALIDATION_PASS', 
            defaultValue: true, 
            description: '✅ Config Validation: Pass (true) or Fail (false)'
        )
        booleanParam(
            name: 'API_HEALTH_PASS', 
            defaultValue: true, 
            description: '✅ API Health: Pass (true) or Fail (false)'
        )
        booleanParam(
            name: 'POSTGRES_PASS', 
            defaultValue: true, 
            description: '✅ Postgres: Pass (true) or Fail (false)'
        )
        booleanParam(
            name: 'REDIS_PASS', 
            defaultValue: true, 
            description: '✅ Redis: Pass (true) or Fail (false)'
        )
        booleanParam(
            name: 'SECRET_SCAN_PASS', 
            defaultValue: true, 
            description: '✅ Secret Scan: Pass (true) or Fail (false)'
        )
    }
    
    environment {
        DOCKER_BUILDKIT = '1'
        PYTHONUNBUFFERED = '1'
        SCENARIO_NAME = 'scenario_03_html_reports'
        IMAGE_NAME = "chaos-workshop-scenario-03"
        BUILD_TAG = "${BUILD_NUMBER}"
        REPORTS_DIR = 'reports'
        GIT_REPO = 'https://github.com/vellankikoti/ci-cd-chaos-workshop.git'
        GIT_BRANCH = 'phase-3-jenkins'
        SCENARIO_PATH = 'Jenkins/jenkins_scenarios/scenario_03_html_reports'
    }
    
    stages {
        stage('🔄 Checkout and Verify') {
            steps {
                script {
                    echo """
╔══════════════════════════════════════════════════════════════════════════════╗
║                            🔄 CHECKING OUT CODE                             ║
╠══════════════════════════════════════════════════════════════════════════════╣
║  Repository: ${env.GIT_REPO}                                                 ║
║  Branch: ${env.GIT_BRANCH}                                                   ║
║  Scenario: ${env.SCENARIO_NAME}                                              ║
╚══════════════════════════════════════════════════════════════════════════════╝
                    """
                    
                    // Checkout the repository
                    checkout scm
                    
                    // Verify scenario files exist
                    sh '''
                        echo "📁 Verifying scenario files..."
                        
                        # Check if scenario directory exists
                        if [ -d "${SCENARIO_PATH}" ]; then
                            echo "✅ Scenario directory found: ${SCENARIO_PATH}"
                            ls -la "${SCENARIO_PATH}/"
                        else
                            echo "❌ Scenario directory not found: ${SCENARIO_PATH}"
                            echo "📂 Available directories in Jenkins/jenkins_scenarios/:"
                            ls -la Jenkins/jenkins_scenarios/ || echo "Jenkins/jenkins_scenarios/ not found"
                            exit 1
                        fi
                        
                        # Check for required files
                        for file in Dockerfile requirements.txt report_generator.py; do
                            if [ -f "${SCENARIO_PATH}/${file}" ]; then
                                echo "✅ ${file} found"
                            else
                                echo "❌ ${file} not found in ${SCENARIO_PATH}"
                                exit 1
                            fi
                        done
                        
                        # Check for tests directory
                        if [ -d "${SCENARIO_PATH}/tests" ]; then
                            echo "✅ Tests directory found"
                            echo "📋 Test files:"
                            ls -la "${SCENARIO_PATH}/tests/" | grep "test_.*\\.py" || echo "No test files found"
                        else
                            echo "❌ Tests directory not found"
                            exit 1
                        fi
                        
                        # Check Docker is available
                        if command -v docker >/dev/null 2>&1; then
                            echo "✅ Docker is available"
                            docker --version
                        else
                            echo "❌ Docker not found"
                            exit 1
                        fi
                    '''
                }
            }
        }
        
        stage('🎪 Initialize Scenario 03') {
            steps {
                script {
                    echo """
╔══════════════════════════════════════════════════════════════════════════════╗
║                   📊 SCENARIO 03: HTML REPORTS CHAOS                        ║
╠══════════════════════════════════════════════════════════════════════════════╣
║  🎯 MISSION: Master HTML test reporting under chaotic conditions            ║
║  📋 MINI-SCENARIOS TO EXECUTE:                                              ║
║  • Config Validation: ${params.RUN_CONFIG_VALIDATION ? '✅ ENABLED' : '❌ DISABLED'} (${params.CONFIG_VALIDATION_PASS ? 'PASS' : 'FAIL'} mode)   ║
║  • API Health Check: ${params.RUN_API_HEALTH ? '✅ ENABLED' : '❌ DISABLED'} (${params.API_HEALTH_PASS ? 'PASS' : 'FAIL'} mode)    ║
║  • Postgres Database: ${params.RUN_POSTGRES ? '✅ ENABLED' : '❌ DISABLED'} (${params.POSTGRES_PASS ? 'PASS' : 'FAIL'} mode)     ║
║  • Redis Cache: ${params.RUN_REDIS ? '✅ ENABLED' : '❌ DISABLED'} (${params.REDIS_PASS ? 'PASS' : 'FAIL'} mode)          ║
║  • Secret Scanning: ${params.RUN_SECRET_SCAN ? '✅ ENABLED' : '❌ DISABLED'} (${params.SECRET_SCAN_PASS ? 'PASS' : 'FAIL'} mode)    ║
╚══════════════════════════════════════════════════════════════════════════════╝
                    """
                    
                    // Create reports directory
                    sh """
                        echo "📁 Creating reports directory..."
                        mkdir -p ${REPORTS_DIR}
                        chmod 755 ${REPORTS_DIR}
                    """
                    
                    // Clean up any existing containers and images
                    sh """
                        echo "🧹 Cleaning up previous Docker resources..."
                        docker container prune -f || true
                        docker image rm ${IMAGE_NAME}:${BUILD_TAG} || true
                        docker system prune -f || true
                    """
                }
            }
        }
        
        stage('🐳 Build Docker Image') {
            steps {
                script {
                    echo """
╔══════════════════════════════════════════════════════════════════════════════╗
║                            🐳 DOCKER BUILD PHASE                            ║
╚══════════════════════════════════════════════════════════════════════════════╝
                    """
                    
                    dir("${env.SCENARIO_PATH}") {
                        sh """
                            echo "🏗️ Building Docker image: ${IMAGE_NAME}:${BUILD_TAG}"
                            echo "📂 Current directory: \$(pwd)"
                            echo "📋 Files in directory:"
                            ls -la
                            
                            # Build the Docker image
                            docker build --no-cache -t ${IMAGE_NAME}:${BUILD_TAG} .
                            
                            echo "✅ Docker build completed successfully"
                            
                            # Verify image was built
                            docker images | grep ${IMAGE_NAME} || echo "Warning: Image not found in docker images"
                            
                            # Test the image
                            docker run --rm ${IMAGE_NAME}:${BUILD_TAG} python --version
                            docker run --rm ${IMAGE_NAME}:${BUILD_TAG} pytest --version
                        """
                    }
                }
            }
        }
        
        stage('⚙️ Config Validation Tests') {
            when {
                expression { return params.RUN_CONFIG_VALIDATION }
            }
            steps {
                script {
                    def testType = params.CONFIG_VALIDATION_PASS ? 'pass' : 'fail'
                    def status = params.CONFIG_VALIDATION_PASS ? '✅ PASS' : '❌ FAIL'
                    
                    echo """
╔══════════════════════════════════════════════════════════════════════════════╗
║                        ⚙️ CONFIG VALIDATION TESTS                           ║
║  Status: ${status}                                                      ║
║  Test Mode: ${testType.toUpperCase()}                                                       ║
╚══════════════════════════════════════════════════════════════════════════════╝
                    """
                    
                    try {
                        sh """
                            echo "🧪 Running Config Validation tests (${testType})..."
                            docker run --rm \
                                -v \$(pwd)/${REPORTS_DIR}:/app/reports \
                                -w /app \
                                ${IMAGE_NAME}:${BUILD_TAG} \
                                bash -c "
                                    pytest tests/test_config_validation_${testType}.py \
                                        --html=reports/config_validation_${testType}_report.html \
                                        --self-contained-html \
                                        --json-report \
                                        --json-report-file=reports/config_validation_${testType}_report.json \
                                        -v --tb=short --color=yes
                                "
                        """
                        echo "✅ Config Validation tests completed successfully"
                    } catch (Exception e) {
                        echo "❌ Config Validation tests failed (this might be intentional for learning)"
                        if (!params.CONFIG_VALIDATION_PASS) {
                            echo "💡 This failure was intentional to demonstrate config validation issues!"
                        }
                        // Don't fail the pipeline for educational failures
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }
        
        stage('🏥 API Health Check Tests') {
            when {
                expression { return params.RUN_API_HEALTH }
            }
            steps {
                script {
                    def testType = params.API_HEALTH_PASS ? 'pass' : 'fail'
                    def status = params.API_HEALTH_PASS ? '✅ PASS' : '❌ FAIL'
                    
                    echo """
╔══════════════════════════════════════════════════════════════════════════════╗
║                          🏥 API HEALTH CHECK TESTS                          ║
║  Status: ${status}                                                      ║
║  Test Mode: ${testType.toUpperCase()}                                                       ║
╚══════════════════════════════════════════════════════════════════════════════╝
                    """
                    
                    try {
                        sh """
                            echo "🧪 Running API Health Check tests (${testType})..."
                            docker run --rm \
                                -v \$(pwd)/${REPORTS_DIR}:/app/reports \
                                -w /app \
                                ${IMAGE_NAME}:${BUILD_TAG} \
                                bash -c "
                                    pytest tests/test_api_health_${testType}.py \
                                        --html=reports/api_health_${testType}_report.html \
                                        --self-contained-html \
                                        --json-report \
                                        --json-report-file=reports/api_health_${testType}_report.json \
                                        -v --tb=short --color=yes
                                "
                        """
                        echo "✅ API Health Check tests completed successfully"
                    } catch (Exception e) {
                        echo "❌ API Health Check tests failed (this might be intentional for learning)"
                        if (!params.API_HEALTH_PASS) {
                            echo "💡 This failure was intentional to demonstrate API health check issues!"
                        }
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }
        
        stage('🐘 Postgres Database Tests') {
            when {
                expression { return params.RUN_POSTGRES }
            }
            steps {
                script {
                    def testType = params.POSTGRES_PASS ? 'pass' : 'fail'
                    def status = params.POSTGRES_PASS ? '✅ PASS' : '❌ FAIL'
                    
                    echo """
╔══════════════════════════════════════════════════════════════════════════════╗
║                         🐘 POSTGRES DATABASE TESTS                          ║
║  Status: ${status}                                                      ║
║  Test Mode: ${testType.toUpperCase()}                                                       ║
╚══════════════════════════════════════════════════════════════════════════════╝
                    """
                    
                    try {
                        sh """
                            echo "🧪 Running Postgres Database tests (${testType})..."
                            docker run --rm \
                                -v /var/run/docker.sock:/var/run/docker.sock \
                                -v \$(pwd)/${REPORTS_DIR}:/app/reports \
                                -w /app \
                                ${IMAGE_NAME}:${BUILD_TAG} \
                                bash -c "
                                    pytest tests/test_postgres_${testType}.py \
                                        --html=reports/postgres_${testType}_report.html \
                                        --self-contained-html \
                                        --json-report \
                                        --json-report-file=reports/postgres_${testType}_report.json \
                                        -v --tb=short --color=yes
                                "
                        """
                        echo "✅ Postgres Database tests completed successfully"
                    } catch (Exception e) {
                        echo "❌ Postgres Database tests failed (this might be intentional for learning)"
                        if (!params.POSTGRES_PASS) {
                            echo "💡 This failure was intentional to demonstrate database connectivity issues!"
                        }
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }
        
        stage('📦 Redis Cache Tests') {
            when {
                expression { return params.RUN_REDIS }
            }
            steps {
                script {
                    def testType = params.REDIS_PASS ? 'pass' : 'fail'
                    def status = params.REDIS_PASS ? '✅ PASS' : '❌ FAIL'
                    
                    echo """
╔══════════════════════════════════════════════════════════════════════════════╗
║                           📦 REDIS CACHE TESTS                              ║
║  Status: ${status}                                                      ║
║  Test Mode: ${testType.toUpperCase()}                                                       ║
╚══════════════════════════════════════════════════════════════════════════════╝
                    """
                    
                    try {
                        sh """
                            echo "🧪 Running Redis Cache tests (${testType})..."
                            docker run --rm \
                                -v /var/run/docker.sock:/var/run/docker.sock \
                                -v \$(pwd)/${REPORTS_DIR}:/app/reports \
                                -w /app \
                                ${IMAGE_NAME}:${BUILD_TAG} \
                                bash -c "
                                    pytest tests/test_redis_${testType}.py \
                                        --html=reports/redis_${testType}_report.html \
                                        --self-contained-html \
                                        --json-report \
                                        --json-report-file=reports/redis_${testType}_report.json \
                                        -v --tb=short --color=yes
                                "
                        """
                        echo "✅ Redis Cache tests completed successfully"
                    } catch (Exception e) {
                        echo "❌ Redis Cache tests failed (this might be intentional for learning)"
                        if (!params.REDIS_PASS) {
                            echo "💡 This failure was intentional to demonstrate cache connectivity issues!"
                        }
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }
        
        stage('🔐 Secret Scanning Tests') {
            when {
                expression { return params.RUN_SECRET_SCAN }
            }
            steps {
                script {
                    def testType = params.SECRET_SCAN_PASS ? 'pass' : 'fail'
                    def status = params.SECRET_SCAN_PASS ? '✅ PASS' : '❌ FAIL'
                    
                    echo """
╔══════════════════════════════════════════════════════════════════════════════╗
║                          🔐 SECRET SCANNING TESTS                           ║
║  Status: ${status}                                                      ║
║  Test Mode: ${testType.toUpperCase()}                                                       ║
╚══════════════════════════════════════════════════════════════════════════════╝
                    """
                    
                    try {
                        sh """
                            echo "🧪 Running Secret Scanning tests (${testType})..."
                            docker run --rm \
                                -v \$(pwd)/${REPORTS_DIR}:/app/reports \
                                -w /app \
                                -e SECRET_API_KEY="demo-secret-key-12345" \
                                -e DATABASE_PASSWORD="super-secret-password" \
                                ${IMAGE_NAME}:${BUILD_TAG} \
                                bash -c "
                                    pytest tests/test_secret_scan_${testType}.py \
                                        --html=reports/secret_scan_${testType}_report.html \
                                        --self-contained-html \
                                        --json-report \
                                        --json-report-file=reports/secret_scan_${testType}_report.json \
                                        -v --tb=short --color=yes
                                "
                        """
                        echo "✅ Secret Scanning tests completed successfully"
                    } catch (Exception e) {
                        echo "❌ Secret Scanning tests failed (this might be intentional for learning)"
                        if (!params.SECRET_SCAN_PASS) {
                            echo "💡 This failure was intentional to demonstrate secret security issues!"
                        }
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }
        
        stage('🎨 Generate Enterprise Reports') {
            steps {
                script {
                    echo """
╔══════════════════════════════════════════════════════════════════════════════╗
║                      🎨 GENERATING ENTERPRISE REPORTS                       ║
╚══════════════════════════════════════════════════════════════════════════════╝
                    """
                    
                    // Copy report generator from scenario directory
                    sh """
                        echo "📋 Copying report generator..."
                        cp ${SCENARIO_PATH}/report_generator.py .
                        chmod +x report_generator.py
                    """
                    
                    // Set environment variables for the report generator
                    def envVars = []
                    envVars.add("RUN_CONFIG_VALIDATION=${params.RUN_CONFIG_VALIDATION}")
                    envVars.add("CONFIG_VALIDATION_PASS=${params.CONFIG_VALIDATION_PASS}")
                    envVars.add("RUN_API_HEALTH=${params.RUN_API_HEALTH}")
                    envVars.add("API_HEALTH_PASS=${params.API_HEALTH_PASS}")
                    envVars.add("RUN_POSTGRES=${params.RUN_POSTGRES}")
                    envVars.add("POSTGRES_PASS=${params.POSTGRES_PASS}")
                    envVars.add("RUN_REDIS=${params.RUN_REDIS}")
                    envVars.add("REDIS_PASS=${params.REDIS_PASS}")
                    envVars.add("RUN_SECRET_SCAN=${params.RUN_SECRET_SCAN}")
                    envVars.add("SECRET_SCAN_PASS=${params.SECRET_SCAN_PASS}")
                    
                    withEnv(envVars) {
                        sh """
                            echo "🎨 Generating enterprise-grade reports..."
                            
                            # Run the enterprise report generator
                            docker run --rm \
                                -v \$(pwd)/${REPORTS_DIR}:/app/reports \
                                -v \$(pwd)/report_generator.py:/app/report_generator.py \
                                -w /app \
                                -e RUN_CONFIG_VALIDATION="${params.RUN_CONFIG_VALIDATION}" \
                                -e CONFIG_VALIDATION_PASS="${params.CONFIG_VALIDATION_PASS}" \
                                -e RUN_API_HEALTH="${params.RUN_API_HEALTH}" \
                                -e API_HEALTH_PASS="${params.API_HEALTH_PASS}" \
                                -e RUN_POSTGRES="${params.RUN_POSTGRES}" \
                                -e POSTGRES_PASS="${params.POSTGRES_PASS}" \
                                -e RUN_REDIS="${params.RUN_REDIS}" \
                                -e REDIS_PASS="${params.REDIS_PASS}" \
                                -e RUN_SECRET_SCAN="${params.RUN_SECRET_SCAN}" \
                                -e SECRET_SCAN_PASS="${params.SECRET_SCAN_PASS}" \
                                ${IMAGE_NAME}:${BUILD_TAG} \
                                python report_generator.py reports
                            
                            echo "✅ Enterprise reports generated successfully!"
                            echo "📋 Generated reports:"
                            ls -la reports/ | grep "\\.html" || echo "No HTML reports found"
                        """
                    }
                    
                    echo """
🎉 STUNNING REPORTS GENERATED!

📊 Available Reports:
• index.html - Main Dashboard (START HERE!)
• Individual scenario reports with beautiful visualizations
• Interactive charts and graphs
• Dark/light theme toggle
• Mobile-responsive design

🎯 Features Include:
• Real-time test metrics
• Pass/fail distribution charts
• Execution time analysis
• Color-coded status indicators
• Collapsible test details
• Professional enterprise design

💡 These reports will WOW your workshop attendees!
                    """
                }
            }
        }
    }
    
    post {
        always {
            script {
                echo """
╔══════════════════════════════════════════════════════════════════════════════╗
║                        📊 ARCHIVING REPORTS & CLEANUP                       ║
╚══════════════════════════════════════════════════════════════════════════════╝
                """
                
                // Archive all reports
                archiveArtifacts artifacts: 'reports/**/*', allowEmptyArchive: true, fingerprint: true
                
                echo """
📊 ENTERPRISE REPORTS ARCHIVED SUCCESSFULLY!

🎯 How to view your stunning reports:
1. Go to this build's page in Jenkins
2. Click on "Artifacts" 
3. Download and open index.html (MAIN DASHBOARD)
4. Navigate through individual scenario reports
5. Toggle dark/light theme for optimal viewing
6. Share with your team for maximum impact!

📋 Available reports:
                """
                
                // List available reports
                sh '''
                    if [ -d "reports" ]; then
                        echo "📁 Enterprise Dashboard & Reports:"
                        find reports -name "*.html" -exec echo "   🎨 {}" \\;
                        echo ""
                        echo "📄 Raw JSON data:"
                        find reports -name "*.json" -exec echo "   📋 {}" \\;
                    else
                        echo "❌ No reports directory found"
                    fi
                '''
                
                echo """
🎉 SUCCESS! Your Scenario 03 chaos workshop has completed!

📖 What you accomplished:
• Built Docker images for isolated testing
• Executed multiple chaos testing scenarios
• Generated STUNNING enterprise-grade HTML reports
• Created interactive dashboards with charts and graphs
• Learned about CI/CD resilience patterns

🚀 Next steps:
• Download and review the beautiful HTML reports
• Start with index.html for the main dashboard
• Experiment with different parameter combinations
• Try running some scenarios in FAIL mode for learning
• Share these gorgeous reports with your team!

💡 Pro tip: The reports include:
   • Interactive pie charts showing pass/fail distribution
   • Bar charts for performance analysis
   • Dark/light theme toggle
   • Mobile-responsive design
   • Professional color coding
   • Collapsible error details

🎪 These reports will be remembered for LIFE!
                """
                
                // Clean up Docker resources
                sh '''
                    echo "🧹 Cleaning up Docker resources..."
                    docker container prune -f || true
                    docker image rm ${IMAGE_NAME}:${BUILD_TAG} || true
                    docker system prune -f || true
                '''
            }
        }
        success {
            echo """
╔══════════════════════════════════════════════════════════════════════════════╗
║                     🎉 SCENARIO 03 COMPLETED SUCCESSFULLY! 🎉               ║
║  All enabled mini-scenarios have completed their test execution.            ║
║  Download the archived reports to see STUNNING enterprise visualizations!  ║
║  Your HTML reporting pipeline is now BULLETPROOF! 📊✨🎨                   ║
╚══════════════════════════════════════════════════════════════════════════════╝
            """
        }
        failure {
            echo """
╔══════════════════════════════════════════════════════════════════════════════╗
║                    ⚠️ SCENARIO 03 ENCOUNTERED FAILURES ⚠️                   ║
║  Some mini-scenarios failed - this might be intentional for learning!      ║
║  Download the archived reports to understand what went wrong.               ║
║  The beautiful reports will show you exactly what happened! 📊💪            ║
║  Remember: Every failure is a learning opportunity!                         ║
╚══════════════════════════════════════════════════════════════════════════════╝
            """
        }
        unstable {
            echo """
╔══════════════════════════════════════════════════════════════════════════════╗
║                          🔶 SCENARIO 03 UNSTABLE BUILD 🔶                   ║
║  Some tests were unstable - perfect for learning edge cases!               ║
║  The enterprise reports will show detailed analysis of what happened.       ║
║  Download and explore the beautiful visualizations! 🎨📊                   ║
║  Keep experimenting and learning! 🔬                                         ║
╚══════════════════════════════════════════════════════════════════════════════╝
            """
        }
    }
}