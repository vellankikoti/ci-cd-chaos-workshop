pipeline {
    agent any

    environment {
        SCENARIO_PATH = '/workspace/ci-cd-chaos-workshop/Jenkins/jenkins_scenarios/scenario_05_deploy_eks'
        IMAGE_NAME = "chaos-workshop-eks-deployment"
        BUILD_TAG = "${BUILD_NUMBER}"
        REPORTS_DIR = 'reports'
    }

    parameters {
        booleanParam(
            name: 'RUN_KUBECTL_TESTS',
            defaultValue: true,
            description: 'üîß Run kubectl Command Tests'
        )
        booleanParam(
            name: 'RUN_DEPLOYMENT_TESTS',
            defaultValue: true,
            description: 'üöÄ Run Deployment Tests'
        )
        booleanParam(
            name: 'RUN_SERVICE_TESTS',
            defaultValue: true,
            description: 'üåê Run Service Tests'
        )
        booleanParam(
            name: 'KUBECTL_PASS',
            defaultValue: true,
            description: '‚úÖ kubectl Tests: Pass (true) or Fail (false)'
        )
        booleanParam(
            name: 'DEPLOYMENT_PASS',
            defaultValue: true,
            description: '‚úÖ Deployment Tests: Pass (true) or Fail (false)'
        )
        booleanParam(
            name: 'VULNERABILITY_PASS',
            defaultValue: true,
            description: '‚úÖ Vulnerability Scan: Pass (true) or Fail (false)'
        )
    }

    stages {
        stage('Verify Local Workspace') {
            steps {
                sh '''
                    echo "=== WORKSPACE ==="
                    pwd
                    echo "=== Workspace contents ==="
                    ls -la
                    echo "=== Checking scenario directory ==="
                    ls -la ${SCENARIO_PATH}

                    if [ ! -f ${SCENARIO_PATH}/Dockerfile ]; then
                        echo "ERROR: Dockerfile missing!"
                        exit 1
                    else
                        echo "‚úÖ Dockerfile found!"
                    fi
                '''
            }
        }

        stage('üîß Build Docker Image') {
            steps {
                sh """
                    echo "üõ†Ô∏è Building Docker image: ${IMAGE_NAME}"
                    docker build \\
                        -t ${IMAGE_NAME}:${BUILD_TAG} \\
                        -f ${SCENARIO_PATH}/Dockerfile \\
                        ${SCENARIO_PATH}
                """
            }
        }

        stage('üßπ Pre-Cleanup') {
            steps {
                sh '''
                    echo "üî™ Pre-cleanup: Killing leftover containers..."
                    docker ps -q --filter name=chaos-workshop | xargs -r docker rm -f || true
                '''
            }
        }

        stage('üöÄ Run EKS Tests') {
            parallel {
                stage('üîß kubectl Commands') {
                    when {
                        expression { params.RUN_KUBECTL_TESTS }
                    }
                    steps {
                        script {
                            def testMode = params.KUBECTL_PASS ? 'pass' : 'fail'
                            echo "Running kubectl Tests in ${testMode} mode"
                            
                            docker.image("${IMAGE_NAME}:${BUILD_TAG}").inside('-u root -v /var/run/docker.sock:/var/run/docker.sock -w ${SCENARIO_PATH}') {
                                sh """
                                    echo "=== kubectl Command Tests ==="
                                    python tests/test_kubectl_commands.py --mode ${testMode}
                                """
                            }
                        }
                    }
                }

                stage('üöÄ Deployment Tests') {
                    when {
                        expression { params.RUN_DEPLOYMENT_TESTS }
                    }
                    steps {
                        script {
                            def testMode = params.DEPLOYMENT_PASS ? 'pass' : 'fail'
                            echo "Running Deployment Tests in ${testMode} mode"
                            
                            docker.image("${IMAGE_NAME}:${BUILD_TAG}").inside('-u root -v /var/run/docker.sock:/var/run/docker.sock -w ${SCENARIO_PATH}') {
                                sh """
                                    echo "=== Deployment Tests ==="
                                    python tests/test_deployment.py --mode ${testMode}
                                """
                            }
                        }
                    }
                }

                stage('üåê Service Tests') {
                    when {
                        expression { params.RUN_SERVICE_TESTS }
                    }
                    steps {
                        script {
                            def testMode = params.VULNERABILITY_PASS ? 'pass' : 'fail'
                            echo "Running Service Tests in ${testMode} mode"
                            
                            docker.image("${IMAGE_NAME}:${BUILD_TAG}").inside('-u root -v /var/run/docker.sock:/var/run/docker.sock -w ${SCENARIO_PATH}') {
                                sh """
                                    echo "=== Service Tests ==="
                                    python tests/test_service.py --mode ${testMode}
                                """
                            }
                        }
                    }
                }
            }
        }

        stage('üìã Generate EKS Report') {
            steps {
                script {
                    docker.image("${IMAGE_NAME}:${BUILD_TAG}").inside('-u root -v /var/run/docker.sock:/var/run/docker.sock -w ${SCENARIO_PATH}') {
                        sh """
                            echo "üìã Generating EKS Report..."
                            python tests/generate_eks_report.py
                        """
                    }
                }
            }
        }

        stage('üì¶ Archive Reports') {
            steps {
                sh """
                    echo "üì¶ Archiving reports..."
                    mkdir -p ${REPORTS_DIR}
                    cp -r /workspace/ci-cd-chaos-workshop/Jenkins/jenkins_scenarios/scenario_03_html_reports/reports/* ${REPORTS_DIR}/ || true
                """
            }
        }
    }

    post {
        always {
            echo "‚ú® Chaos Agent defeated‚Ä¶ or plotting his next move!"
        }
        success {
            echo "üéâ All EKS tests completed successfully!"
        }
        failure {
            echo "üí• Some EKS tests failed - Chaos Agent strikes again!"
        }
    }
}
