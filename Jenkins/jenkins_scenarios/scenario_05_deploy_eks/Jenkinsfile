pipeline {
    agent any
    
    parameters {
        string(
            name: 'CLUSTER_NAME',
            defaultValue: 'eks-cf-stack-eks-cluster',
            description: 'EKS cluster name to deploy to'
        )
        choice(
            name: 'AWS_REGION',
            choices: ['us-east-1', 'us-west-2', 'us-east-2', 'eu-west-1'],
            description: 'AWS region for EKS cluster'
        )
        booleanParam(
            name: 'RUN_SCENARIO_5',
            defaultValue: true,
            description: 'Run Scenario 5: EKS Deployment Testing'
        )
        booleanParam(
            name: 'SCENARIO_5_PASS',
            defaultValue: true,
            description: 'Run PASS test (successful deployment)'
        )
        booleanParam(
            name: 'SCENARIO_5_FAIL',
            defaultValue: true,
            description: 'Run FAIL test (chaos deployment failures)'
        )
        booleanParam(
            name: 'CLEANUP_AFTER_TESTS',
            defaultValue: true,
            description: 'Clean up Kubernetes resources after tests'
        )
    }
    
    environment {
        // Scenario 5 specific paths
        SCENARIO_5_PATH = "Jenkins/jenkins_scenarios/scenario_05_deploy_eks"
        SCENARIO_5_IMAGE = "chaos-workshop-scenario-5:${BUILD_NUMBER}"
        
        // AWS Configuration
        AWS_DEFAULT_REGION = "${params.AWS_REGION}"
        AWS_PAGER = ""
        AWS_CLI_AUTO_PROMPT = "off"
    }
    
    stages {
        stage('Checkout & Preparation') {
            when {
                expression { params.RUN_SCENARIO_5 == true }
            }
            
            steps {
                script {
                    echo """
üöÄ Starting Scenario 5: EKS Deployment Chaos Testing
üìã Configuration:
   ‚Ä¢ Cluster: ${params.CLUSTER_NAME}
   ‚Ä¢ Region: ${params.AWS_REGION}
   ‚Ä¢ Pass Test: ${params.SCENARIO_5_PASS}
   ‚Ä¢ Fail Test: ${params.SCENARIO_5_FAIL}
   ‚Ä¢ Build: ${BUILD_NUMBER}
   ‚Ä¢ Scenario Path: ${env.SCENARIO_5_PATH}
                    """
                }
                
                // Verify the scenario directory structure
                sh '''
                    echo "üìÇ Verifying scenario directory structure..."
                    
                    if [ -d "${SCENARIO_5_PATH}" ]; then
                        echo "‚úÖ Scenario 5 directory found"
                        cd "${SCENARIO_5_PATH}"
                        
                        echo "üìã Files in scenario directory:"
                        ls -la
                        
                        echo "üìã Required files check:"
                        [ -f "Dockerfile" ] && echo "‚úÖ Dockerfile found" || echo "‚ùå Dockerfile missing"
                        [ -f "requirements.txt" ] && echo "‚úÖ requirements.txt found" || echo "‚ùå requirements.txt missing"
                        [ -f "run_tests.py" ] && echo "‚úÖ run_tests.py found" || echo "‚ùå run_tests.py missing"
                        [ -d "tests" ] && echo "‚úÖ tests directory found" || echo "‚ùå tests directory missing"
                        
                        if [ -d "tests" ]; then
                            echo "üìã Test files:"
                            ls -la tests/
                            echo "üìã Deploy files:"
                            ls -la tests/deploy/ 2>/dev/null || echo "‚ö†Ô∏è tests/deploy directory not found"
                        fi
                        
                        # Create reports directory
                        mkdir -p reports
                        echo "‚úÖ Preparation completed"
                        
                    else
                        echo "‚ùå Scenario 5 directory not found at: ${SCENARIO_5_PATH}"
                        echo "üìÇ Available directories:"
                        find . -name "*scenario*" -type d | head -10
                        exit 1
                    fi
                '''
            }
        }
        
        stage('Build Docker Image') {
            when {
                expression { params.RUN_SCENARIO_5 == true }
            }
            
            steps {
                script {
                    echo "üê≥ Building Docker image for Scenario 5..."
                    
                    dir(env.SCENARIO_5_PATH) {
                        // Build the Docker image from the correct directory
                        sh '''
                            echo "üìç Current directory: $(pwd)"
                            echo "üìã Building image: ${SCENARIO_5_IMAGE}"
                            
                            docker build -t "${SCENARIO_5_IMAGE}" --no-cache .
                            
                            if [ $? -eq 0 ]; then
                                echo "‚úÖ Docker image built successfully"
                                docker images | grep chaos-workshop-scenario-5
                            else
                                echo "‚ùå Docker build failed"
                                exit 1
                            fi
                        '''
                    }
                }
            }
        }
        
        stage('Setup AWS & Kubernetes') {
            when {
                expression { params.RUN_SCENARIO_5 == true }
            }
            
            steps {
                script {
                    echo "üîê Setting up AWS and Kubernetes access..."
                    
                    withCredentials([
                        usernamePassword(
                            credentialsId: 'aws-credentials',
                            usernameVariable: 'AWS_ACCESS_KEY_ID',
                            passwordVariable: 'AWS_SECRET_ACCESS_KEY'
                        )
                    ]) {
                        
                        dir(env.SCENARIO_5_PATH) {
                            sh '''
                                export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
                                export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
                                export AWS_DEFAULT_REGION=${AWS_REGION}
                                
                                echo "üîê Testing AWS authentication..."
                                aws --version || (echo "Installing AWS CLI..." && curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" && unzip awscliv2.zip && ./aws/install)
                                
                                aws sts get-caller-identity
                                
                                echo "üîç Checking EKS cluster..."
                                aws eks describe-cluster --name "${CLUSTER_NAME}" --region "${AWS_REGION}" --query 'cluster.{Status:status,Version:version}'
                                
                                echo "‚öôÔ∏è Creating kubeconfig..."
                                aws eks update-kubeconfig --region "${AWS_REGION}" --name "${CLUSTER_NAME}" --kubeconfig ./kubeconfig
                                
                                if [ -f ./kubeconfig ]; then
                                    echo "‚úÖ Kubeconfig created successfully"
                                    ls -la ./kubeconfig
                                else
                                    echo "‚ùå Failed to create kubeconfig"
                                    exit 1
                                fi
                                
                                echo "üîç Testing kubectl access..."
                                export KUBECONFIG=./kubeconfig
                                
                                # Install kubectl if needed
                                kubectl version --client=true || (echo "Installing kubectl..." && curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" && chmod +x kubectl && mv kubectl /usr/local/bin/)
                                
                                # Test kubectl access
                                if kubectl cluster-info --request-timeout=30s; then
                                    echo "‚úÖ kubectl access confirmed"
                                else
                                    echo "‚ö†Ô∏è kubectl access failed - this is expected if your user isn't in aws-auth ConfigMap"
                                    echo "‚úÖ AWS authentication works - kubeconfig created successfully"
                                fi
                                
                                echo "‚úÖ Setup completed!"
                            '''
                        }
                    }
                }
            }
        }
        
        stage('Run EKS Tests') {
            when {
                expression { params.RUN_SCENARIO_5 == true }
            }
            
            parallel {
                stage('PASS Test') {
                    when {
                        expression { params.SCENARIO_5_PASS == true }
                    }
                    
                    steps {
                        script {
                            echo "‚úÖ Running PASS test..."
                            
                            withCredentials([
                                usernamePassword(
                                    credentialsId: 'aws-credentials',
                                    usernameVariable: 'AWS_ACCESS_KEY_ID',
                                    passwordVariable: 'AWS_SECRET_ACCESS_KEY'
                                )
                            ]) {
                                
                                dir(env.SCENARIO_5_PATH) {
                                    sh '''
                                        echo "üöÄ Executing PASS test..."
                                        
                                        docker run --rm \\
                                            -e AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} \\
                                            -e AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} \\
                                            -e AWS_DEFAULT_REGION=${AWS_REGION} \\
                                            -e KUBECONFIG=/root/.kube/config \\
                                            -e PYTHONUNBUFFERED=1 \\
                                            -v $(pwd)/kubeconfig:/root/.kube/config:ro \\
                                            -v $(pwd)/reports:/app/reports \\
                                            --name scenario-5-pass-${BUILD_NUMBER} \\
                                            ${SCENARIO_5_IMAGE} \\
                                            python run_tests.py --pass-only
                                        
                                        echo "‚úÖ PASS test completed"
                                    '''
                                }
                            }
                        }
                    }
                    
                    post {
                        always {
                            dir(env.SCENARIO_5_PATH) {
                                sh '''
                                    docker logs scenario-5-pass-${BUILD_NUMBER} > reports/pass-test-logs.txt 2>&1 || true
                                    docker rm -f scenario-5-pass-${BUILD_NUMBER} || true
                                '''
                            }
                        }
                    }
                }
                
                stage('FAIL Test') {
                    when {
                        expression { params.SCENARIO_5_FAIL == true }
                    }
                    
                    steps {
                        script {
                            echo "üí• Running FAIL test..."
                            
                            withCredentials([
                                usernamePassword(
                                    credentialsId: 'aws-credentials',
                                    usernameVariable: 'AWS_ACCESS_KEY_ID',
                                    passwordVariable: 'AWS_SECRET_ACCESS_KEY'
                                )
                            ]) {
                                
                                dir(env.SCENARIO_5_PATH) {
                                    sh '''
                                        echo "üí• Executing FAIL test..."
                                        
                                        docker run --rm \\
                                            -e AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} \\
                                            -e AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} \\
                                            -e AWS_DEFAULT_REGION=${AWS_REGION} \\
                                            -e KUBECONFIG=/root/.kube/config \\
                                            -e PYTHONUNBUFFERED=1 \\
                                            -v $(pwd)/kubeconfig:/root/.kube/config:ro \\
                                            -v $(pwd)/reports:/app/reports \\
                                            --name scenario-5-fail-${BUILD_NUMBER} \\
                                            ${SCENARIO_5_IMAGE} \\
                                            python run_tests.py --fail-only
                                        
                                        echo "‚úÖ FAIL test completed"
                                    '''
                                }
                            }
                        }
                    }
                    
                    post {
                        always {
                            dir(env.SCENARIO_5_PATH) {
                                sh '''
                                    docker logs scenario-5-fail-${BUILD_NUMBER} > reports/fail-test-logs.txt 2>&1 || true
                                    docker rm -f scenario-5-fail-${BUILD_NUMBER} || true
                                '''
                            }
                        }
                    }
                }
            }
        }
        
        stage('Generate Reports') {
            when {
                expression { params.RUN_SCENARIO_5 == true }
            }
            
            steps {
                script {
                    echo "üìä Generating reports..."
                    
                    dir(env.SCENARIO_5_PATH) {
                        sh '''
                            echo "üìà Creating final reports..."
                            
                            # List generated reports
                            echo "üìÇ Generated reports:"
                            ls -la reports/ || echo "No reports generated"
                            
                            # Create summary
                            cat > reports/scenario-5-summary.json << EOF
{
    "scenario": "scenario_05_deploy_eks",
    "build_number": "${BUILD_NUMBER}",
    "cluster_name": "${CLUSTER_NAME}",
    "aws_region": "${AWS_REGION}",
    "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
    "tests_executed": {
        "pass_test": ${SCENARIO_5_PASS},
        "fail_test": ${SCENARIO_5_FAIL}
    },
    "jenkins_url": "${BUILD_URL}"
}
EOF
                            
                            echo "üìã Final Summary:"
                            cat reports/scenario-5-summary.json
                        '''
                    }
                }
            }
        }
        
        stage('Cleanup') {
            when {
                allOf {
                    expression { params.RUN_SCENARIO_5 == true }
                    expression { params.CLEANUP_AFTER_TESTS == true }
                }
            }
            
            steps {
                script {
                    echo "üßπ Cleaning up resources..."
                    
                    withCredentials([
                        usernamePassword(
                            credentialsId: 'aws-credentials',
                            usernameVariable: 'AWS_ACCESS_KEY_ID',
                            passwordVariable: 'AWS_SECRET_ACCESS_KEY'
                        )
                    ]) {
                        
                        dir(env.SCENARIO_5_PATH) {
                            sh '''
                                echo "üóëÔ∏è Removing test resources from cluster..."
                                
                                docker run --rm \\
                                    -e AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} \\
                                    -e AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} \\
                                    -e AWS_DEFAULT_REGION=${AWS_REGION} \\
                                    -e KUBECONFIG=/root/.kube/config \\
                                    -v $(pwd)/kubeconfig:/root/.kube/config:ro \\
                                    ${SCENARIO_5_IMAGE} \\
                                    /bin/bash -c "
                                        kubectl delete deployment chaos-workshop-app --ignore-not-found=true
                                        kubectl delete service chaos-workshop-app-service --ignore-not-found=true
                                        kubectl delete configmap chaos-workshop-app-config --ignore-not-found=true
                                        echo '‚úÖ Cleanup completed'
                                    "
                            '''
                        }
                    }
                }
            }
        }
    }
    
    post {
        always {
            script {
                echo "üì¶ Archiving artifacts..."
                
                dir(env.SCENARIO_5_PATH) {
                    // Archive reports
                    archiveArtifacts artifacts: 'reports/**/*', 
                                   allowEmptyArchive: true,
                                   fingerprint: true
                    
                    // Archive kubeconfig
                    archiveArtifacts artifacts: 'kubeconfig', 
                                   allowEmptyArchive: true,
                                   fingerprint: true
                    
                    // Simple HTML report publishing without plugin
                    script {
                        if (fileExists('reports/eks_deployment_report.html')) {
                            echo "üìä HTML Report generated successfully"
                            echo "üìã Report available in archived artifacts"
                        } else {
                            echo "‚ö†Ô∏è No HTML report found"
                        }
                    }
                }
            }
        }
        
        success {
            echo """
‚úÖ Scenario 5 completed successfully!
üìä Check the archived artifacts for detailed reports
üéØ Workshop attendees can now see real EKS chaos testing results!
            """
        }
        
        failure {
            dir(env.SCENARIO_5_PATH) {
                sh '''
                    echo "‚ùå Collecting diagnostic info..."
                    echo "=== Directory Contents ==="
                    ls -la
                    echo "=== Reports ==="
                    ls -la reports/ || echo "No reports"
                    echo "=== Docker Images ==="
                    docker images | grep scenario-5 || echo "No images"
                '''
            }
        }
        
        cleanup {
            sh '''
                # Clean up containers and images
                docker rm -f scenario-5-pass-${BUILD_NUMBER} scenario-5-fail-${BUILD_NUMBER} 2>/dev/null || true
                docker rmi ${SCENARIO_5_IMAGE} 2>/dev/null || true
            '''
        }
    }
}