pipeline {
    agent any

    environment {
        // Use dynamic workspace path instead of hardcoded
        SCENARIO_PATH = "${WORKSPACE}/Jenkins/jenkins_scenarios/scenario_04_manage_secrets"
        IMAGE_NAME = "chaos-workshop-secret-management"
        BUILD_TAG = "${BUILD_NUMBER}"
        REPORTS_DIR = 'reports'
    }

    parameters {
        booleanParam(
            name: 'RUN_SECRET_SCAN',
            defaultValue: true,
            description: '🔍 Run Secret Scanning Tests'
        )
        booleanParam(
            name: 'RUN_COMPLIANCE_CHECK',
            defaultValue: true,
            description: '📋 Run Compliance Check Tests'
        )
        booleanParam(
            name: 'RUN_VULNERABILITY_SCAN',
            defaultValue: true,
            description: '🛡️ Run Vulnerability Scanning Tests'
        )
        booleanParam(
            name: 'SECRET_SCAN_PASS',
            defaultValue: true,
            description: '✅ Secret Scan: Pass (true) or Fail (false)'
        )
        booleanParam(
            name: 'COMPLIANCE_PASS',
            defaultValue: true,
            description: '✅ Compliance: Pass (true) or Fail (false)'
        )
        booleanParam(
            name: 'VULNERABILITY_PASS',
            defaultValue: true,
            description: '✅ Vulnerability Scan: Pass (true) or Fail (false)'
        )
    }

    stages {
        stage('🔧 Setup Docker Permissions') {
            steps {
                sh '''
                    echo "🔧 Setting up Docker permissions..."
                    
                    # Ensure Docker socket is accessible
                    if [ ! -S /var/run/docker.sock ]; then
                        echo "ERROR: Docker socket not found at /var/run/docker.sock!"
                        echo "Make sure Docker is running and the socket is mounted in Jenkins container"
                        exit 1
                    fi
                    
                    # Check current user and Docker socket permissions
                    echo "Current user: $(whoami)"
                    echo "Docker socket permissions: $(ls -la /var/run/docker.sock)"
                    
                    # Try to fix permissions if needed (ignore errors if no sudo access)
                    sudo chmod 666 /var/run/docker.sock 2>/dev/null || echo "Note: Could not change socket permissions (no sudo access)"
                    
                    # Test Docker access
                    if docker ps > /dev/null 2>&1; then
                        echo "✅ Docker access verified successfully"
                        docker --version
                    else
                        echo "❌ ERROR: Cannot access Docker daemon"
                        echo "Please ensure:"
                        echo "1. Docker is running"
                        echo "2. Jenkins container has Docker socket mounted: -v /var/run/docker.sock:/var/run/docker.sock"
                        echo "3. Jenkins user has Docker permissions"
                        exit 1
                    fi
                '''
            }
        }

        stage('📁 Verify Local Workspace') {
            steps {
                sh '''
                    echo "=== WORKSPACE VERIFICATION ==="
                    echo "Current working directory: $(pwd)"
                    echo "WORKSPACE environment variable: ${WORKSPACE}"
                    echo "SCENARIO_PATH: ${SCENARIO_PATH}"
                    
                    echo "=== Workspace contents ==="
                    ls -la
                    
                    echo "=== Checking for Jenkins directory ==="
                    if [ -d "Jenkins" ]; then
                        echo "✅ Jenkins directory found"
                        ls -la Jenkins/
                    else
                        echo "❌ Jenkins directory not found in workspace"
                        echo "Available directories:"
                        ls -la
                        exit 1
                    fi
                    
                    echo "=== Checking scenario directory ==="
                    if [ -d "${SCENARIO_PATH}" ]; then
                        echo "✅ Scenario directory found: ${SCENARIO_PATH}"
                        ls -la "${SCENARIO_PATH}/"
                    else
                        echo "❌ Scenario directory not found: ${SCENARIO_PATH}"
                        echo "Checking if Jenkins scenarios exist..."
                        find . -name "scenario_04_manage_secrets" -type d
                        exit 1
                    fi

                    echo "=== Checking required files ==="
                    for file in Dockerfile requirements.txt; do
                        if [ -f "${SCENARIO_PATH}/${file}" ]; then
                            echo "✅ ${file} found"
                        else
                            echo "❌ ${file} not found in ${SCENARIO_PATH}"
                            echo "Contents of scenario directory:"
                            ls -la "${SCENARIO_PATH}/"
                            exit 1
                        fi
                    done
                    
                    echo "=== Checking tests directory ==="
                    if [ -d "${SCENARIO_PATH}/tests" ]; then
                        echo "✅ Tests directory found"
                        ls -la "${SCENARIO_PATH}/tests/"
                    else
                        echo "❌ Tests directory not found"
                        exit 1
                    fi
                    
                    echo "=== Creating reports directory ==="
                    mkdir -p "${WORKSPACE}/reports"
                    echo "✅ Reports directory ready: ${WORKSPACE}/reports"
                    
                    echo "✅ All workspace verification checks passed!"
                '''
            }
        }

        stage('🔧 Build Docker Image') {
            steps {
                sh """
                    echo "🛠️ Building Docker image: ${IMAGE_NAME}:${BUILD_TAG}"
                    echo "Current directory: \$(pwd)"
                    echo "Using Dockerfile: ${SCENARIO_PATH}/Dockerfile"
                    echo "Build context: ${SCENARIO_PATH}"
                    
                    # Verify all required files are present
                    echo "=== Verifying build context files ==="
                    ls -la "${SCENARIO_PATH}/"
                    
                    # Show Dockerfile content for debugging
                    echo "=== Dockerfile content ==="
                    cat "${SCENARIO_PATH}/Dockerfile"
                    
                    # Build the Docker image
                    docker build \\
                        -t ${IMAGE_NAME}:${BUILD_TAG} \\
                        -f "${SCENARIO_PATH}/Dockerfile" \\
                        "${SCENARIO_PATH}" || {
                        echo "❌ Docker build failed!"
                        echo "Build context contents:"
                        ls -la "${SCENARIO_PATH}/"
                        exit 1
                    }
                    
                    echo "✅ Docker image built successfully: ${IMAGE_NAME}:${BUILD_TAG}"
                    docker images | grep "${IMAGE_NAME}" || echo "Warning: Image not found in docker images output"
                """
            }
        }

        stage('🧹 Pre-Cleanup') {
            steps {
                sh '''
                    echo "🔪 Pre-cleanup: Killing leftover containers..."
                    docker ps -q --filter name=chaos-workshop | xargs -r docker rm -f || true
                '''
            }
        }

        stage('🔍 Run Security Tests') {
            parallel {
                stage('🔍 Secret Scanning') {
                    when {
                        expression { params.RUN_SECRET_SCAN }
                    }
                    steps {
                        script {
                            def testMode = params.SECRET_SCAN_PASS ? 'pass' : 'fail'
                            echo "Running Secret Scanning in ${testMode} mode"
                            
                            sh """
                                echo "=== Secret Scanning Test ==="
                                
                                # Run test in container with proper volume mounts
                                docker run --rm \\
                                    -v /var/run/docker.sock:/var/run/docker.sock \\
                                    -v "${WORKSPACE}/reports:/app/reports" \\
                                    -w /app \\
                                    ${IMAGE_NAME}:${BUILD_TAG} \\
                                    sh -c "
                                        echo 'Running secret scanning test...'
                                        if [ -f tests/test_secret_scanning.py ]; then
                                            python tests/test_secret_scanning.py --mode ${testMode} || echo 'Secret scanning test completed with mode: ${testMode}'
                                        else
                                            echo 'Secret scanning test file not found, creating mock result'
                                            echo '{\"status\": \"${testMode}\", \"test\": \"secret_scanning\"}' > reports/secret_scan_${testMode}.json
                                        fi
                                    "
                            """
                        }
                    }
                }

                stage('📋 Compliance Check') {
                    when {
                        expression { params.RUN_COMPLIANCE_CHECK }
                    }
                    steps {
                        script {
                            def testMode = params.COMPLIANCE_PASS ? 'pass' : 'fail'
                            echo "Running Compliance Check in ${testMode} mode"
                            
                            sh """
                                echo "=== Compliance Check Test ==="
                                
                                # Run test in container with proper volume mounts
                                docker run --rm \\
                                    -v /var/run/docker.sock:/var/run/docker.sock \\
                                    -v "${WORKSPACE}/reports:/app/reports" \\
                                    -w /app \\
                                    ${IMAGE_NAME}:${BUILD_TAG} \\
                                    sh -c "
                                        echo 'Running compliance check test...'
                                        if [ -f tests/test_compliance_check.py ]; then
                                            python tests/test_compliance_check.py --mode ${testMode} || echo 'Compliance check test completed with mode: ${testMode}'
                                        else
                                            echo 'Compliance check test file not found, creating mock result'
                                            echo '{\"status\": \"${testMode}\", \"test\": \"compliance_check\"}' > reports/compliance_${testMode}.json
                                        fi
                                    "
                            """
                        }
                    }
                }

                stage('🛡️ Vulnerability Scan') {
                    when {
                        expression { params.RUN_VULNERABILITY_SCAN }
                    }
                    steps {
                        script {
                            def testMode = params.VULNERABILITY_PASS ? 'pass' : 'fail'
                            echo "Running Vulnerability Scan in ${testMode} mode"
                            
                            sh """
                                echo "=== Vulnerability Scan Test ==="
                                
                                # Run test in container with proper volume mounts
                                docker run --rm \\
                                    -v /var/run/docker.sock:/var/run/docker.sock \\
                                    -v "${WORKSPACE}/reports:/app/reports" \\
                                    -w /app \\
                                    ${IMAGE_NAME}:${BUILD_TAG} \\
                                    sh -c "
                                        echo 'Running vulnerability scan test...'
                                        if [ -f tests/test_vulnerability_scan.py ]; then
                                            python tests/test_vulnerability_scan.py --mode ${testMode} || echo 'Vulnerability scan test completed with mode: ${testMode}'
                                        else
                                            echo 'Vulnerability scan test file not found, creating mock result'
                                            echo '{\"status\": \"${testMode}\", \"test\": \"vulnerability_scan\"}' > reports/vuln_scan_${testMode}.json
                                        fi
                                    "
                            """
                        }
                    }
                }
            }
        }

        stage('📋 Generate Security Report') {
            steps {
                sh """
                    echo "📋 Generating Security Report..."
                    
                    # Ensure reports directory exists
                    mkdir -p "${WORKSPACE}/reports"
                    
                    # Run report generation in container
                    docker run --rm \\
                        -v "${WORKSPACE}/reports:/app/reports" \\
                        -w /app \\
                        ${IMAGE_NAME}:${BUILD_TAG} \\
                        sh -c "
                            echo 'Generating security report...'
                            if [ -f tests/generate_security_report.py ]; then
                                python tests/generate_security_report.py || echo 'Report generation completed'
                            else
                                echo 'Report generator not found, creating basic security report'
                                cat > reports/security_report.html << 'EOF'
<!DOCTYPE html>
<html>
<head>
    <title>Security Report</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; }
        .header { background-color: #f0f0f0; padding: 20px; }
        .result { margin: 20px 0; padding: 15px; border-left: 4px solid #007cba; }
        .pass { border-left-color: #28a745; }
        .fail { border-left-color: #dc3545; }
    </style>
</head>
<body>
    <div class='header'>
        <h1>Security Test Report</h1>
        <p>Generated on: \$(date)</p>
    </div>
    <div class='result pass'>
        <h3>Secret Scanning</h3>
        <p>Status: ${params.SECRET_SCAN_PASS ? 'PASS' : 'FAIL'}</p>
    </div>
    <div class='result ${params.COMPLIANCE_PASS ? 'pass' : 'fail'}'>
        <h3>Compliance Check</h3>
        <p>Status: ${params.COMPLIANCE_PASS ? 'PASS' : 'FAIL'}</p>
    </div>
    <div class='result ${params.VULNERABILITY_PASS ? 'pass' : 'fail'}'>
        <h3>Vulnerability Scan</h3>
        <p>Status: ${params.VULNERABILITY_PASS ? 'PASS' : 'FAIL'}</p>
    </div>
</body>
</html>
EOF
                            fi
                            
                            echo 'Security report files generated:'
                            ls -la reports/
                        "
                """
            }
        }

        stage('📦 Archive Reports') {
            steps {
                sh """
                    echo "📦 Archiving reports..."
                    
                    # Ensure reports directory exists
                    mkdir -p "${WORKSPACE}/${REPORTS_DIR}"
                    
                    # Copy any generated reports
                    if [ -d "${WORKSPACE}/reports" ] && [ "\$(ls -A ${WORKSPACE}/reports 2>/dev/null)" ]; then
                        echo "Copying reports from ${WORKSPACE}/reports to ${WORKSPACE}/${REPORTS_DIR}/"
                        cp -r "${WORKSPACE}/reports/"* "${WORKSPACE}/${REPORTS_DIR}/" || echo "No reports to copy"
                    else
                        echo "No reports found in ${WORKSPACE}/reports, creating placeholder"
                        echo '<h1>Security Tests Completed</h1><p>No detailed reports generated</p>' > "${WORKSPACE}/${REPORTS_DIR}/security_summary.html"
                    fi
                    
                    echo "Final reports directory contents:"
                    ls -la "${WORKSPACE}/${REPORTS_DIR}/" || echo "Reports directory is empty"
                """
                
                // Archive the reports
                archiveArtifacts artifacts: '${REPORTS_DIR}/*.html, ${REPORTS_DIR}/*.json', allowEmptyArchive: true
            }
        }
    }

    post {
        always {
            echo "✨ Chaos Agent defeated… or plotting his next move!"
        }
        success {
            echo "🎉 All security tests completed successfully!"
        }
        failure {
            echo "💥 Some security tests failed - Chaos Agent strikes again!"
        }
    }
}
