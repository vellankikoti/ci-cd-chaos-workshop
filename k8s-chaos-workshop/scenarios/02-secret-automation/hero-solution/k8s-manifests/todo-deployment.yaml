apiVersion: apps/v1
kind: Deployment
metadata:
  name: secure-todo-app
  namespace: secure-todo
  labels:
    app: secure-todo-app
    tier: frontend
    security-level: enterprise
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0  # Zero downtime deployments
  selector:
    matchLabels:
      app: secure-todo-app
  template:
    metadata:
      labels:
        app: secure-todo-app
        tier: frontend
      annotations:
        security-scan: "passed"
        compliance-check: "enterprise"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      initContainers:
      - name: wait-for-mysql
        image: busybox:1.35
        command:
        - sh
        - -c
        - |
          echo "Waiting for MySQL to be ready..."
          until nc -z secure-mysql-service 3306; do
            echo "MySQL not ready, waiting..."
            sleep 2
          done
          echo "MySQL is ready!"
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      containers:
      - name: todo-app
        image: a7medayman6/todolist-flask:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 5000
          name: http
          protocol: TCP
        env:
        # Database connection from secrets
        - name: DB_HOST
          value: "secure-mysql-service"
        - name: DB_PORT
          value: "3306"
        - name: DB_NAME
          valueFrom:
            secretKeyRef:
              name: mysql-credentials
              key: mysql-database
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: mysql-credentials
              key: mysql-user
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-credentials
              key: mysql-password
        # Application secrets
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: app-credentials
              key: secret-key
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: app-credentials
              key: jwt-secret
        - name: API_KEY
          valueFrom:
            secretKeyRef:
              name: app-credentials
              key: api-key
        # Application configuration
        - name: FLASK_ENV
          value: "production"
        - name: FLASK_DEBUG
          value: "false"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
            ephemeral-storage: "100Mi"
          limits:
            memory: "256Mi"
            cpu: "200m"
            ephemeral-storage: "200Mi"
        # Health checks
        livenessProbe:
          httpGet:
            path: /health  # Assuming health endpoint exists
            port: 5000
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /ready  # Assuming readiness endpoint exists
            port: 5000
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
          successThreshold: 1
        # Fallback health check if endpoints don't exist
        startupProbe:
          httpGet:
            path: /
            port: 5000
            scheme: HTTP
          initialDelaySeconds: 15
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 10
          successThreshold: 1
        # Security context
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false  # App may need to write temp files
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp-volume
          mountPath: /tmp
        - name: app-logs
          mountPath: /app/logs
      volumes:
      - name: tmp-volume
        emptyDir: {}
      - name: app-logs
        emptyDir: {}
      restartPolicy: Always