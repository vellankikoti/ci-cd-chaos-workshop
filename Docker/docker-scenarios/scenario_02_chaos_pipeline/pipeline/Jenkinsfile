pipeline {
    agent any

    parameters {
        choice(
            name: "STAGE",
            choices: ["step1_fail_network", "step2_fail_resource", "step3_fail_service", "step4_fail_db", "step5_success"],
            description: "Select the scenario step to run"
        )
    }

    environment {
        SCENARIO_DIR = "scenarios/${params.STAGE}"
        IMAGE_NAME = "chaos-${params.STAGE}"
    }

    stages {
        stage("Build Scenario Docker Image") {
            steps {
                echo "üöß Building Docker image for ${params.STAGE}..."
                sh """
                    docker build -t $IMAGE_NAME $SCENARIO_DIR
                """
            }
        }
        stage("Run Scenario Container") {
            steps {
                script {
                    echo "üöÄ Running scenario: ${params.STAGE}"
                    def runArgs = ""
                    if (params.STAGE == "step2_fail_resource") {
                        runArgs = "--memory=64m --memory-swap=64m"
                    }
                    sh """
                        docker run --rm $runArgs $IMAGE_NAME | tee scenario.log
                    """
                }
            }
        }
        stage("Highlight What Was Fixed/Still Broken") {
            steps {
                script {
                    def messages = [
                        "step1_fail_network": [
                            fixed: "Nothing fixed yet! This is the first intentional failure.",
                            broken: "Network is broken. App cannot reach the outside world."
                        ],
                        "step2_fail_resource": [
                            fixed: "Network is now working! (But... memory is too low)",
                            broken: "Resource limits are too strict. App crashes with MemoryError."
                        ],
                        "step3_fail_service": [
                            fixed: "Network and resources are now fine! (But... missing Redis service)",
                            broken: "Service dependency (Redis) is missing. App cannot connect."
                        ],
                        "step4_fail_db": [
                            fixed: "Network, resources, and service are all good! (But... missing MySQL)",
                            broken: "Database connection fails. MySQL is not running."
                        ],
                        "step5_success": [
                            fixed: "All previous issues are fixed! üéâ",
                            broken: "Nothing! This is the chaos-free, production-ready step."
                        ]
                    ]
                    def msg = messages[params.STAGE]
                    echo "‚úÖ FIXED: ${msg.fixed}"
                    echo "‚ùå STILL BROKEN: ${msg.broken}"
                }
            }
        }
    }
    post {
        always {
            echo "üèÅ Scenario run complete! Check the logs above for details."
        }
        success {
            echo "üéâ Success!"
        }
        failure {
            echo "üí• Failure (as expected for some steps)!"
            script {
                echo "üîç Last 10 lines of scenario.log (for debugging):"
                sh "tail -10 scenario.log || echo \"No scenario.log found\""
            }
        }
    }
}
