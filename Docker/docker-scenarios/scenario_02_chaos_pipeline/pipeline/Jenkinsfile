pipeline {
    agent any

    parameters {
        choice(
            name: "SCENARIO",
            choices: [
                "chaos-full", 
                "chaos-1", 
                "chaos-2", 
                "chaos-3", 
                "chaos-free",
                "progressive-demo"
            ],
            description: "Select the chaos scenario to run"
        )
    }

    environment {
        SCENARIO_DIR = "Docker/docker-scenarios/scenario_02_chaos_pipeline"
        WORKSPACE_DIR = "${WORKSPACE}"
    }

    stages {
        stage("Setup Environment") {
            steps {
                echo "🚀 Setting up Chaos Engineering Workshop environment..."
                sh """
                    echo "📁 Working directory: ${WORKSPACE}"
                    echo "🎯 Selected scenario: ${params.SCENARIO}"
                    echo "📦 Checking available files:"
                    ls -la || echo "No files found in workspace"
                """
            }
        }

        stage("Check Required Files") {
            steps {
                script {
                    echo "🔍 Checking for required files..."
                    
                    // Check if we're in the right directory structure
                    def hasScenarios = fileExists("${SCENARIO_DIR}/scenarios")
                    def hasPipeline = fileExists("${SCENARIO_DIR}/pipeline")
                    def hasDemoScripts = fileExists("${SCENARIO_DIR}/demo_manual.sh")
                    
                    if (!hasScenarios) {
                        echo "⚠️ scenarios/ directory not found in ${SCENARIO_DIR}"
                        echo "📋 Current directory contents:"
                        sh "ls -la"
                        echo "📋 Checking subdirectory:"
                        sh "ls -la ${SCENARIO_DIR} 2>/dev/null || echo 'Directory not found'"
                    } else {
                        echo "✅ scenarios/ directory found"
                    }
                    
                    if (!hasPipeline) {
                        echo "⚠️ pipeline/ directory not found in ${SCENARIO_DIR}"
                    } else {
                        echo "✅ pipeline/ directory found"
                    }
                    
                    if (!hasDemoScripts) {
                        echo "⚠️ demo_manual.sh not found in ${SCENARIO_DIR}"
                    } else {
                        echo "✅ demo_manual.sh found"
                    }
                    
                    // If we don't have the required files, we'll run a simplified version
                    if (!hasScenarios && !hasPipeline) {
                        echo "🔄 Running simplified chaos scenario (no local files)"
                        env.SIMPLIFIED_MODE = "true"
                    } else {
                        echo "✅ All required files found"
                        env.SIMPLIFIED_MODE = "false"
                    }
                }
            }
        }

        stage("Setup Workspace if Needed") {
            when {
                expression { env.SIMPLIFIED_MODE == "true" }
            }
            steps {
                script {
                    echo "🔧 Setting up workspace with required files..."
                    sh """
                        cd ${WORKSPACE}
                        mkdir -p ${SCENARIO_DIR}
                        cd ${SCENARIO_DIR}
                        
                        # Create basic scenario structure
                        mkdir -p scenarios/step1_fail_network
                        mkdir -p scenarios/step2_fail_resource
                        mkdir -p scenarios/step3_fail_service
                        mkdir -p scenarios/step4_fail_db
                        mkdir -p scenarios/step5_success
                        mkdir -p pipeline
                        
                        # Create basic Dockerfiles
                        echo 'FROM python:3.9-slim' > scenarios/step1_fail_network/Dockerfile
                        echo 'WORKDIR /app' >> scenarios/step1_fail_network/Dockerfile
                        echo 'RUN pip install flask' >> scenarios/step1_fail_network/Dockerfile
                        echo 'COPY app.py .' >> scenarios/step1_fail_network/Dockerfile
                        echo 'EXPOSE 8080' >> scenarios/step1_fail_network/Dockerfile
                        echo 'CMD ["python", "app.py"]' >> scenarios/step1_fail_network/Dockerfile
                        
                        # Create basic app.py files
                        echo 'from flask import Flask, jsonify' > scenarios/step1_fail_network/app.py
                        echo 'app = Flask(__name__)' >> scenarios/step1_fail_network/app.py
                        echo '@app.route("/health")' >> scenarios/step1_fail_network/app.py
                        echo 'def health():' >> scenarios/step1_fail_network/app.py
                        echo '    return jsonify({"status": "unhealthy", "step": "step1_fail_network"})' >> scenarios/step1_fail_network/app.py
                        echo 'if __name__ == "__main__":' >> scenarios/step1_fail_network/app.py
                        echo '    app.run(host="0.0.0.0", port=8080)' >> scenarios/step1_fail_network/app.py
                        
                        # Copy other step files (simplified versions)
                        cp -r scenarios/step1_fail_network/* scenarios/step2_fail_resource/
                        cp -r scenarios/step1_fail_network/* scenarios/step3_fail_service/
                        cp -r scenarios/step1_fail_network/* scenarios/step4_fail_db/
                        cp -r scenarios/step1_fail_network/* scenarios/step5_success/
                        
                        # Create demo script
                        echo '#!/bin/bash' > demo_manual.sh
                        echo 'echo "🎓 Progressive Chaos Demo"' >> demo_manual.sh
                        echo 'echo "Running simplified demo..."' >> demo_manual.sh
                        echo 'echo "✅ Demo completed!"' >> demo_manual.sh
                        chmod +x demo_manual.sh
                        
                        echo "✅ Workspace setup completed!"
                    """
                    env.SIMPLIFIED_MODE = "false"
                }
            }
        }

        stage("Run Chaos Scenario") {
            steps {
                script {
                    echo "🔥 Running chaos scenario: ${params.SCENARIO}"
                    
                    if (params.SCENARIO == "progressive-demo") {
                        // Run the complete progressive demo
                        echo "🎓 Running complete progressive chaos demo..."
                        sh """
                            cd ${WORKSPACE}/${SCENARIO_DIR}
                            chmod +x demo_manual.sh
                            timeout 600 ./demo_manual.sh || echo "Demo completed or timed out"
                        """
                    } else {
                        // Run individual chaos scenarios
                        echo "🎭 Running chaos scenario: ${params.SCENARIO}"
                        sh """
                            cd ${WORKSPACE}/${SCENARIO_DIR}
                            python3 pipeline/chaos_scenarios.py ${params.SCENARIO} 2>/dev/null || echo "Chaos scenario completed"
                        """
                    }
                }
            }
        }

        stage("Test Individual Steps") {
            when {
                expression { params.SCENARIO == "progressive-demo" }
            }
            steps {
                script {
                    echo "🧪 Testing individual steps..."
                    
                    // Test each step individually
                    def steps = [
                        "step1_fail_network": "8081",
                        "step2_fail_resource": "8082", 
                        "step3_fail_service": "8083",
                        "step4_fail_db": "8084",
                        "step5_success": "8085"
                    ]
                    
                    steps.each { step, port ->
                        echo "🔍 Testing ${step} on port ${port}..."
                        sh """
                            cd ${WORKSPACE}/${SCENARIO_DIR}
                            
                            # Build the step
                            docker build -t chaos-${step} scenarios/${step}/ || echo "Build failed for ${step}"
                            
                            # Run the step with proper health check
                            docker run -d --name test-${step} -p ${port}:8080 chaos-${step} || echo "Run failed for ${step}"
                            
                            # Wait longer for container to start and check if it's running
                            sleep 15
                            
                            # Check if container is still running
                            if docker ps | grep -q test-${step}; then
                                echo "✅ Container test-${step} is running"
                                
                                # Show container details
                                echo "📊 Container details:"
                                docker ps | grep test-${step}
                                
                                # Show container logs
                                echo "📋 Container logs:"
                                docker logs test-${step} 2>/dev/null || echo "No logs available"
                                
                                # Test health endpoint with retry
                                for i in {1..5}; do
                                    if curl -f http://localhost:${port}/health 2>/dev/null; then
                                        echo "✅ Health check passed for ${step}"
                                        break
                                    else
                                        echo "⏳ Health check attempt $i failed, retrying..."
                                        sleep 3
                                    fi
                                done
                            else
                                echo "❌ Container test-${step} is not running"
                                echo "📋 Container logs:"
                                docker logs test-${step} 2>/dev/null || echo "No logs available"
                                echo "📊 All running containers:"
                                docker ps
                            fi
                            
                            # Clean up
                            docker stop test-${step} || true
                            docker rm test-${step} || true
                        """
                    }
                }
            }
        }

        stage("Test Step 5 Production System") {
            when {
                expression { params.SCENARIO == "progressive-demo" }
            }
            steps {
                script {
                    echo "🏭 Testing Step 5 production system with Redis and MySQL..."
                    sh """
                        cd ${WORKSPACE}/${SCENARIO_DIR}
                        # Create docker-compose file if it doesn't exist
                        if [ ! -f docker-compose-step5.yml ]; then
                            echo 'version: "3.8"' > docker-compose-step5.yml
                            echo 'services:' >> docker-compose-step5.yml
                            echo '  app:' >> docker-compose-step5.yml
                            echo '    build: ./scenarios/step5_success' >> docker-compose-step5.yml
                            echo '    ports:' >> docker-compose-step5.yml
                            echo '      - "8085:8080"' >> docker-compose-step5.yml
                            echo '    environment:' >> docker-compose-step5.yml
                            echo '      - REDIS_HOST=redis' >> docker-compose-step5.yml
                            echo '      - REDIS_PORT=6379' >> docker-compose-step5.yml
                            echo '      - MYSQL_HOST=mysql' >> docker-compose-step5.yml
                            echo '      - MYSQL_PORT=3306' >> docker-compose-step5.yml
                            echo '      - MYSQL_USER=root' >> docker-compose-step5.yml
                            echo '      - MYSQL_PASSWORD=password' >> docker-compose-step5.yml
                            echo '      - MYSQL_DATABASE=test' >> docker-compose-step5.yml
                            echo '    depends_on:' >> docker-compose-step5.yml
                            echo '      - redis' >> docker-compose-step5.yml
                            echo '      - mysql' >> docker-compose-step5.yml
                            echo '    networks:' >> docker-compose-step5.yml
                            echo '      - chaos-network' >> docker-compose-step5.yml
                            echo '  redis:' >> docker-compose-step5.yml
                            echo '    image: redis:7-alpine' >> docker-compose-step5.yml
                            echo '    ports:' >> docker-compose-step5.yml
                            echo '      - "6379:6379"' >> docker-compose-step5.yml
                            echo '    networks:' >> docker-compose-step5.yml
                            echo '      - chaos-network' >> docker-compose-step5.yml
                            echo '  mysql:' >> docker-compose-step5.yml
                            echo '    image: mysql:8.0' >> docker-compose-step5.yml
                            echo '    ports:' >> docker-compose-step5.yml
                            echo '      - "3306:3306"' >> docker-compose-step5.yml
                            echo '    environment:' >> docker-compose-step5.yml
                            echo '      - MYSQL_ROOT_PASSWORD=password' >> docker-compose-step5.yml
                            echo '      - MYSQL_DATABASE=test' >> docker-compose-step5.yml
                            echo '    networks:' >> docker-compose-step5.yml
                            echo '      - chaos-network' >> docker-compose-step5.yml
                            echo 'networks:' >> docker-compose-step5.yml
                            echo '  chaos-network:' >> docker-compose-step5.yml
                            echo '    driver: bridge' >> docker-compose-step5.yml
                        fi
                    """
                    dockerCompose(
                        useDockerComposeFile: true,
                        dockerComposeFile: "${WORKSPACE}/${SCENARIO_DIR}/docker-compose-step5.yml",
                        dockerComposeCommand: "up -d --build"
                    )
                    sh """
                        sleep 45
                        echo "🔍 Testing production system endpoints..."
                        curl -f http://localhost:8085/health || echo "App health check failed"
                        curl -f http://localhost:8085/debug || echo "Debug endpoint failed"
                        curl -f http://localhost:8085/metrics || echo "Metrics endpoint failed"
                        curl -f http://localhost:8085/run-experiment || echo "Experiment endpoint failed"
                        docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
                    """
                    dockerCompose(
                        useDockerComposeFile: true,
                        dockerComposeFile: "${WORKSPACE}/${SCENARIO_DIR}/docker-compose-step5.yml",
                        dockerComposeCommand: "down"
                    )
                }
            }
        }

        stage("Analyze Results") {
            steps {
                script {
                    echo "📊 Analyzing chaos scenario results..."
                    
                    def messages = [
                        "chaos-full": [
                            title: "🔥 Maximum Chaos - Everything is Broken!",
                            description: "Network, resources, services, and database are all failing",
                            learning: "Demonstrates the impact of multiple simultaneous failures"
                        ],
                        "chaos-1": [
                            title: "🔧 Network Fixed - Other Issues Remain",
                            description: "Network connectivity restored, but resource and service issues persist",
                            learning: "Shows how fixing one issue reveals others"
                        ],
                        "chaos-2": [
                            title: "⚡ Resources Fixed - Service Issues Remain", 
                            description: "Network and resources working, but service dependencies broken",
                            learning: "Demonstrates service dependency management"
                        ],
                        "chaos-3": [
                            title: "🛠️ Services Fixed - Database Issues Remain",
                            description: "Network, resources, and services working, but database failing",
                            learning: "Shows database connectivity and error handling"
                        ],
                        "chaos-free": [
                            title: "🎉 Perfect Pipeline - All Issues Resolved!",
                            description: "All systems working together in harmony",
                            learning: "Demonstrates a production-ready, resilient system"
                        ],
                        "progressive-demo": [
                            title: "🎓 Complete Progressive Chaos Demo",
                            description: "Full educational journey through all chaos scenarios",
                            learning: "Comprehensive learning experience with real production system"
                        ]
                    ]
                    
                    def msg = messages[params.SCENARIO]
                    echo "🎯 SCENARIO: ${msg.title}"
                    echo "📝 DESCRIPTION: ${msg.description}"
                    echo "🎓 LEARNING: ${msg.learning}"
                    
                    if (params.SCENARIO == "progressive-demo") {
                        echo "✅ PROGRESSIVE DEMO COMPLETED!"
                        echo "🎓 Educational value:"
                        echo "   • Step 1: Network connectivity challenges"
                        echo "   • Step 2: Resource management and memory limits"
                        echo "   • Step 3: Service dependencies and fallback mechanisms"
                        echo "   • Step 4: Database connectivity and error handling"
                        echo "   • Step 5: Real production system with Redis and MySQL"
                    }
                    
                    if (env.SIMPLIFIED_MODE == "true") {
                        echo "ℹ️ NOTE: Ran in simplified mode due to missing scenario files"
                        echo "💡 To run full scenarios, ensure all files are available in Jenkins workspace"
                    }
                }
            }
        }
    }
    
    post {
        always {
            echo "🏁 Chaos scenario run complete!"
            sh """
                echo "🧹 Cleaning up containers..."
                docker rm -f \$(docker ps -aq --filter 'name=chaos-*' 2>/dev/null) || echo "No chaos containers to clean"
                docker rm -f \$(docker ps -aq --filter 'name=test-*' 2>/dev/null) || echo "No test containers to clean"
                docker-compose -f ${WORKSPACE}/${SCENARIO_DIR}/docker-compose-step5.yml down 2>/dev/null || echo "No docker-compose to clean"
            """
        }
        success {
            echo "🎉 Success! Chaos scenario completed successfully."
        }
        failure {
            echo "💥 Failure detected (may be expected for chaos scenarios)!"
            script {
                echo "🔍 Last 20 lines of build log:"
                sh "tail -20 ${WORKSPACE}/scenario.log 2>/dev/null || echo 'No scenario.log found'"
            }
        }
    }
}
