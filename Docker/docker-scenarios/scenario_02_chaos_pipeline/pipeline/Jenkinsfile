pipeline {
    agent any

    parameters {
        choice(
            name: "SCENARIO",
            choices: [
                "chaos-full", 
                "chaos-1", 
                "chaos-2", 
                "chaos-3", 
                "chaos-free",
                "progressive-demo"
            ],
            description: "Select the chaos scenario to run"
        )
    }

    environment {
        SCENARIO_DIR = "scenarios"
        WORKSPACE_DIR = "${WORKSPACE}"
    }

    stages {
        stage("Setup Environment") {
            steps {
                echo "üöÄ Setting up Chaos Engineering Workshop environment..."
                sh """
                    echo "üìÅ Working directory: ${WORKSPACE}"
                    echo "üéØ Selected scenario: ${params.SCENARIO}"
                    echo "üì¶ Checking available files:"
                    ls -la || echo "No files found in workspace"
                """
            }
        }

        stage("Check Required Files") {
            steps {
                script {
                    echo "üîç Checking for required files..."
                    
                    // Check if we're in the right directory
                    def hasScenarios = fileExists('scenarios')
                    def hasPipeline = fileExists('pipeline')
                    def hasDemoScripts = fileExists('demo_manual.sh')
                    
                    if (!hasScenarios) {
                        echo "‚ö†Ô∏è scenarios/ directory not found"
                        echo "üìã Current directory contents:"
                        sh "ls -la"
                    } else {
                        echo "‚úÖ scenarios/ directory found"
                    }
                    
                    if (!hasPipeline) {
                        echo "‚ö†Ô∏è pipeline/ directory not found"
                    } else {
                        echo "‚úÖ pipeline/ directory found"
                    }
                    
                    if (!hasDemoScripts) {
                        echo "‚ö†Ô∏è demo_manual.sh not found"
                    } else {
                        echo "‚úÖ demo_manual.sh found"
                    }
                    
                    // If we don't have the required files, we'll run a simplified version
                    if (!hasScenarios && !hasPipeline) {
                        echo "üîÑ Running simplified chaos scenario (no local files)"
                        env.SIMPLIFIED_MODE = "true"
                    } else {
                        echo "‚úÖ All required files found"
                        env.SIMPLIFIED_MODE = "false"
                    }
                }
            }
        }

        stage("Run Chaos Scenario") {
            steps {
                script {
                    echo "üî• Running chaos scenario: ${params.SCENARIO}"
                    
                    if (env.SIMPLIFIED_MODE == "true") {
                        // Run simplified chaos scenario without local files
                        echo "üé≠ Running simplified chaos scenario..."
                        sh """
                            echo "üî• CHAOS FULL: Unleashing maximum chaos!"
                            echo "This scenario demonstrates multiple failure modes:"
                            echo "1. Network connectivity issues"
                            echo "2. Resource exhaustion"
                            echo "3. Service dependency failures"
                            echo "4. Database connection problems"
                            
                            # Create some chaos containers
                            docker run -d --name chaos-test-1 busybox sleep 30 || echo "Container creation failed"
                            docker run -d --name chaos-test-2 busybox sleep 30 || echo "Container creation failed"
                            
                            echo "üí• Chaos scenario completed!"
                        """
                    } else if (params.SCENARIO == "progressive-demo") {
                        // Run the complete progressive demo
                        echo "üéì Running complete progressive chaos demo..."
                        sh """
                            cd ${WORKSPACE}
                            chmod +x demo_manual.sh
                            timeout 600 ./demo_manual.sh || echo "Demo completed or timed out"
                        """
                    } else {
                        // Run individual chaos scenarios
                        echo "üé≠ Running chaos scenario: ${params.SCENARIO}"
                        sh """
                            cd ${WORKSPACE}
                            python3 pipeline/chaos_scenarios.py ${params.SCENARIO}
                        """
                    }
                }
            }
        }

        stage("Test Individual Steps") {
            when {
                expression { params.SCENARIO == "progressive-demo" && env.SIMPLIFIED_MODE == "false" }
            }
            steps {
                script {
                    echo "üß™ Testing individual steps..."
                    
                    // Test each step individually
                    def steps = [
                        "step1_fail_network": "8081",
                        "step2_fail_resource": "8082", 
                        "step3_fail_service": "8083",
                        "step4_fail_db": "8084",
                        "step5_success": "8085"
                    ]
                    
                    steps.each { step, port ->
                        echo "üîç Testing ${step} on port ${port}..."
                        sh """
                            # Build the step
                            docker build -t chaos-${step} ${SCENARIO_DIR}/${step}/ || echo "Build failed for ${step}"
                            
                            # Run the step
                            docker run -d --name test-${step} -p ${port}:8080 chaos-${step} || echo "Run failed for ${step}"
                            
                            # Wait for it to start
                            sleep 10
                            
                            # Test health endpoint
                            curl -f http://localhost:${port}/health || echo "Health check failed for ${step}"
                            
                            # Clean up
                            docker stop test-${step} || true
                            docker rm test-${step} || true
                        """
                    }
                }
            }
        }

        stage("Test Step 5 Production System") {
            when {
                expression { params.SCENARIO == "progressive-demo" && env.SIMPLIFIED_MODE == "false" }
            }
            steps {
                script {
                    echo "üè≠ Testing Step 5 production system with Redis and MySQL..."
                    sh """
                        cd ${WORKSPACE}
                        
                        # Start the production system
                        docker-compose -f docker-compose-step5.yml down || true
                        docker-compose -f docker-compose-step5.yml up -d --build || echo "Docker compose failed"
                        
                        # Wait for services to be ready
                        sleep 30
                        
                        # Test all endpoints
                        echo "üîç Testing production system endpoints..."
                        curl -f http://localhost:8085/health || echo "Health check failed"
                        curl -f http://localhost:8085/debug || echo "Debug endpoint failed"
                        curl -f http://localhost:8085/metrics || echo "Metrics endpoint failed"
                        curl -f http://localhost:8085/run-experiment || echo "Experiment endpoint failed"
                        
                        # Show service status
                        docker-compose -f docker-compose-step5.yml ps || echo "Docker compose ps failed"
                        
                        # Clean up
                        docker-compose -f docker-compose-step5.yml down || true
                    """
                }
            }
        }

        stage("Analyze Results") {
            steps {
                script {
                    echo "üìä Analyzing chaos scenario results..."
                    
                    def messages = [
                        "chaos-full": [
                            title: "üî• Maximum Chaos - Everything is Broken!",
                            description: "Network, resources, services, and database are all failing",
                            learning: "Demonstrates the impact of multiple simultaneous failures"
                        ],
                        "chaos-1": [
                            title: "üîß Network Fixed - Other Issues Remain",
                            description: "Network connectivity restored, but resource and service issues persist",
                            learning: "Shows how fixing one issue reveals others"
                        ],
                        "chaos-2": [
                            title: "‚ö° Resources Fixed - Service Issues Remain", 
                            description: "Network and resources working, but service dependencies broken",
                            learning: "Demonstrates service dependency management"
                        ],
                        "chaos-3": [
                            title: "üõ†Ô∏è Services Fixed - Database Issues Remain",
                            description: "Network, resources, and services working, but database failing",
                            learning: "Shows database connectivity and error handling"
                        ],
                        "chaos-free": [
                            title: "üéâ Perfect Pipeline - All Issues Resolved!",
                            description: "All systems working together in harmony",
                            learning: "Demonstrates a production-ready, resilient system"
                        ],
                        "progressive-demo": [
                            title: "üéì Complete Progressive Chaos Demo",
                            description: "Full educational journey through all chaos scenarios",
                            learning: "Comprehensive learning experience with real production system"
                        ]
                    ]
                    
                    def msg = messages[params.SCENARIO]
                    echo "üéØ SCENARIO: ${msg.title}"
                    echo "üìù DESCRIPTION: ${msg.description}"
                    echo "üéì LEARNING: ${msg.learning}"
                    
                    if (params.SCENARIO == "progressive-demo") {
                        echo "‚úÖ PROGRESSIVE DEMO COMPLETED!"
                        echo "üéì Educational value:"
                        echo "   ‚Ä¢ Step 1: Network connectivity challenges"
                        echo "   ‚Ä¢ Step 2: Resource management and memory limits"
                        echo "   ‚Ä¢ Step 3: Service dependencies and fallback mechanisms"
                        echo "   ‚Ä¢ Step 4: Database connectivity and error handling"
                        echo "   ‚Ä¢ Step 5: Real production system with Redis and MySQL"
                    }
                    
                    if (env.SIMPLIFIED_MODE == "true") {
                        echo "‚ÑπÔ∏è NOTE: Ran in simplified mode due to missing scenario files"
                        echo "üí° To run full scenarios, ensure all files are available in Jenkins workspace"
                    }
                }
            }
        }
    }
    
    post {
        always {
            echo "üèÅ Chaos scenario run complete!"
            sh """
                echo "üßπ Cleaning up containers..."
                docker rm -f \$(docker ps -aq --filter 'name=chaos-*' 2>/dev/null) || echo "No chaos containers to clean"
                docker rm -f \$(docker ps -aq --filter 'name=test-*' 2>/dev/null) || echo "No test containers to clean"
                docker-compose -f docker-compose-step5.yml down 2>/dev/null || echo "No docker-compose to clean"
            """
        }
        success {
            echo "üéâ Success! Chaos scenario completed successfully."
        }
        failure {
            echo "üí• Failure detected (may be expected for chaos scenarios)!"
            script {
                echo "üîç Last 20 lines of build log:"
                sh "tail -20 ${WORKSPACE}/scenario.log 2>/dev/null || echo 'No scenario.log found'"
            }
        }
    }
}
