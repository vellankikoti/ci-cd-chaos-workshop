pipeline {
    agent any

    parameters {
        choice(
            name: 'CHAOS_LEVEL',
            choices: ['chaos-full', 'chaos-1', 'chaos-2', 'chaos-3', 'chaos-free'],
            description: 'Select the chaos scenario to run'
        )
    }

    environment {
        PIP_DISABLE_PIP_VERSION_CHECK = "1"
    }

    stages {
        stage('Welcome to Chaos Engineering!') {
            steps {
                script {
                    echo "üé≠ CHAOS ENGINEERING WORKSHOP"
                    echo "================================"
                    echo "Selected Scenario: ${params.CHAOS_LEVEL}"
                    echo ""
                    
                    switch(params.CHAOS_LEVEL) {
                        case 'chaos-full':
                            echo "üî• CHAOS FULL: Everything is broken!"
                            echo "   - Network connectivity issues"
                            echo "   - Resource exhaustion"
                            echo "   - Service dependency failures"
                            echo "   - Database connection problems"
                            break
                        case 'chaos-1':
                            echo "üîß CHAOS 1: Fixed network issues"
                            echo "   - Still has resource problems"
                            echo "   - Service dependencies broken"
                            echo "   - Database issues remain"
                            break
                        case 'chaos-2':
                            echo "‚ö° CHAOS 2: Fixed resource management"
                            echo "   - Network working"
                            echo "   - Still has service issues"
                            echo "   - Database problems persist"
                            break
                        case 'chaos-3':
                            echo "üõ†Ô∏è CHAOS 3: Fixed service dependencies"
                            echo "   - Network working"
                            echo "   - Resources managed"
                            echo "   - Database issues remain"
                            break
                        case 'chaos-free':
                            echo "üéâ CHAOS FREE: Perfect pipeline!"
                            echo "   - Everything working smoothly"
                            echo "   - All issues resolved"
                            echo "   - Production ready!"
                            break
                    }
                }
            }
        }

        stage('Install Requirements') {
            steps {
                echo 'üêç Installing Python requirements...'
                sh '''
                    pip install -r pipeline/requirements.txt
                '''
            }
        }

        stage('Run Chaos Scenario') {
            steps {
                script {
                    echo "üöÄ Running ${params.CHAOS_LEVEL} scenario..."
                    sh '''
                        python pipeline/chaos_scenarios.py ''' + params.CHAOS_LEVEL + '''
                    '''
                }
            }
        }

        stage('Test Application') {
            steps {
                echo 'üß™ Testing application with chaos...'
                sh '''
                    python tests/test_with_chaos.py ''' + params.CHAOS_LEVEL + '''
                '''
            }
        }

        stage('Chaos Analysis') {
            steps {
                script {
                    echo "üìä Analyzing chaos results..."
                    sh '''
                        python pipeline/chaos_analyzer.py ''' + params.CHAOS_LEVEL + '''
                    '''
                }
            }
        }
    }

    post {
        always {
            echo "üèÅ Chaos scenario completed!"
            echo "Check the logs above to see what happened!"
        }
        success {
            echo "‚úÖ Pipeline succeeded despite chaos!"
        }
        failure {
            echo "üí• Pipeline failed - chaos won this round!"
        }
    }
} 